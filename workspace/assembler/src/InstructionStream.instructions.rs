// This file is part of assembler. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/assembler/master/COPYRIGHT. No part of predicator, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2017 The developers of assembler. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/assembler/master/COPYRIGHT.


impl InstructionStream
{
	/// Add with carry `imm8` to `AL`.
	#[inline(always)]
	fn adc_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x14);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `imm16` to `AX`.
	#[inline(always)]
	fn adc_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x15);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `imm32` to `EAX`.
	#[inline(always)]
	fn adc_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x15);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `imm16` to `r/m16`.
	#[inline(always)]
	fn adc_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` to `r/m16`.
	#[inline(always)]
	fn adc_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `r16` to `r/m16`.
	#[inline(always)]
	fn adc_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `imm32` to `r/m32`.
	#[inline(always)]
	fn adc_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` into `r/m32`.
	#[inline(always)]
	fn adc_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r32` to `r/m32`.
	#[inline(always)]
	fn adc_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `imm32` sign extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn adc_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` into `r/m64`.
	#[inline(always)]
	fn adc_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r64` to `r/m64`.
	#[inline(always)]
	fn adc_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `imm8` to `r/m8`.
	#[inline(always)]
	fn adc_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `imm16` to `r/m16`.
	#[inline(always)]
	fn adc_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` to `r/m16`.
	#[inline(always)]
	fn adc_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `r/m16` to `r16`.
	#[inline(always)]
	fn adc_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r16` to `r/m16`.
	#[inline(always)]
	fn adc_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r/m16` to `r16`.
	#[inline(always)]
	fn adc_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `imm32` to `r/m32`.
	#[inline(always)]
	fn adc_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` into `r/m32`.
	#[inline(always)]
	fn adc_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r/m32` to `r32`.
	#[inline(always)]
	fn adc_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r32` to `r/m32`.
	#[inline(always)]
	fn adc_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r/m32` to `r32`.
	#[inline(always)]
	fn adc_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `imm32` sign extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn adc_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) sign-extended `imm8` into `r/m64`.
	#[inline(always)]
	fn adc_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r/m64` to `r64`.
	#[inline(always)]
	fn adc_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r64` to `r/m64`.
	#[inline(always)]
	fn adc_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with Carry Flag (CF) `r/m64` to `r64`.
	#[inline(always)]
	fn adc_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `imm8` to `r/m8`.
	#[inline(always)]
	fn adc_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `imm32` sign extended to 64-bits to `RAX`.
	#[inline(always)]
	fn adc_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x15);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `imm8` to `r/m8`.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry byte register to `r/m8`.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add with carry `r/m8` to byte register.
	#[inline(always)]
	fn adc_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm8` to `AL`.
	#[inline(always)]
	fn add_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x04);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `imm16` to `AX`.
	#[inline(always)]
	fn add_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x05);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `imm32` to `EAX`.
	#[inline(always)]
	fn add_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x05);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `imm16` to `r/m16`.
	#[inline(always)]
	fn add_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m16`.
	#[inline(always)]
	fn add_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r16` to `r/m16`.
	#[inline(always)]
	fn add_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm32` to `r/m32`.
	#[inline(always)]
	fn add_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m32`.
	#[inline(always)]
	fn add_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r32` to `r/m32`.
	#[inline(always)]
	fn add_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm32` sign-extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn add_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m64`.
	#[inline(always)]
	fn add_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r64` to `r/m64`.
	#[inline(always)]
	fn add_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm8` to `r/m8`.
	#[inline(always)]
	fn add_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm16` to `r/m16`.
	#[inline(always)]
	fn add_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m16`.
	#[inline(always)]
	fn add_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r/m16` to `r16`.
	#[inline(always)]
	fn add_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r16` to `r/m16`.
	#[inline(always)]
	fn add_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m16` to `r16`.
	#[inline(always)]
	fn add_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm32` to `r/m32`.
	#[inline(always)]
	fn add_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m32`.
	#[inline(always)]
	fn add_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r/m32` to `r32`.
	#[inline(always)]
	fn add_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r32` to `r/m32`.
	#[inline(always)]
	fn add_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m32` to `r32`.
	#[inline(always)]
	fn add_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm32` sign-extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn add_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add sign-extended `imm8` to `r/m64`.
	#[inline(always)]
	fn add_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r/m64` to `r64`.
	#[inline(always)]
	fn add_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r64` to `r/m64`.
	#[inline(always)]
	fn add_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m64` to `r64`.
	#[inline(always)]
	fn add_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm8` to `r/m8`.
	#[inline(always)]
	fn add_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `imm32` sign-extended to 64-bits to `RAX`.
	#[inline(always)]
	fn add_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x05);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `imm8` to `r/m8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r8` to `r/m8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `r/m8` to `r8`.
	#[inline(always)]
	fn add_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed single-precision floating-point values from `xmm2/m128` to `xmm1` and stores result in `xmm1`.
	#[inline(always)]
	fn addps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed single-precision floating-point values from `xmm2/m128` to `xmm1` and stores result in `xmm1`.
	#[inline(always)]
	fn addps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add the low double-precision floating-point value from `xmm2/m64` to `xmm1`.
	#[inline(always)]
	fn addsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add the low double-precision floating-point value from `xmm2/m64` to `xmm1`.
	#[inline(always)]
	fn addsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add the low single-precision floating-point value from `xmm2/m32` to `xmm1`.
	#[inline(always)]
	fn addss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add the low single-precision floating-point value from `xmm2/m32` to `xmm1`.
	#[inline(always)]
	fn addss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add/subtract double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addsubpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add/subtract double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addsubpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add/subtract single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addsubps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add/subtract single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn addsubps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesdec_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesdec_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesdeclast_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesdeclast_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform one round of an AES encryption flow, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesenc_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform one round of an AES encryption flow, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesenc_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesenclast_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from `xmm1` with a 128-bit round key from `xmm2/m128`.
	#[inline(always)]
	fn aesenclast_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the InvMixColumn transformation on a 128-bit round key from `xmm2/m128` and store the result in `xmm1`.
	#[inline(always)]
	fn aesimc_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform the InvMixColumn transformation on a 128-bit round key from `xmm2/m128` and store the result in `xmm1`.
	#[inline(always)]
	fn aesimc_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Assist in AES round key generation using an 8 bits Round Constant (RCON) specified in the `imm8`, operating on 128 bits of data specified in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn aeskeygenassist_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Assist in AES round key generation using an 8 bits Round Constant (RCON) specified in the `imm8`, operating on 128 bits of data specified in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn aeskeygenassist_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// `AL && imm8`.
	#[inline(always)]
	fn and_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x24);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `AX && imm16`.
	#[inline(always)]
	fn and_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x25);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `EAX && imm32`.
	#[inline(always)]
	fn and_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x25);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16 && imm16`.
	#[inline(always)]
	fn and_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16 && r16`.
	#[inline(always)]
	fn and_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32 && imm32`.
	#[inline(always)]
	fn and_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32 && r32`.
	#[inline(always)]
	fn and_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64 && imm32` sign extended to 64-bits.
	#[inline(always)]
	fn and_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64 && r32`.
	#[inline(always)]
	fn and_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && imm8`.
	#[inline(always)]
	fn and_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16 && imm16`.
	#[inline(always)]
	fn and_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r16 && r/m16`.
	#[inline(always)]
	fn and_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16 && r16`.
	#[inline(always)]
	fn and_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r16 && r/m16`.
	#[inline(always)]
	fn and_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32 && imm32`.
	#[inline(always)]
	fn and_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r32 && r/m32`.
	#[inline(always)]
	fn and_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32 && r32`.
	#[inline(always)]
	fn and_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r32 && r/m32`.
	#[inline(always)]
	fn and_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64 && imm32` sign extended to 64-bits.
	#[inline(always)]
	fn and_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64 && imm8` (sign-extended).
	#[inline(always)]
	fn and_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r64 && r/m64`.
	#[inline(always)]
	fn and_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64 && r32`.
	#[inline(always)]
	fn and_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r64 && r/m64`.
	#[inline(always)]
	fn and_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && imm8`.
	#[inline(always)]
	fn and_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RAX AND imm32` sign-extended to 64-bits.
	#[inline(always)]
	fn and_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x25);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8 && imm8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8 && r8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8 && r/m8`.
	#[inline(always)]
	fn and_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND of inverted `r32b` with `r/m32` with result stored in in `r32a`.
	#[inline(always)]
	fn andn_Register32Bit_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of inverted `r32b` with `r/m32` with result stored in in `r32a`.
	#[inline(always)]
	fn andn_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of inverted `r64b` with `r/m64` with result stored in in `r64a`.
	#[inline(always)]
	fn andn_Register64Bit_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of inverted `r64b` with `r/m64` with result stored in in `r64a`.
	#[inline(always)]
	fn andn_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise logical AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andnpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x55);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise logical AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andnpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x55);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise logical AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andnps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x55);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise logical AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andnps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x55);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn andpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x54);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn andpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x54);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise logical AND of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x54);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise logical AND of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn andps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x54);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Contiguous bitwise extract from `r/m32` using `r32b` as control.
	///
	/// Stores result in `r32a`.
	#[inline(always)]
	fn bextr_Register32Bit_Any32BitMemory_Register32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Contiguous bitwise extract from `r/m32` using `r32b` as control.
	///
	/// Stores result in `r32a`.
	#[inline(always)]
	fn bextr_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Contiguous bitwise extract from `r/m64` using `r64b` as control.
	///
	/// Stores result in `r64a`.
	#[inline(always)]
	fn bextr_Register64Bit_Any64BitMemory_Register64Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Contiguous bitwise extract from `r/m64` using `r64b` as control.
	///
	/// Stores result in `r64a`.
	#[inline(always)]
	fn bextr_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed DP-FP values from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn blendpd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0D);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Select packed DP-FP values from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn blendpd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0D);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Select packed single-precision floating-point values from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn blendps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0C);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Select packed single-precision floating-point values from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn blendps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0C);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Select packed DP FP values from `xmm1` and `xmm2` from mask specified in `XMM0` and store the values in `xmm1`.
	#[inline(always)]
	fn blendvpd_XMMRegister_Any128BitMemory_XMMRegister0(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select packed DP FP values from `xmm1` and `xmm2` from mask specified in `XMM0` and store the values in `xmm1`.
	#[inline(always)]
	fn blendvpd_XMMRegister_XMMRegister_XMMRegister0(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select packed single-precision floating-point values from `xmm1` and `xmm2/m128` from mask specified in `XMM0` and store the values into `xmm1`.
	#[inline(always)]
	fn blendvps_XMMRegister_Any128BitMemory_XMMRegister0(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select packed single-precision floating-point values from `xmm1` and `xmm2/m128` from mask specified in `XMM0` and store the values into `xmm1`.
	#[inline(always)]
	fn blendvps_XMMRegister_XMMRegister_XMMRegister0(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract lowest set bit from `r/m32` and set that bit in `r32`.
	#[inline(always)]
	fn blsi_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract lowest set bit from `r/m32` and set that bit in `r32`.
	#[inline(always)]
	fn blsi_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract lowest set bit from `r/m64`, and set that bit in `r64`.
	#[inline(always)]
	fn blsi_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract lowest set bit from `r/m64`, and set that bit in `r64`.
	#[inline(always)]
	fn blsi_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set all lower bits in `r32` to `1` starting from bit 0 to lowest set bit in `r/m32`.
	#[inline(always)]
	fn blsmsk_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set all lower bits in `r32` to `1` starting from bit 0 to lowest set bit in `r/m32`.
	#[inline(always)]
	fn blsmsk_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set all lower bits in `r64` to `1` starting from bit 0 to lowest set bit in `r/m64`.
	#[inline(always)]
	fn blsmsk_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set all lower bits in `r64` to `1` starting from bit 0 to lowest set bit in `r/m64`.
	#[inline(always)]
	fn blsmsk_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Reset lowest set bit of `r/m32`, keep all other bits of `r/m32` and write result to `r32`.
	#[inline(always)]
	fn blsr_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RCX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Reset lowest set bit of `r/m32`, keep all other bits of `r/m32` and write result to `r32`.
	#[inline(always)]
	fn blsr_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg0, arg1, Register64Bit::RCX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Reset lowest set bit of `r/m64`, keep all other bits of `r/m64` and write result to `r64`.
	#[inline(always)]
	fn blsr_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RCX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Reset lowest set bit of `r/m64`, keep all other bits of `r/m64` and write result to `r64`.
	#[inline(always)]
	fn blsr_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg0, arg1, Register64Bit::RCX);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg1, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bit scan forward on `r/m16`.
	#[inline(always)]
	fn bsf_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan forward on `r/m16`.
	#[inline(always)]
	fn bsf_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan forward on `r/m32`.
	#[inline(always)]
	fn bsf_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan forward on `r/m32`.
	#[inline(always)]
	fn bsf_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan forward on `r/m64`.
	#[inline(always)]
	fn bsf_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan forward on `r/m64`.
	#[inline(always)]
	fn bsf_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m16`.
	#[inline(always)]
	fn bsr_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m16`.
	#[inline(always)]
	fn bsr_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m32`.
	#[inline(always)]
	fn bsr_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m32`.
	#[inline(always)]
	fn bsr_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m64`.
	#[inline(always)]
	fn bsr_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bit scan reverse on `r/m64`.
	#[inline(always)]
	fn bsr_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverses the byte order of a 32-bit register.
	#[inline(always)]
	fn bswap_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0x0F, 0xC8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverses the byte order of a 64-bit register.
	#[inline(always)]
	fn bswap_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_3(0x0F, 0xC8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF).
	#[inline(always)]
	fn bt_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and complement.
	#[inline(always)]
	fn btc_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xBB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and clear.
	#[inline(always)]
	fn btr_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xB3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Store selected bit in Carry Flag (CF) and set.
	#[inline(always)]
	fn bts_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAB);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero bits in `r/m32` starting with the position in `r32b`, write result to `r32a`.
	#[inline(always)]
	fn bzhi_Register32Bit_Any32BitMemory_Register32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero bits in `r/m32` starting with the position in `r32b`, write result to `r32a`.
	#[inline(always)]
	fn bzhi_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero bits in `r/m64` starting with the position in `r64b`, write result to `r64a`.
	#[inline(always)]
	fn bzhi_Register64Bit_Any64BitMemory_Register64Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero bits in `r/m64` starting with the position in `r64b`, write result to `r64a`.
	#[inline(always)]
	fn bzhi_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x0, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Call far, absolute indirect address given in `m16:16`.
	///
	/// In 32-bit mode: if selector points to a gate, then `RIP` = 32-bit zero extended displacement taken from gate else `RIP` = zero extended 16-bit offset from far pointer referenced in the instruction.
	#[inline(always)]
	fn call_FarPointer16BitTo16Bit(&mut self, arg0: FarPointer16BitTo16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Call far, absolute indirect address given in `m16:32`.
	///
	/// In 64-bit mode: If selector points to a gate, then `RIP` = 64-bit displacement taken from gate else `RIP` = zero extended 32-bit offset from far pointer referenced in the instruction.
	#[inline(always)]
	fn call_FarPointer16BitTo32Bit(&mut self, arg0: FarPointer16BitTo32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Call far, absolute indirect address given in `m16:64`.
	///
	/// In 64-bit mode: If selector points to a gate, then `RIP` = 64-bit displacement taken from gate else `RIP` = 64-bit offset from far pointer referenced in the instruction.
	#[inline(always)]
	fn call_FarPointer16BitTo64Bit(&mut self, arg0: FarPointer16BitTo64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Call near, relative, displacement relative to next instruction.
	///
	/// 32-bit displacement sign extended to 64-bits in 64-bit mode.
	#[inline(always)]
	fn call_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Call near, absolute indirect, address given in `r/m64`.
	#[inline(always)]
	fn call_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Call near, absolute indirect, address given in `r/m64`.
	#[inline(always)]
	fn call_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Call near, relative, displacement relative to next instruction.
	///
	/// 32-bit displacement sign extended to 64-bits in 64-bit mode.
	#[inline(always)]
	fn call_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// `AX` = sign-extend of `AL`.
	#[inline(always)]
	fn cbw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x98);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `EDX:EAX` = sign-extend of `EAX`.
	#[inline(always)]
	fn cdq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x99);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RAX` = sign-extend of `EAX`.
	#[inline(always)]
	fn cdqe(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x98);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Clear Carry Flag (CF).
	#[inline(always)]
	fn clc(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Clear Direction Flag (DF).
	#[inline(always)]
	fn cld(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Flushes cache line containing `m8`.
	#[inline(always)]
	fn clflush_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Clear interrupt flag; interrupts disabled when interrupt flag cleared.
	#[inline(always)]
	fn cli(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Complement Carry Flag (CF).
	#[inline(always)]
	fn cmc(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xF5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmova_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovae_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovb_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovbe_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovc_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmove_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovg_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovge_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovl_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovle_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovna_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x46);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn cmovnae_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x42);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnb_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnbe_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x47);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn cmovnc_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x43);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovne_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovng_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnge_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnl_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn cmovnle_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn cmovno_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovnp_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn cmovns_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x49);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn cmovnz_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x45);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn cmovo_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovp_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn cmovpe_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn cmovpo_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x4B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn cmovs_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x48);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn cmovz_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x44);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm8` with `AL`.
	#[inline(always)]
	fn cmp_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x3C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm16` with `AX`.
	#[inline(always)]
	fn cmp_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x3D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm32` with `EAX`.
	#[inline(always)]
	fn cmp_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x3D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm16` with `r/m16`.
	#[inline(always)]
	fn cmp_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m16`.
	#[inline(always)]
	fn cmp_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r16` with `r/m16`.
	#[inline(always)]
	fn cmp_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm32` with `r/m32`.
	#[inline(always)]
	fn cmp_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m32`.
	#[inline(always)]
	fn cmp_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r32` with `r/m32`.
	#[inline(always)]
	fn cmp_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm32` sign-extended to 64-bits with `r/m64`.
	#[inline(always)]
	fn cmp_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m64`.
	#[inline(always)]
	fn cmp_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r64` with `r/m64`.
	#[inline(always)]
	fn cmp_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm8` with `r/m8`.
	#[inline(always)]
	fn cmp_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm16` with `r/m16`.
	#[inline(always)]
	fn cmp_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m16`.
	#[inline(always)]
	fn cmp_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r/m16` with `r16`.
	#[inline(always)]
	fn cmp_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r16` with `r/m16`.
	#[inline(always)]
	fn cmp_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m16` with `r16`.
	#[inline(always)]
	fn cmp_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm32` with `r/m32`.
	#[inline(always)]
	fn cmp_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m32`.
	#[inline(always)]
	fn cmp_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r/m32` with `r32`.
	#[inline(always)]
	fn cmp_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r32` with `r/m32`.
	#[inline(always)]
	fn cmp_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m32` with `r32`.
	#[inline(always)]
	fn cmp_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm32` sign-extended to 64-bits with `r/m64`.
	#[inline(always)]
	fn cmp_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m64`.
	#[inline(always)]
	fn cmp_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r/m64` with `r64`.
	#[inline(always)]
	fn cmp_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r64` with `r/m64`.
	#[inline(always)]
	fn cmp_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m64` with `r64`.
	#[inline(always)]
	fn cmp_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm8` with `r/m8`.
	#[inline(always)]
	fn cmp_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `imm32` sign-extended to 64-bits with `RAX`.
	#[inline(always)]
	fn cmp_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x3D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `imm8` with `r/m8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r8` with `r/m8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `r/m8` with `r8`.
	#[inline(always)]
	fn cmp_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed double-precision floating-point values in `xmm2/m128` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmppd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare packed double-precision floating-point values in `xmm2/m128` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmppd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare packed single-precision floating-point values in `xmm2/mem` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare packed single-precision floating-point values in `xmm2/mem` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// For legacy mode, compare word at address `DS:(E)SI` with word at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare word at address `(R
	///E)SI` with word at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmps_Any16BitMemory_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, compare dword at address `DS:(E)SI` at dword at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare dword at address ``(R
	///E)SI`` at dword at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmps_Any32BitMemory_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compares quadword at address `(R
	///E)SI` with quadword at address `(R
	///E)DI` and sets the status flags accordingly.
	#[inline(always)]
	fn cmps_Any64BitMemory_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, compare byte at address `DS:(E)SI` with byte at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare byte at address `(R
	///E)SI` to byte at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmps_Any8BitMemory_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, compare byte at address `DS:(E)SI` with byte at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare byte at address `(R
	///E)SI` with byte at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmpsb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, compare dword at address `DS:(E)SI` with dword at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare dword at address `(R
	///E)SI` with dword at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmpsd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low double-precision floating-point value in `xmm2/m64` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpsd_XMMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare low double-precision floating-point value in `xmm2/m64` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpsd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compares quadword at address `(R
	///E)SI` with quadword at address `(R
	///E)DI` and sets the status flags accordingly.
	#[inline(always)]
	fn cmpsq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low single-precision floating-point value in `xmm2/m32` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpss_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare low single-precision floating-point value in `xmm2/m32` and `xmm1` using `imm8` as comparison predicate.
	#[inline(always)]
	fn cmpss_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC2);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// For legacy mode, compare word at address `DS:(E)SI` with word at address `ES:(E)DI`.
	///
	/// For 64-bit mode compare word at address `(R
	///E)SI` with word at address `(R
	///E)DI`.
	///
	/// The status flags are set accordingly.
	#[inline(always)]
	fn cmpsw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AX` with `r/m16`.
	///
	/// If equal the Zero Flag (ZF) is set and `r16` is loaded into `r/m16`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m16` into `AX`.
	#[inline(always)]
	fn cmpxchg_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `EAX` with `r/m32`.
	///
	/// If equal the Zero Flag (ZF) is set and `r32` is loaded into `r/m32`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m32` into `EAX`.
	#[inline(always)]
	fn cmpxchg_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `RAX` with `r/m64`.
	///
	/// If equal the Zero Flag (ZF) is set and `r64` is loaded into `r/m64`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m64` into `RAX`.
	#[inline(always)]
	fn cmpxchg_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AX` with `r/m16`.
	///
	/// If equal the Zero Flag (ZF) is set and `r16` is loaded into `r/m16`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m16` into `AX`.
	#[inline(always)]
	fn cmpxchg_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `EAX` with `r/m32`.
	///
	/// If equal the Zero Flag (ZF) is set and `r32` is loaded into `r/m32`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m32` into `EAX`.
	#[inline(always)]
	fn cmpxchg_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `RAX` with `r/m64`.
	///
	/// If equal the Zero Flag (ZF) is set and `r64` is loaded into `r/m64`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m64` into `RAX`.
	#[inline(always)]
	fn cmpxchg_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xB1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with `r/m8`.
	///
	/// If equal the Zero Flag (ZF) is set and `r8` is loaded into `r/m8`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `r/m8` into `AL`.
	#[inline(always)]
	fn cmpxchg_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xB0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `RDX:RAX` with `m128`.
	///
	/// If equal, set ZF and load `RCX:RBX` into `m128`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `m128` into `RDX:RAX`.
	#[inline(always)]
	fn cmpxchg16b_Any128BitMemory(&mut self, arg0: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `EDX:EAX` with `m64`.
	///
	/// If equal, set ZF and load `ECX:EBX` into `m64`.
	///
	/// Otherwise clears the Zero Flag (ZF) and loads `m64` into `EDX:EAX`.
	#[inline(always)]
	fn cmpxchg8b_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn comisd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn comisd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn comiss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn comiss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Returns processor identification and feature information into the `EAX`, `EBX`, `ECX`, and `EDX` registers as determined by the value in `EAX`, and, in some cases, `ECX` as well.
	#[inline(always)]
	fn cpuid(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RDX:RAX` = sign-extend of `RAX`.
	#[inline(always)]
	fn cqo(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x99);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m16`.
	#[inline(always)]
	fn crc32_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m32`.
	#[inline(always)]
	fn crc32_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m8`.
	#[inline(always)]
	fn crc32_Register32Bit_Any8BitMemory(&mut self, arg0: Register32Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m16`.
	#[inline(always)]
	fn crc32_Register32Bit_Register16Bit(&mut self, arg0: Register32Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m32`.
	#[inline(always)]
	fn crc32_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m8`.
	#[inline(always)]
	fn crc32_Register32Bit_Register8Bit(&mut self, arg0: Register32Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m8`.
	#[inline(always)]
	fn crc32_Register32Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register32Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m64`.
	#[inline(always)]
	fn crc32_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m8`.
	#[inline(always)]
	fn crc32_Register64Bit_Any8BitMemory(&mut self, arg0: Register64Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m64`.
	#[inline(always)]
	fn crc32_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Accumulate Cyclic Redundancy Check 32 (CRC32) on `r/m8`.
	#[inline(always)]
	fn crc32_Register64Bit_Register8Bit(&mut self, arg0: Register64Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed signed doubleword integers from `xmm2/m128` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtdq2pd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed signed doubleword integers from `xmm2/m128` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtdq2pd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four packed signed doubleword integers from `xmm2/m128` to four packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtdq2ps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four packed signed doubleword integers from `xmm2/m128` to four packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtdq2ps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm2/m128` to two packed signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn cvtpd2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm2/m128` to two packed signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn cvtpd2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm/m32` to two packed signed doubleword integers in `mm`.
	#[inline(always)]
	fn cvtpd2pi_MMRegister_Any128BitMemory(&mut self, arg0: MMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm/m32` to two packed signed doubleword integers in `mm`.
	#[inline(always)]
	fn cvtpd2pi_MMRegister_XMMRegister(&mut self, arg0: MMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/m128` to two packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtpd2ps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/m128` to two packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtpd2ps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed signed doubleword integers from `mm/mem64` to two packed double-precision floating-point values in `xmm`.
	#[inline(always)]
	fn cvtpi2pd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed signed doubleword integers from `mm/mem64` to two packed double-precision floating-point values in `xmm`.
	#[inline(always)]
	fn cvtpi2pd_XMMRegister_MMRegister(&mut self, arg0: XMMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two signed doubleword integers from `mm/m64` to two single-precision floating-point values in `xmm`.
	#[inline(always)]
	fn cvtpi2ps_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two signed doubleword integers from `mm/m64` to two single-precision floating-point values in `xmm`.
	#[inline(always)]
	fn cvtpi2ps_XMMRegister_MMRegister(&mut self, arg0: XMMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/m128` to four packed signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn cvtps2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/m128` to four packed signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn cvtps2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed single-precision floating-point values in `xmm2/m64` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtps2pd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed single-precision floating-point values in `xmm2/m64` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn cvtps2pd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed single-precision floating-point values from `xmm/m64` to two packed signed doubleword integers in `mm`.
	#[inline(always)]
	fn cvtps2pi_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed single-precision floating-point values from `xmm/m64` to two packed signed doubleword integers in `mm`.
	#[inline(always)]
	fn cvtps2pi_MMRegister_XMMRegister(&mut self, arg0: MMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed doubleword integer `r32`.
	#[inline(always)]
	fn cvtsd2si_Register32Bit_Any64BitMemory(&mut self, arg0: Register32Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed doubleword integer `r32`.
	#[inline(always)]
	fn cvtsd2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed quadword integer sign-extended into `r64`.
	#[inline(always)]
	fn cvtsd2si_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed quadword integer sign-extended into `r64`.
	#[inline(always)]
	fn cvtsd2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value in `xmm2/m64` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn cvtsd2ss_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value in `xmm2/m64` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn cvtsd2ss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed doubleword integer from `r/m32` to one double-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2sd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed quadword integer from `r/m64` to one double-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2sd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed doubleword integer from `r/m32` to one double-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2sd_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed quadword integer from `r/m64` to one double-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2sd_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed doubleword integer from `r/m32` to one single-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2ss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed quadword integer from `r/m64` to one single-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2ss_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed doubleword integer from `r/m32` to one single-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2ss_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one signed quadword integer from `r/m64` to one single-precision floating-point value in `xmm`.
	#[inline(always)]
	fn cvtsi2ss_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value in `xmm2/m32` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn cvtss2sd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value in `xmm2/m32` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn cvtss2sd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed doubleword integer in `r32`.
	#[inline(always)]
	fn cvtss2si_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed doubleword integer in `r32`.
	#[inline(always)]
	fn cvtss2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed quadword integer in `r64`.
	#[inline(always)]
	fn cvtss2si_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed quadword integer in `r64`.
	#[inline(always)]
	fn cvtss2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm2/m128` to two packed signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn cvttpd2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packed double-precision floating-point values from `xmm2/m128` to two packed signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn cvttpd2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packer double-precision floating-point values from `xmm/m32` to two packed signed doubleword integers in `mm` using truncation.
	#[inline(always)]
	fn cvttpd2pi_MMRegister_Any128BitMemory(&mut self, arg0: MMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two packer double-precision floating-point values from `xmm/m32` to two packed signed doubleword integers in `mm` using truncation.
	#[inline(always)]
	fn cvttpd2pi_MMRegister_XMMRegister(&mut self, arg0: MMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four single-precision floating-point values from `xmm2/m128` to four signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn cvttps2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert four single-precision floating-point values from `xmm2/m128` to four signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn cvttps2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two single-precision floating-point values from `xmm/m64` to two signed doubleword signed integers in `mm` using truncation.
	#[inline(always)]
	fn cvttps2pi_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert two single-precision floating-point values from `xmm/m64` to two signed doubleword signed integers in `mm` using truncation.
	#[inline(always)]
	fn cvttps2pi_MMRegister_XMMRegister(&mut self, arg0: MMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn cvttsd2si_Register32Bit_Any64BitMemory(&mut self, arg0: Register32Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn cvttsd2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signedquadword integer in `r64` using truncation.
	#[inline(always)]
	fn cvttsd2si_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one double-precision floating-point value from `xmm/m64` to one signedquadword integer in `r64` using truncation.
	#[inline(always)]
	fn cvttsd2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn cvttss2si_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn cvttss2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn cvttss2si_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert one single-precision floating-point value from `xmm/m32` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn cvttss2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `DX:AX` = sign-extend of `AX`.
	#[inline(always)]
	fn cwd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x99);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `EAX` = sign-extend of `AX`.
	#[inline(always)]
	fn cwde(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x98);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m16` by 1.
	#[inline(always)]
	fn dec_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m32` by 1.
	#[inline(always)]
	fn dec_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m64` by 1.
	#[inline(always)]
	fn dec_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m8` by 1.
	#[inline(always)]
	fn dec_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m16` by 1.
	#[inline(always)]
	fn dec_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m32` by 1.
	#[inline(always)]
	fn dec_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m64` by 1.
	#[inline(always)]
	fn dec_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m8` by 1.
	#[inline(always)]
	fn dec_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `r/m8` by 1.
	#[inline(always)]
	fn dec_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `DX:AX` by `r/m16`, with result stored in `AX` (Quotient) and `DX` (Remainder).
	#[inline(always)]
	fn div_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `EDX:EAX` by `r/m32`, with result stored in `EAX` (Quotient) and `EDX` (Remainder).
	#[inline(always)]
	fn div_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `RDX:RAX` by `r/m64`, with result stored in `RAX` (Quotient) and `RDX` (Remainder).
	#[inline(always)]
	fn div_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn div_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `DX:AX` by `r/m16`, with result stored in `AX` (Quotient) and `DX` (Remainder).
	#[inline(always)]
	fn div_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `EDX:EAX` by `r/m32`, with result stored in `EAX` (Quotient) and `EDX` (Remainder).
	#[inline(always)]
	fn div_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `RDX:RAX` by `r/m64`, with result stored in `RAX` (Quotient) and `RDX` (Remainder).
	#[inline(always)]
	fn div_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn div_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn div_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide packed double-precision floating-point values in `xmm1` by packed double-precision floating-point values `xmm2/m128`.
	#[inline(always)]
	fn divpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide packed double-precision floating-point values in `xmm1` by packed double-precision floating-point values `xmm2/m128`.
	#[inline(always)]
	fn divpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide packed single-precision floating-point values in `xmm1` by packed single-precision floating-point values `xmm2/m128`.
	#[inline(always)]
	fn divps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide packed single-precision floating-point values in `xmm1` by packed single-precision floating-point values `xmm2/m128`.
	#[inline(always)]
	fn divps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide low double-precision floating-point value in `xmm1` by low double-precision floating-point value in `xmm2/mem64`.
	#[inline(always)]
	fn divsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide low double-precision floating-point value in `xmm1` by low double-precision floating-point value in `xmm2/mem64`.
	#[inline(always)]
	fn divsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide low single-precision floating-point value in `xmm1` by low single-precision floating-point value in `xmm2/m32`.
	#[inline(always)]
	fn divss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide low single-precision floating-point value in `xmm1` by low single-precision floating-point value in `xmm2/m32`.
	#[inline(always)]
	fn divss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Selectively multiply packed double-precision floating-point values from `xmm1` with packed double-precision floating-point values from `xmm2`. add and selectively store the packed double-precision floating-point values to `xmm1`.
	#[inline(always)]
	fn dppd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x41);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Selectively multiply packed double-precision floating-point values from `xmm1` with packed double-precision floating-point values from `xmm2`. add and selectively store the packed double-precision floating-point values to `xmm1`.
	#[inline(always)]
	fn dppd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x41);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Selectively multiply packed single-precision floating-point values from `xmm1` with packed single-precision floating-point values from `xmm2`. add and selectively store the packed single-precision floating-point values or zero values to `xmm1`.
	#[inline(always)]
	fn dpps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x40);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Selectively multiply packed single-precision floating-point values from `xmm1` with packed single-precision floating-point values from `xmm2`. add and selectively store the packed single-precision floating-point values or zero values to `xmm1`.
	#[inline(always)]
	fn dpps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x40);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Set the x87 Floating Point Unit (FPU) tag word to empty.
	#[inline(always)]
	fn emms(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Create a nested stack frame for a procedure.
	#[inline(always)]
	fn enter_Immediate8Bit_Immediate16Bit(&mut self, arg0: Immediate8Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_2(arg0, arg1);

		// No label displacement.
	}

	/// Create a nested stack frame for a procedure.
	#[inline(always)]
	fn enter_One_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_2(Immediate8Bit(1), arg1);

		// No label displacement.
	}

	/// Create a stack frame for a procedure.
	#[inline(always)]
	fn enter_Zero_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_2(Immediate8Bit(0), arg1);

		// No label displacement.
	}

	/// Extract a single-precision floating-point value from `xmm2` at the source offset specified by `imm8` and store the result to `reg` or `m32`.
	///
	/// The upper 32 bits of `r64` is zeroed if `reg` is `r64`.
	#[inline(always)]
	fn extractps_Any32BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x17);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a single-precision floating-point value from `xmm2` at the source offset specified by `imm8` and store the result to `reg` or `m32`.
	///
	/// The upper 32 bits of `r64` is zeroed if `reg` is `r64`.
	#[inline(always)]
	fn extractps_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x17);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a single-precision floating-point value from `xmm2` at the source offset specified by `imm8` and store the result to `reg` or `m32`.
	///
	/// The upper 32 bits of `r64` is zeroed if `reg` is `r64`.
	#[inline(always)]
	fn extractps_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x17);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Replace `ST(0)` with `(2^(ST(0)) - 1)`.
	#[inline(always)]
	fn f2xm1(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST` with its absolute value.
	#[inline(always)]
	fn fabs(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `m32fp` to `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fadd_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `m64fp` to `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fadd_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `ST(i)` to `ST(0)` and store result in `ST(i)`.
	#[inline(always)]
	fn fadd_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xC0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `ST(0)` to `ST(i)` and store result in `ST(0)`.
	#[inline(always)]
	fn fadd_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xC0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `ST(0)` to `ST(1)` with result stored in in `ST(1)`, and pop the register stack.
	#[inline(always)]
	fn faddp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xC1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `ST(0)` to `ST(i)` with result stored in in `ST(i)`, and pop the register stack.
	#[inline(always)]
	fn faddp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xC0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert binary coded decimal value to floating-point and push onto the Floating Point Unit (FPU) stack.
	#[inline(always)]
	fn fbld_X87BinaryCodedDecimal80BitMemory(&mut self, arg0: X87BinaryCodedDecimal80BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m80bcd` and pop `ST(0)`.
	#[inline(always)]
	fn fbstp_X87BinaryCodedDecimal80BitMemory(&mut self, arg0: X87BinaryCodedDecimal80BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Complements sign of `ST(0)`.
	#[inline(always)]
	fn fchs(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Clear floating-point exception flags after checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fclex(&mut self)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDB, 0xE2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn fcmovb_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDA, 0xC0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn fcmovbe_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDA, 0xD0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn fcmove_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDA, 0xC8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn fcmovnb_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xC0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn fcmovnbe_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xD0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn fcmovne_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xC8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if not unordered (Parity Flag (PF) is 0).
	#[inline(always)]
	fn fcmovnu_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xD8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move if unordered (Parity Flag (PF) is 1).
	#[inline(always)]
	fn fcmovu_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDA, 0xD8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)`.
	#[inline(always)]
	fn fcom(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD8, 0xD1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m32fp`.
	#[inline(always)]
	fn fcom_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m64fp`.
	#[inline(always)]
	fn fcom_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`.
	#[inline(always)]
	fn fcom_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xD8, 0xD0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)` and set status flags accordingly.
	#[inline(always)]
	fn fcomi_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xF0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`, set status flags accordingly, and pop register stack.
	#[inline(always)]
	fn fcomip_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDF, 0xF0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)` and pop register stack.
	#[inline(always)]
	fn fcomp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD8, 0xD9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m32fp` and pop register stack.
	#[inline(always)]
	fn fcomp_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m64fp` and pop register stack.
	#[inline(always)]
	fn fcomp_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)` and pop register stack.
	#[inline(always)]
	fn fcomp_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xD8, 0xD8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)` and pop register stack twice.
	#[inline(always)]
	fn fcompp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xD9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(0)` with its cosine.
	#[inline(always)]
	fn fcos(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement `TOP` field in Floating Point Unit (FPU) status word.
	#[inline(always)]
	fn fdecstp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `m32fp` and store result in `ST(0)`.
	#[inline(always)]
	fn fdiv_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`, set status flags accordingly, and pop register stack.
	#[inline(always)]
	fn fdiv_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(i)` by `ST(0)` and store result in `ST(i)`.
	#[inline(always)]
	fn fdiv_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xF0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `ST(i)` and store result in `ST(0)`.
	#[inline(always)]
	fn fdiv_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xF0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(1)` by `ST(0)` with result stored in in `ST(1)`, and pop the register stack.
	#[inline(always)]
	fn fdivp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xF1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(i)` by `ST(0)` with result stored in in `ST(i)`, and pop the register stack.
	#[inline(always)]
	fn fdivp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xF0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `m32fp` by `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fdivr_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `m64fp` by `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fdivr_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `ST(i)` and store result in `ST(i)`.
	#[inline(always)]
	fn fdivr_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xF8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(i)` by `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fdivr_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xF8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `ST(1)` with result stored in in `ST(1)`, and pop the register stack.
	#[inline(always)]
	fn fdivrp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xF9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `ST(i)` with result stored in in `ST(i)`, and pop the register stack.
	#[inline(always)]
	fn fdivrp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xF8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sets tag for `ST(i)` to empty.
	#[inline(always)]
	fn ffree_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xDD, 0xC0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `m16int` to `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fiadd_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add `m32int` to `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fiadd_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m16int`.
	#[inline(always)]
	fn ficom_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m32int`.
	#[inline(always)]
	fn ficom_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m16int` and pop stack register.
	#[inline(always)]
	fn ficomp_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `m32int` and pop stack register.
	#[inline(always)]
	fn ficomp_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `m64int` and store result in `ST(0)`.
	#[inline(always)]
	fn fidiv_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `ST(0)` by `m32int` and store result in `ST(0)`.
	#[inline(always)]
	fn fidiv_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `m16int` by `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fidivr_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Divide `m32int` by `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fidivr_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m16int` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fild_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m32int` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fild_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m64int` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fild_X87Integer64BitMemory(&mut self, arg0: X87Integer64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(0)` by `m16int` and store result in `ST(0)`.
	#[inline(always)]
	fn fimul_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(0)` by `m32int` and store result in `ST(0)`.
	#[inline(always)]
	fn fimul_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment the TOP field in the Floating Point Unit (FPU) status register.
	#[inline(always)]
	fn fincstp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Initialize Floating Point Unit (FPU) after checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn finit(&mut self)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDB, 0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m16int`.
	#[inline(always)]
	fn fist_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m32int`.
	#[inline(always)]
	fn fist_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m16int` and pop register stack.
	#[inline(always)]
	fn fistp_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m32int` and pop register stack.
	#[inline(always)]
	fn fistp_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m64int` and pop register stack.
	#[inline(always)]
	fn fistp_X87Integer64BitMemory(&mut self, arg0: X87Integer64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m16int` with truncation.
	#[inline(always)]
	fn fisttp_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m32int` with truncation.
	#[inline(always)]
	fn fisttp_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `ST(0)` in `m64int` with truncation.
	#[inline(always)]
	fn fisttp_X87Integer64BitMemory(&mut self, arg0: X87Integer64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `m16int` from `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fisub_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `m32int` from `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fisub_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `m16int` and store result in `ST(0)`.
	#[inline(always)]
	fn fisubr_X87Integer16BitMemory(&mut self, arg0: X87Integer16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `m32int` and store result in `ST(0)`.
	#[inline(always)]
	fn fisubr_X87Integer32BitMemory(&mut self, arg0: X87Integer32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m32fp` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fld_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m64fp` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fld_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `m80fp` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fld_X87Float80BitMemory(&mut self, arg0: X87Float80BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `ST(i)` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fld_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xD9, 0xC0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `+1.0` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fld1(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load Floating Point Unit (FPU) control word from `m2byte`.
	#[inline(always)]
	fn fldcw_Contiguous2ByteMemory(&mut self, arg0: Contiguous2ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load Floating Point Unit (FPU) environment from `m14byte` or `m28byte`.
	#[inline(always)]
	fn fldenv_Contiguous28ByteMemory(&mut self, arg0: Contiguous28ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `log2e` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldl2e(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xEA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `log210` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldl2t(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `log102` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldlg2(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xEC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `loge2` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldln2(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xED);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `pi` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldpi(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xEB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `+0.0` onto the Floating Point Unit (FPU) register stack.
	#[inline(always)]
	fn fldz(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xEE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(0)` by `m32fp` and store result in `ST(0)`.
	#[inline(always)]
	fn fmul_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(0)` by `m64fp` and store result in `ST(0)`.
	#[inline(always)]
	fn fmul_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(i)` by `ST(0)` and store result in `ST(i)`.
	#[inline(always)]
	fn fmul_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xC8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(0)` by `ST(i)` and store result in `ST(0)`.
	#[inline(always)]
	fn fmul_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xC8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(1)` by `ST(0)` with result stored in in `ST(1)`, and pop the register stack.
	#[inline(always)]
	fn fmulp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xC9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `ST(i)` by `ST(0)` with result stored in in `ST(i)`, and pop the register stack.
	#[inline(always)]
	fn fmulp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xC8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Clear floating-point exception flags without checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fnclex(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDB, 0xE2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Initialize Floating Point Unit (FPU) without checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fninit(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDB, 0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// No operation is performed.
	#[inline(always)]
	fn fnop(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xD0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) environment to `m94byte` or `m108byte` without checking for pending unmasked floating-point exceptions.
	///
	/// Then re-initialize the Floating Point Unit (FPU).
	#[inline(always)]
	fn fnsave_Contiguous108ByteMemory(&mut self, arg0: Contiguous108ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) control word to `m2byte` without checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fnstcw_Contiguous2ByteMemory(&mut self, arg0: Contiguous2ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) environment to `m14byte` or `m28byte` without checking for pending unmasked floating-point exceptions.
	///
	/// Then mask all floating-point exceptions.
	#[inline(always)]
	fn fnstenv_Contiguous28ByteMemory(&mut self, arg0: Contiguous28ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) status word in `AX` register without checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fnstsw_AX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDF, 0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) status word at `m2byte` without checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fnstsw_Contiguous2ByteMemory(&mut self, arg0: Contiguous2ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(1)` with `arctan(ST(1)/ST(0))` and pop the register stack.
	#[inline(always)]
	fn fpatan(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(0)` with the remainder obtained from dividing `ST(0)` by `ST(1)`.
	#[inline(always)]
	fn fprem(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(0)` with the IEEE remainder obtained from dividing `ST(0)` by `ST(1)`.
	#[inline(always)]
	fn fprem1(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(0)` with its tangent and push 1 onto the Floating Point Unit (FPU) stack.
	#[inline(always)]
	fn fptan(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Round `ST(0)` to an integer.
	#[inline(always)]
	fn frndint(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load Floating Point Unit (FPU) state from `m94byte` or `m108byte`.
	#[inline(always)]
	fn frstor_Contiguous108ByteMemory(&mut self, arg0: Contiguous108ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) state to `m94byte` or `m108byte` after checking for pending unmasked floating-point exceptions.
	///
	/// Then re-initialize the Floating Point Unit (FPU).
	#[inline(always)]
	fn fsave_Contiguous108ByteMemory(&mut self, arg0: Contiguous108ByteMemory)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Scale `ST(0)` by `ST(1)`.
	#[inline(always)]
	fn fscale(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(0)` with its sine.
	#[inline(always)]
	fn fsin(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the sine and cosine of `ST(0)`; replace `ST(0)` with the sine, and push the cosine onto the register stack.
	#[inline(always)]
	fn fsincos(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square root of `ST(0)` and stores the result in `ST(0)`.
	#[inline(always)]
	fn fsqrt(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xFA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `m32fp`.
	#[inline(always)]
	fn fst_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `m64fp`.
	#[inline(always)]
	fn fst_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `ST(i)`.
	#[inline(always)]
	fn fst_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xDD, 0xD0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) control word to `m2byte` after checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fstcw_Contiguous2ByteMemory(&mut self, arg0: Contiguous2ByteMemory)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) environment to `m14byte` or `m28byte` after checking for pending unmasked floating-point exceptions.
	///
	/// Then mask all floating-point exceptions.
	#[inline(always)]
	fn fstenv_Contiguous28ByteMemory(&mut self, arg0: Contiguous28ByteMemory)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `m32fp` and pop register stack.
	#[inline(always)]
	fn fstp_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `m64fp` and pop register stack.
	#[inline(always)]
	fn fstp_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `m80fp` and pop register stack.
	#[inline(always)]
	fn fstp_X87Float80BitMemory(&mut self, arg0: X87Float80BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Copy `ST(0)` to `ST(i)` and pop register stack.
	#[inline(always)]
	fn fstp_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xDD, 0xD8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) status word in `AX` register after checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fstsw_AX(&mut self)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDF, 0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store Floating Point Unit (FPU) status word at `m2byte` after checking for pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fstsw_Contiguous2ByteMemory(&mut self, arg0: Contiguous2ByteMemory)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `m32fp` from `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fsub_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `m64fp` from `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fsub_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `ST(i)` and store result in `ST(i)`.
	#[inline(always)]
	fn fsub_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xE0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(i)` from `ST(0)` and store result in `ST(0)`.
	#[inline(always)]
	fn fsub_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xE0, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `ST(1)` with result stored in in `ST(1)`, and pop register stack.
	#[inline(always)]
	fn fsubp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xE1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `ST(i)` with result stored in in `ST(i)`, and pop register stack.
	#[inline(always)]
	fn fsubp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xE0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `m32fp` and store result in `ST(0)`.
	#[inline(always)]
	fn fsubr_X87Float32BitMemory(&mut self, arg0: X87Float32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `m64fp` and store result in `ST(0)`.
	#[inline(always)]
	fn fsubr_X87Float64BitMemory(&mut self, arg0: X87Float64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(i)` from `ST(0)` and store result in `ST(i)`.
	#[inline(always)]
	fn fsubr_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDC, 0xE8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(0)` from `ST(i)` and store result in `ST(0)`.
	#[inline(always)]
	fn fsubr_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xD8, 0xE8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(1)` from `ST(0)` with result stored in in `ST(1)`, and pop register stack.
	#[inline(always)]
	fn fsubrp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDE, 0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `ST(i)` from `ST(0)` with result stored in in `ST(i)`, and pop register stack.
	#[inline(always)]
	fn fsubrp_X87Register_ST0(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDE, 0xE8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `0.0`.
	#[inline(always)]
	fn ftst(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)`.
	#[inline(always)]
	fn fucom(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDD, 0xE1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`.
	#[inline(always)]
	fn fucom_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xDD, 0xE0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`, check for ordered values, and set status flags accordingly.
	#[inline(always)]
	fn fucomi_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDB, 0xE8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)`, check for ordered values, set status flags accordingly, and pop register stack.
	#[inline(always)]
	fn fucomip_ST0_X87Register(&mut self, arg1: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0xDF, 0xE8, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)` and pop register stack.
	#[inline(always)]
	fn fucomp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDD, 0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(i)` and pop register stack.
	#[inline(always)]
	fn fucomp_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xDD, 0xE8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `ST(0)` with `ST(1)` and pop register stack twice.
	#[inline(always)]
	fn fucompp(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xDA, 0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Check pending unmasked floating-point exceptions.
	#[inline(always)]
	fn fwait(&mut self)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		// No Opcode Bytes	// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Classify value or number in `ST(0)`.
	#[inline(always)]
	fn fxam(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xE5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange the contents of `ST(0)` and `ST(1)`.
	#[inline(always)]
	fn fxch(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xC9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange the contents of `ST(0)` and `ST(i)`.
	#[inline(always)]
	fn fxch_X87Register(&mut self, arg0: X87Register)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_3(0xD9, 0xC8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore the x87 Floating Point Unit (FPU), `MMX`, `XMM`, and `MXCSR` register state from `m512byte`.
	#[inline(always)]
	fn fxrstor_Contiguous512ByteMemory(&mut self, arg0: Contiguous512ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore the x87 Floating Point Unit (FPU), `MMX`, `XMM`, and `MXCSR` register state from `m512byte`.
	#[inline(always)]
	fn fxrstor64_Contiguous512ByteMemory(&mut self, arg0: Contiguous512ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save the x87 Floating Point Unit (FPU), `MMX`, `XMM`, and `MXCSR` register state to `m512byte`.
	#[inline(always)]
	fn fxsave_Contiguous512ByteMemory(&mut self, arg0: Contiguous512ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save the x87 Floating Point Unit (FPU), `MMX`, `XMM`, and `MXCSR` register state to `m512byte`.
	#[inline(always)]
	fn fxsave64_Contiguous512ByteMemory(&mut self, arg0: Contiguous512ByteMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Separate value in `ST(0)` into exponent and significand, store exponent in `ST(0)`, and push the significand onto the register stack.
	#[inline(always)]
	fn fxtract(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(1)` with (`ST(1) * log2ST(0))` and pop the register stack.
	#[inline(always)]
	fn fyl2x(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Replace `ST(1)` with `ST(1) * log2(ST(0) + 1.0)` and pop the register stack.
	#[inline(always)]
	fn fyl2xp1(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xD9, 0xF9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal add packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn haddpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal add packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn haddpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal add packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn haddps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal add packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn haddps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal subtract packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn hsubpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal subtract packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn hsubpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal subtract packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn hsubps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Horizontal subtract packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn hsubps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `DX:AX` by `r/m16`, with result stored in `AX` (Quotient) and `DX` (Remainder).
	#[inline(always)]
	fn idiv_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `EDX:EAX` by `r/m32`, with result stored in `EAX` (Quotient) and `EDX` (Remainder).
	#[inline(always)]
	fn idiv_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `RDX:RAX` by `r/m64`, with result stored in `RAX` (Quotient) and `RDX` (Remainder).
	#[inline(always)]
	fn idiv_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn idiv_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `DX:AX` by `r/m16`, with result stored in `AX` (Quotient) and `DX` (Remainder).
	#[inline(always)]
	fn idiv_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `EDX:EAX` by `r/m32`, with result stored in `EAX` (Quotient) and `EDX` (Remainder).
	#[inline(always)]
	fn idiv_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `RDX:RAX` by `r/m64`, with result stored in `RAX` (Quotient) and `RDX` (Remainder).
	#[inline(always)]
	fn idiv_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn idiv_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `AX` by `r/m8`, with result stored in `AL` (Quotient) and `AH` (Remainder).
	#[inline(always)]
	fn idiv_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `DX:AX` = `AX` * `r/m16`.
	#[inline(always)]
	fn imul_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `EDX:EAX` = `EAX` * `r/m32`.
	#[inline(always)]
	fn imul_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RDX:RAX` = `RAX` * `r/m64`.
	#[inline(always)]
	fn imul_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `AX` = `AL` * `r/m8`.
	#[inline(always)]
	fn imul_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `DX:AX` = `AX` * `r/m16`.
	#[inline(always)]
	fn imul_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// word register = word register * `r/m16`.
	#[inline(always)]
	fn imul_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// word register = `r/m16` * immediate word.
	#[inline(always)]
	fn imul_Register16Bit_Any16BitMemory_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Any16BitMemory, arg2: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// word register = `r/m16` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register16Bit_Any16BitMemory_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Any16BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// word register = word register * `r/m16`.
	#[inline(always)]
	fn imul_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// word register = `r/m16` * immediate word.
	#[inline(always)]
	fn imul_Register16Bit_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit, arg2: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// word register = `r/m16` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register16Bit_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// `EDX:EAX` = `EAX` * `r/m32`.
	#[inline(always)]
	fn imul_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// doubleword register = doubleword register * `r/m32`.
	#[inline(always)]
	fn imul_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// doubleword register = `r/m32` * `imm32`.
	#[inline(always)]
	fn imul_Register32Bit_Any32BitMemory_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// doubleword register = `r/m32` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register32Bit_Any32BitMemory_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// doubleword register = doubleword register * `r/m32`.
	#[inline(always)]
	fn imul_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// doubleword register = `r/m32` * `imm32`.
	#[inline(always)]
	fn imul_Register32Bit_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// doubleword register = `r/m32` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register32Bit_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// `RDX:RAX` = `RAX` * `r/m64`.
	#[inline(always)]
	fn imul_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Quadword register = Quadword register * `r/m64`.
	#[inline(always)]
	fn imul_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Quadword register = `r/m64` * `imm32`.
	#[inline(always)]
	fn imul_Register64Bit_Any64BitMemory_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Quadword register = `r/m64` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register64Bit_Any64BitMemory_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Quadword register = Quadword register * `r/m64`.
	#[inline(always)]
	fn imul_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Quadword register = `r/m64` * `imm32`.
	#[inline(always)]
	fn imul_Register64Bit_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Quadword register = `r/m64` * sign-extended `imm8`.
	#[inline(always)]
	fn imul_Register64Bit_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// `AX` = `AL` * `r/m8`.
	#[inline(always)]
	fn imul_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `AX` = `AL` * `r/m8`.
	#[inline(always)]
	fn imul_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input byte from I/O port in `DX` into `AL`.
	#[inline(always)]
	fn in_AL_DX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input byte from `imm8` I/O port address into `AL`.
	#[inline(always)]
	fn in_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Input word from I/O port in `DX` into `AX`.
	#[inline(always)]
	fn in_AX_DX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xED);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input word from `imm8` I/O port address into `AX`.
	#[inline(always)]
	fn in_AX_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Input doubleword from I/O port in `DX` into `EAX`.
	#[inline(always)]
	fn in_EAX_DX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xED);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input dword from `imm8` I/O port address into `EAX`.
	#[inline(always)]
	fn in_EAX_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Increment `r/m16` by 1.
	#[inline(always)]
	fn inc_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m32` by 1.
	#[inline(always)]
	fn inc_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m64` by 1.
	#[inline(always)]
	fn inc_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m8` by 1.
	#[inline(always)]
	fn inc_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m16` by 1.
	#[inline(always)]
	fn inc_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m32` by 1.
	#[inline(always)]
	fn inc_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m64` by 1.
	#[inline(always)]
	fn inc_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m8` by 1.
	#[inline(always)]
	fn inc_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Increment `r/m8` by 1.
	#[inline(always)]
	fn inc_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input word from I/O port specified in `DX` into memory location specified in `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn ins_Any16BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input doubleword from I/O port specified in `DX` into memory location specified in `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn ins_Any32BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input byte from I/O port specified in `DX` into memory location specified in `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn ins_Any8BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input byte from I/O port specified in `DX` into memory location specified with `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn insb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input doubleword from I/O port specified in `DX` into memory location specified in `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn insd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm2/m32` into `xmm1` at the specified destination element specified by `imm8` and zero out destination elements in `xmm1` as indicated in `imm8`.
	#[inline(always)]
	fn insertps_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x21);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm2/m32` into `xmm1` at the specified destination element specified by `imm8` and zero out destination elements in `xmm1` as indicated in `imm8`.
	#[inline(always)]
	fn insertps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x21);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Input word from I/O port specified in `DX` into memory location specified in `ES:(E)DI` or `RDI`.
	#[inline(always)]
	fn insw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interrupt vector number specified by `imm8`.
	#[inline(always)]
	fn int_Immediate8Bit(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Interrupt 3-trap to debugger.
	#[inline(always)]
	fn int_Three(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Invalidates entries in the TLBs and paging-structure caches based on invalidation type in `r64` and descriptor in `m128`.
	#[inline(always)]
	fn invpcid_Register64Bit_Any128BitMemory(&mut self, arg0: Register64Bit, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x82);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interrupt return (16-bit operand size).
	#[inline(always)]
	fn iret(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interrupt return (32-bit operand size).
	#[inline(always)]
	fn iretd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interrupt return (64-bit operand size).
	#[inline(always)]
	fn iretq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xCF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump short if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn ja_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jae_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jb_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jbe_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jc_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn je_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if `ECX` register is 0.
	#[inline(always)]
	fn jecxz_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump short if `ECX` register is 0.
	#[inline(always)]
	fn jecxz_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump short if `ECX` register is 0.
	#[inline(always)]
	fn jecxz_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if `ECX` register is 0.
	#[inline(always)]
	fn jecxz_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jg_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jge_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jl_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jle_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump far, absolute indirect, address given in `m16:16`.
	#[inline(always)]
	fn jmp_FarPointer16BitTo16Bit(&mut self, arg0: FarPointer16BitTo16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump far, absolute indirect, address given in m16:32.
	#[inline(always)]
	fn jmp_FarPointer16BitTo32Bit(&mut self, arg0: FarPointer16BitTo32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump far, absolute indirect, address given in m16:64.
	#[inline(always)]
	fn jmp_FarPointer16BitTo64Bit(&mut self, arg0: FarPointer16BitTo64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xFF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump short, `RIP` = `RIP` + 8-bit displacement sign extended to 64-bits.
	#[inline(always)]
	fn jmp_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near, relative, `RIP` = `RIP` + 32-bit displacement sign extended to 64-bits.
	#[inline(always)]
	fn jmp_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near, absolute indirect, `RIP` = 64-Bit offset from register or memory.
	#[inline(always)]
	fn jmp_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump near, absolute indirect, `RIP` = 64-Bit offset from register or memory.
	#[inline(always)]
	fn jmp_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Jump near, relative, `RIP` = `RIP` + 32-bit displacement sign extended to 64-bits.
	#[inline(always)]
	fn jmp_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short, `RIP` = `RIP` + 8-bit displacement sign extended to 64-bits.
	#[inline(always)]
	fn jmp_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x86);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jna_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x76);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x82);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn jnae_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x72);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnb_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x87);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnbe_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x83);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn jnc_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x73);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jne_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jng_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn jnge_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnl_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn jnle_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x71);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x81);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x71);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x81);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x81);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x81);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x71);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn jno_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x71);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jnp_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x79);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x89);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x79);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x89);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x89);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x89);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x79);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn jns_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x79);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x85);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn jnz_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x75);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x70);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x80);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x70);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x80);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x80);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x80);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x70);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn jo_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x70);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jp_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn jpe_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x8B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn jpo_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x7B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if `RCX` register is 0.
	#[inline(always)]
	fn jrcxz_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump short if `RCX` register is 0.
	#[inline(always)]
	fn jrcxz_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump short if `RCX` register is 0.
	#[inline(always)]
	fn jrcxz_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if `RCX` register is 0.
	#[inline(always)]
	fn jrcxz_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x78);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x88);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x78);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x88);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x88);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x88);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x78);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn js_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x78);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_Label_REX_W(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump short if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_Label_BranchHint(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_Label_BranchHint_REX_W(&mut self, arg0: Label, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump near if 0 (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_RelativeAddress32Bit_BranchHint(&mut self, arg0: RelativeAddress32Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x84);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Jump short if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn jz_RelativeAddress8Bit_BranchHint(&mut self, arg0: RelativeAddress8Bit, arg1: BranchHint)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x74);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Load: `AH = EFLAGS(SF:ZF:0:AF:0:PF:1:CF)`.
	#[inline(always)]
	fn lahf(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r16` = access rights referenced by `r16/m16`.
	#[inline(always)]
	fn lar_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r16` = access rights referenced by `r16/m16`.
	#[inline(always)]
	fn lar_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `reg` = access rights referenced by `r32/m16`.
	#[inline(always)]
	fn lar_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `reg` = access rights referenced by `r32/m16`.
	#[inline(always)]
	fn lar_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `reg` = access rights referenced by `r32/m16`.
	#[inline(always)]
	fn lar_Register64Bit_Any16BitMemory(&mut self, arg0: Register64Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `reg` = access rights referenced by `r32/m16`.
	#[inline(always)]
	fn lar_Register64Bit_Register32Bit(&mut self, arg0: Register64Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load unaligned data from mem and return double quadword in `xmm1`.
	#[inline(always)]
	fn lddqu_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `MXCSR` register from `m32`.
	#[inline(always)]
	fn ldmxcsr_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m16` in register `r16`.
	#[inline(always)]
	fn lea_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m32` in register `r16`.
	#[inline(always)]
	fn lea_Register16Bit_Any32BitMemory(&mut self, arg0: Register16Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m64` in register `r16`.
	#[inline(always)]
	fn lea_Register16Bit_Any64BitMemory(&mut self, arg0: Register16Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m16` in register `r32`.
	#[inline(always)]
	fn lea_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m32` in register `r32`.
	#[inline(always)]
	fn lea_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m64` in register `r32`.
	#[inline(always)]
	fn lea_Register32Bit_Any64BitMemory(&mut self, arg0: Register32Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m16` in register `r64`.
	#[inline(always)]
	fn lea_Register64Bit_Any16BitMemory(&mut self, arg0: Register64Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m32` in register `r64`.
	#[inline(always)]
	fn lea_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store effective address for `m64` in register `r64`.
	#[inline(always)]
	fn lea_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set `RSP` to `RBP`, then pop `RBP`.
	#[inline(always)]
	fn leave(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set `SP` to `BP`, then pop `BP`.
	#[inline(always)]
	fn leave_Prefix66(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Serializes load operations.
	#[inline(always)]
	fn lfence(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0xAE, 0xE8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `FS:r16` with far pointer from memory.
	#[inline(always)]
	fn lfs_Register16Bit_FarPointer16BitTo16Bit(&mut self, arg0: Register16Bit, arg1: FarPointer16BitTo16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `FS:r32` with far pointer from memory.
	#[inline(always)]
	fn lfs_Register32Bit_FarPointer16BitTo32Bit(&mut self, arg0: Register32Bit, arg1: FarPointer16BitTo32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `FS:r64` with far pointer from memory.
	#[inline(always)]
	fn lfs_Register64Bit_FarPointer16BitTo64Bit(&mut self, arg0: Register64Bit, arg1: FarPointer16BitTo64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `GS:r16` with far pointer from memory.
	#[inline(always)]
	fn lgs_Register16Bit_FarPointer16BitTo16Bit(&mut self, arg0: Register16Bit, arg1: FarPointer16BitTo16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `GS:r32` with far pointer from memory.
	#[inline(always)]
	fn lgs_Register32Bit_FarPointer16BitTo32Bit(&mut self, arg0: Register32Bit, arg1: FarPointer16BitTo32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `GS:r64` with far pointer from memory.
	#[inline(always)]
	fn lgs_Register64Bit_FarPointer16BitTo64Bit(&mut self, arg0: Register64Bit, arg1: FarPointer16BitTo64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Asserts `LOCK#` signal for duration of the accompanying instruction.
	#[inline(always)]
	fn lock(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xF0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load word at address `DS:(E)SI` into `AX`.
	///
	/// For 64-bit mode load word at address `(R)SI` into `AX`.
	#[inline(always)]
	fn lods_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load dword at address `DS:(E)SI` into `EAX`.
	///
	/// For 64-bit mode load dword at address `(R)SI` into `EAX`.
	#[inline(always)]
	fn lods_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load qword at address `(R)SI` into `RAX`.
	#[inline(always)]
	fn lods_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load byte at address `DS:(E)SI` into `AL`.
	///
	/// For 64-bit mode load byte at address `(R)SI` into `AL`.
	#[inline(always)]
	fn lods_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load byte at address `DS:(E)SI` into `AL`.
	///
	/// For 64-bit mode load byte at address `(R)SI` into `AL`.
	#[inline(always)]
	fn lodsb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load dword at address `DS:(E)SI` into `EAX`.
	///
	/// For 64-bit mode load dword at address `(R)SI` into `EAX`.
	#[inline(always)]
	fn lodsd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load qword at address `(R)SI` into `RAX`.
	#[inline(always)]
	fn lodsq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode load word at address `DS:(E)SI` into `AX`.
	///
	/// For 64-bit mode load word at address `(R)SI` into `AX`.
	#[inline(always)]
	fn lodsw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Decrement count; jump short if count != 0.
	#[inline(always)]
	fn loop_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Decrement count; jump short if count != 0.
	#[inline(always)]
	fn loop_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Decrement count; jump short if count != 0 and Zero Flag (ZF) is 1.
	#[inline(always)]
	fn loope_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Decrement count; jump short if count != 0 and Zero Flag (ZF) is 1.
	#[inline(always)]
	fn loope_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Decrement count; jump short if count != 0 and Zero Flag (ZF) is 0.
	#[inline(always)]
	fn loopne_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_8bit(arg0);
	}

	/// Decrement count; jump short if count != 0 and Zero Flag (ZF) is 0.
	#[inline(always)]
	fn loopne_RelativeAddress8Bit(&mut self, arg0: RelativeAddress8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Load: `r16` = segment limit, selector `r16/m16`.
	#[inline(always)]
	fn lsl_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load: `r16` = segment limit, selector `r16/m16`.
	#[inline(always)]
	fn lsl_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load: `r32` = segment limit, selector `r32/m16`.
	#[inline(always)]
	fn lsl_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load: `r32` = segment limit, selector `r32/m16`.
	#[inline(always)]
	fn lsl_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load: `r64` = segment limit, selector `r32/m16`.
	#[inline(always)]
	fn lsl_Register64Bit_Any16BitMemory(&mut self, arg0: Register64Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load: `r64` = segment limit, selector `r32/m16`.
	#[inline(always)]
	fn lsl_Register64Bit_Register32Bit(&mut self, arg0: Register64Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `SS:r16` with far pointer from memory.
	#[inline(always)]
	fn lss_Register16Bit_FarPointer16BitTo16Bit(&mut self, arg0: Register16Bit, arg1: FarPointer16BitTo16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `SS:r32` with far pointer from memory.
	#[inline(always)]
	fn lss_Register32Bit_FarPointer16BitTo32Bit(&mut self, arg0: Register32Bit, arg1: FarPointer16BitTo32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `SS:r64` with far pointer from memory.
	#[inline(always)]
	fn lss_Register64Bit_FarPointer16BitTo64Bit(&mut self, arg0: Register64Bit, arg1: FarPointer16BitTo64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m16` and return result in `r16`.
	#[inline(always)]
	fn lzcnt_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m16` and return result in `r16`.
	#[inline(always)]
	fn lzcnt_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m32` and return result in `r32`.
	#[inline(always)]
	fn lzcnt_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m32` and return result in `r32`.
	#[inline(always)]
	fn lzcnt_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m64` and return result in `r64`.
	#[inline(always)]
	fn lzcnt_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of leading zero bits in `r/m64` and return result in `r64`.
	#[inline(always)]
	fn lzcnt_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Selectively write bytes from `xmm1` to memory location using the byte mask in `xmm2`.
	///
	/// The default memory location is specified by `DS:DI`, `EDI` or `RDI`.
	#[inline(always)]
	fn maskmovdqu_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Selectively write bytes from `mm1` to memory location using the byte mask in mm2.
	///
	/// The default memory location is specified by `DS:DI`, `EDI` or `RDI`.
	#[inline(always)]
	fn maskmovq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum double-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn maxpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum double-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn maxpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum single-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn maxps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum single-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn maxps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum scalar double-precision floating-point value between `xmm2/mem64` and `xmm1`.
	#[inline(always)]
	fn maxsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum scalar double-precision floating-point value between `xmm2/mem64` and `xmm1`.
	#[inline(always)]
	fn maxsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum scalar single-precision floating-point value between `xmm2/mem32` and `xmm1`.
	#[inline(always)]
	fn maxss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the maximum scalar single-precision floating-point value between `xmm2/mem32` and `xmm1`.
	#[inline(always)]
	fn maxss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Serializes load and store operations.
	#[inline(always)]
	fn mfence(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0xAE, 0xF0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum double-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn minpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum double-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn minpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum single-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn minps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum single-precision floating-point values between `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn minps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum scalar double-precision floating-point value between `xmm2/mem64` and `xmm1`.
	#[inline(always)]
	fn minsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum scalar double-precision floating-point value between `xmm2/mem64` and `xmm1`.
	#[inline(always)]
	fn minsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum scalar single-precision floating-point value between `xmm2/mem32` and `xmm1`.
	#[inline(always)]
	fn minss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return the minimum scalar single-precision floating-point value between `xmm2/mem32` and `xmm1`.
	#[inline(always)]
	fn minss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sets up a linear address range to be monitored by hardware and activates the monitor.
	///
	/// The address range should be a write-back memory caching type.
	///
	/// The address is `DS:EAX` (`DS:RAX` in 64-bit mode).
	#[inline(always)]
	fn monitor(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xC8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move byte at `seg:offset` to `AL`.
	#[inline(always)]
	fn mov_AL_MemoryOffset8Bit(&mut self, arg1: MemoryOffset8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move byte at `offset` to `AL`.
	#[inline(always)]
	fn mov_AL_MemoryOffset8Bit_PrefixRexW(&mut self, arg1: MemoryOffset8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move word at `seg:offset` to `AX`.
	#[inline(always)]
	fn mov_AX_MemoryOffset16Bit(&mut self, arg1: MemoryOffset16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move doubleword at `seg:offset` to `EAX`.
	#[inline(always)]
	fn mov_EAX_MemoryOffset32Bit(&mut self, arg1: MemoryOffset32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm16` to `r/m16`.
	#[inline(always)]
	fn mov_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r16` to `r/m16`.
	#[inline(always)]
	fn mov_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move segment register to `r/m16`.
	#[inline(always)]
	fn mov_Any16BitMemory_SegmentRegister(&mut self, arg0: Any16BitMemory, arg1: SegmentRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm32` to `r/m32`.
	#[inline(always)]
	fn mov_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r32` to `r/m32`.
	#[inline(always)]
	fn mov_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm32` sign extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn mov_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r64` to `r/m64`.
	#[inline(always)]
	fn mov_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move zero extended 16-bit segment register to `r/m64`.
	#[inline(always)]
	fn mov_Any64BitMemory_SegmentRegister(&mut self, arg0: Any64BitMemory, arg1: SegmentRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm8` to `r/m8`.
	#[inline(always)]
	fn mov_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `AX` to `seg:offset`.
	#[inline(always)]
	fn mov_MemoryOffset16Bit_AX(&mut self, arg0: MemoryOffset16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Move `EAX` to `seg:offset`.
	#[inline(always)]
	fn mov_MemoryOffset32Bit_EAX(&mut self, arg0: MemoryOffset32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Move `RAX` to `offset`.
	#[inline(always)]
	fn mov_MemoryOffset64Bit_RAX(&mut self, arg0: MemoryOffset64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Move `AL` to `seg:offset`.
	#[inline(always)]
	fn mov_MemoryOffset8Bit_AL(&mut self, arg0: MemoryOffset8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Move `AL` to `offset`.
	#[inline(always)]
	fn mov_MemoryOffset8Bit_AL_PrefixRexW(&mut self, arg0: MemoryOffset8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Move `imm16` to `r16`.
	#[inline(always)]
	fn mov_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0xB8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm16` to `r/m16`.
	#[inline(always)]
	fn mov_Register16Bit_Immediate16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r/m16` to `r16`.
	#[inline(always)]
	fn mov_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r16` to `r/m16`.
	#[inline(always)]
	fn mov_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r16`.
	#[inline(always)]
	fn mov_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move segment register to `r/m16`.
	#[inline(always)]
	fn mov_Register16Bit_SegmentRegister(&mut self, arg0: Register16Bit, arg1: SegmentRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm32` to `r32`.
	#[inline(always)]
	fn mov_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0xB8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm32` to `r/m32`.
	#[inline(always)]
	fn mov_Register32Bit_Immediate32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r/m32` to `r32`.
	#[inline(always)]
	fn mov_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r32` to `r/m32`.
	#[inline(always)]
	fn mov_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m32` to `r32`.
	#[inline(always)]
	fn mov_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm32` sign extended to 64-bits to `r/m64`.
	#[inline(always)]
	fn mov_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm64` to `r64`.
	#[inline(always)]
	fn mov_Register64Bit_Immediate64Bit(&mut self, arg0: Register64Bit, arg1: Immediate64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0xB8, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r/m64` to `r64`.
	#[inline(always)]
	fn mov_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r64` to `r/m64`.
	#[inline(always)]
	fn mov_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x89);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m64` to `r64`.
	#[inline(always)]
	fn mov_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move zero extended 16-bit segment register to `r/m64`.
	#[inline(always)]
	fn mov_Register64Bit_SegmentRegister(&mut self, arg0: Register64Bit, arg1: SegmentRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `imm8` to `r8`.
	#[inline(always)]
	fn mov_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0xB0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm8` to `r/m8`.
	#[inline(always)]
	fn mov_Register8Bit_Immediate8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword at `offset` to `RAX`.
	#[inline(always)]
	fn mov_RAX_MemoryOffset64Bit(&mut self, arg1: MemoryOffset64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm8` to `r8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0xB0, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `imm8` to `r/m8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_Immediate8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r/m8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x88);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r8`.
	#[inline(always)]
	fn mov_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to segment register.
	#[inline(always)]
	fn mov_SegmentRegister_Any16BitMemory(&mut self, arg0: SegmentRegister, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move lower 16 bits of `r/m64` to segment register.
	#[inline(always)]
	fn mov_SegmentRegister_Any64BitMemory(&mut self, arg0: SegmentRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to segment register.
	#[inline(always)]
	fn mov_SegmentRegister_Register16Bit(&mut self, arg0: SegmentRegister, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move lower 16 bits of `r/m64` to segment register.
	#[inline(always)]
	fn mov_SegmentRegister_Register64Bit(&mut self, arg0: SegmentRegister, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movapd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movapd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movapd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movapd_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movaps_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movaps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movaps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movaps_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `r16` and move to `m16`.
	#[inline(always)]
	fn movbe_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `r32` and move to `m32`.
	#[inline(always)]
	fn movbe_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `r64` and move to `m64`.
	#[inline(always)]
	fn movbe_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `m16` and move to `r16`.
	#[inline(always)]
	fn movbe_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `m32` and move to `r32`.
	#[inline(always)]
	fn movbe_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse byte order in `m64` and move to `r64`.
	#[inline(always)]
	fn movbe_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_3(0x0F, 0x38, 0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `mm` to `r/m32`.
	#[inline(always)]
	fn movd_Any32BitMemory_MMRegister(&mut self, arg0: Any32BitMemory, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `xmm` register to `r/m32`.
	#[inline(always)]
	fn movd_Any32BitMemory_XMMRegister(&mut self, arg0: Any32BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `r/m32` to `mm`.
	#[inline(always)]
	fn movd_MMRegister_Any32BitMemory(&mut self, arg0: MMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `r/m32` to `mm`.
	#[inline(always)]
	fn movd_MMRegister_Register32Bit(&mut self, arg0: MMRegister, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `mm` to `r/m32`.
	#[inline(always)]
	fn movd_Register32Bit_MMRegister(&mut self, arg0: Register32Bit, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `xmm` register to `r/m32`.
	#[inline(always)]
	fn movd_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `r/m32` to `xmm`.
	#[inline(always)]
	fn movd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `r/m32` to `xmm`.
	#[inline(always)]
	fn movd_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move one double-precision floating-point value from the lower 64-bit operand in `xmm2/m64` to `xmm1` and duplicate.
	#[inline(always)]
	fn movddup_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move one double-precision floating-point value from the lower 64-bit operand in `xmm2/m64` to `xmm1` and duplicate.
	#[inline(always)]
	fn movddup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move low quadword from `xmm` to `mm`.
	#[inline(always)]
	fn movdq2q_MMRegister_XMMRegister(&mut self, arg0: MMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move aligned double quadword from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movdqa_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move aligned double quadword from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movdqa_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move aligned double quadword from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movdqa_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move aligned double quadword from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movdqa_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move unaligned double quadword from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movdqu_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move unaligned double quadword from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movdqu_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move unaligned double quadword from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movdqu_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move unaligned double quadword from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movdqu_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from high quadword of `xmm2` to low quadword of `xmm1`.
	#[inline(always)]
	fn movhlps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double-precision floating-point value from high quadword of `xmm` to `m64`.
	#[inline(always)]
	fn movhpd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x17);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double-precision floating-point value from `m64` to high quadword of `xmm`.
	#[inline(always)]
	fn movhpd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from high quadword of `xmm` to `m64`.
	#[inline(always)]
	fn movhps_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x17);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from `m64` to high quadword of `xmm`.
	#[inline(always)]
	fn movhps_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from low quadword of `xmm2` to high quadword of `xmm1`.
	#[inline(always)]
	fn movlhps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double-precision floating-point nvalue from low quadword of `xmm` register to `m64`.
	#[inline(always)]
	fn movlpd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x13);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double-precision floating-point value from `m64` to low quadword of `xmm` register.
	#[inline(always)]
	fn movlpd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from low quadword of `xmm` to `m64`.
	#[inline(always)]
	fn movlps_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x13);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two packed single-precision floating-point values from `m64` to low quadword of `xmm`.
	#[inline(always)]
	fn movlps_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract 2-bit sign mask from `xmm` and store in `r32`.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn movmskpd_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract 2-bit sign mask from `xmm` and store in `r64`.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn movmskpd_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract 4-bit sign mask from `xmm` and store in `r32`.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn movmskps_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract 4-bit sign mask from `xmm` and store in `r64`.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn movmskps_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double quadword from `xmm` to `m128` using non-temporal hint.
	#[inline(always)]
	fn movntdq_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xE7);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move double quadword from `m128` to `xmm` using non-temporal hint if Write Commit (WC) memory type.
	#[inline(always)]
	fn movntdqa_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move doubleword from `r32` to `m32` using non-temporal hint.
	#[inline(always)]
	fn movnti_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `r64` to `m64` using non-temporal hint.
	#[inline(always)]
	fn movnti_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xC3);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm` to `m128` using non-temporal hint.
	#[inline(always)]
	fn movntpd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm` to `m128` using non-temporal hint.
	#[inline(always)]
	fn movntps_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm` to `m64` using non-temporal hint.
	#[inline(always)]
	fn movntq_Any64BitMemory_MMRegister(&mut self, arg0: Any64BitMemory, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xE7);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm` to `r/m64`.
	#[inline(always)]
	fn movq_Any64BitMemory_MMRegister(&mut self, arg0: Any64BitMemory, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm` to `mm/m64`.
	#[inline(always)]
	fn movq_Any64BitMemory_MMRegister_REX_W(&mut self, arg0: Any64BitMemory, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm` register to `r/m64`.
	#[inline(always)]
	fn movq_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm1` to `xmm2/mem64`.
	#[inline(always)]
	fn movq_Any64BitMemory_XMMRegister_REX_W(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xD6);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `r/m64` to `mm`.
	#[inline(always)]
	fn movq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm/m64` to `mm`.
	#[inline(always)]
	fn movq_MMRegister_Any64BitMemory_REX_W(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm/m64` to `mm`.
	#[inline(always)]
	fn movq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm` to `mm/m64`.
	#[inline(always)]
	fn movq_MMRegister_MMRegister_REX_W(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `r/m64` to `mm`.
	#[inline(always)]
	fn movq_MMRegister_Register64Bit(&mut self, arg0: MMRegister, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `mm` to `r/m64`.
	#[inline(always)]
	fn movq_Register64Bit_MMRegister(&mut self, arg0: Register64Bit, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm` register to `r/m64`.
	#[inline(always)]
	fn movq_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `r/m64` to `xmm`.
	#[inline(always)]
	fn movq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm2/mem64` to `xmm1`.
	#[inline(always)]
	fn movq_XMMRegister_Any64BitMemory_REX_W(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `r/m64` to `xmm`.
	#[inline(always)]
	fn movq_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm2/mem64` to `xmm1`.
	#[inline(always)]
	fn movq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x7E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from `xmm1` to `xmm2/mem64`.
	#[inline(always)]
	fn movq_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xD6);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move quadword from mmx to low quadword of `xmm`.
	#[inline(always)]
	fn movq2dq_XMMRegister_MMRegister(&mut self, arg0: XMMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, move word from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move word at address (R
	///E)SI to `(R
	///E)DI`.
	#[inline(always)]
	fn movs_Any16BitMemory_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, move dword from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move dword from address (R
	///E)SI to `(R
	///E)DI`.
	#[inline(always)]
	fn movs_Any32BitMemory_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move qword from address (R
	///E)SI to `(R
	///E)DI`.
	#[inline(always)]
	fn movs_Any64BitMemory_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, Move byte from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move byte from address `(R
	///E)SI` to `(R
	///E)DI`.
	#[inline(always)]
	fn movs_Any8BitMemory_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, Move byte from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move byte from address `(R
	///E)SI` to `(R
	///E)DI`.
	#[inline(always)]
	fn movsb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, move dword from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move dword from address `(R
	///E)SI` to `(R
	///E)DI`.
	#[inline(always)]
	fn movsd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar double-precision floating-point value from `xmm1` register to `xmm2/m64`.
	#[inline(always)]
	fn movsd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar double-precision floating-point value from `xmm2/m64` to `xmm1`.
	#[inline(always)]
	fn movsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar double-precision floating-point value from `xmm2/m64` to `xmm1`.
	#[inline(always)]
	fn movsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar double-precision floating-point value from `xmm1` register to `xmm2/m64`.
	#[inline(always)]
	fn movsd_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two single-precision floating-point values from the higher 32-bit operand of each qword in `xmm2/m128` to `xmm1` and duplicate each 32-bit operand to the lower 32-bits of each qword.
	#[inline(always)]
	fn movshdup_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two single-precision floating-point values from the higher 32-bit operand of each qword in `xmm2/m128` to `xmm1` and duplicate each 32-bit operand to the lower 32-bits of each qword.
	#[inline(always)]
	fn movshdup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two single-precision floating-point values from the lower 32-bit operand of each qword in `xmm2/m128` to `xmm1` and duplicate each 32-bit operand to the higher 32-bits of each qword.
	#[inline(always)]
	fn movsldup_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move two single-precision floating-point values from the lower 32-bit operand of each qword in `xmm2/m128` to `xmm1` and duplicate each 32-bit operand to the higher 32-bits of each qword.
	#[inline(always)]
	fn movsldup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move qword from address `(R
	///E)SI` to `(R
	///E)DI`.
	#[inline(always)]
	fn movsq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar single-precision floating-point value from `xmm1` register to `xmm2/m32`.
	#[inline(always)]
	fn movss_Any32BitMemory_XMMRegister(&mut self, arg0: Any32BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar single-precision floating-point value from `xmm2/m32` to `xmm1`.
	#[inline(always)]
	fn movss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar single-precision floating-point value from `xmm2/m32` to `xmm1`.
	#[inline(always)]
	fn movss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move scalar single-precision floating-point value from `xmm1` register to `xmm2/m32`.
	#[inline(always)]
	fn movss_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, move word from address `DS:(E)SI` to `ES:(E)DI`.
	///
	/// For 64-bit mode move word at address `(R
	///E)SI` to `(R
	///E)DI`.
	#[inline(always)]
	fn movsw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r16` with sign-extension.
	#[inline(always)]
	fn movsx_Register16Bit_Any8BitMemory(&mut self, arg0: Register16Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r16` with sign-extension.
	#[inline(always)]
	fn movsx_Register16Bit_Register8Bit(&mut self, arg0: Register16Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r16` with sign-extension.
	#[inline(always)]
	fn movsx_Register16Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register16Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r32`, with sign-extension.
	#[inline(always)]
	fn movsx_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r32` with sign-extension.
	#[inline(always)]
	fn movsx_Register32Bit_Any8BitMemory(&mut self, arg0: Register32Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r16` to `r32`, with sign-extension.
	#[inline(always)]
	fn movsx_Register32Bit_Register16Bit(&mut self, arg0: Register32Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r32` with sign-extension.
	#[inline(always)]
	fn movsx_Register32Bit_Register8Bit(&mut self, arg0: Register32Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r32` with sign-extension.
	#[inline(always)]
	fn movsx_Register32Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register32Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r64` with sign-extension.
	#[inline(always)]
	fn movsx_Register64Bit_Any16BitMemory(&mut self, arg0: Register64Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r64` with sign-extension.
	#[inline(always)]
	fn movsx_Register64Bit_Any8BitMemory(&mut self, arg0: Register64Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r16` to `r64` with sign-extension.
	#[inline(always)]
	fn movsx_Register64Bit_Register16Bit(&mut self, arg0: Register64Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r8` to `r64` with sign-extension.
	#[inline(always)]
	fn movsx_Register64Bit_Register8Bit(&mut self, arg0: Register64Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m32` to `r64` with sign-extension.
	#[inline(always)]
	fn movsxd_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r32` to `r64` with sign-extension.
	#[inline(always)]
	fn movsxd_Register64Bit_Register32Bit(&mut self, arg0: Register64Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movupd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movupd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movupd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed double-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movupd_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movups_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movups_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn movups_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move packed single-precision floating-point values from `xmm1` to `xmm2/m128`.
	#[inline(always)]
	fn movups_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r16` with zero-extension.
	#[inline(always)]
	fn movzx_Register16Bit_Any8BitMemory(&mut self, arg0: Register16Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r16` with zero-extension.
	#[inline(always)]
	fn movzx_Register16Bit_Register8Bit(&mut self, arg0: Register16Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r16` with zero-extension.
	#[inline(always)]
	fn movzx_Register16Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register16Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r32` with zero-extension.
	#[inline(always)]
	fn movzx_Register32Bit_Any16BitMemory(&mut self, arg0: Register32Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r32` with zero-extension.
	#[inline(always)]
	fn movzx_Register32Bit_Any8BitMemory(&mut self, arg0: Register32Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r32` with zero-extension.
	#[inline(always)]
	fn movzx_Register32Bit_Register16Bit(&mut self, arg0: Register32Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r32` with zero-extension.
	#[inline(always)]
	fn movzx_Register32Bit_Register8Bit(&mut self, arg0: Register32Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r32` with zero-extension.
	#[inline(always)]
	fn movzx_Register32Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register32Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r64` with zero-extension.
	#[inline(always)]
	fn movzx_Register64Bit_Any16BitMemory(&mut self, arg0: Register64Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r64` with zero-extension.
	#[inline(always)]
	fn movzx_Register64Bit_Any8BitMemory(&mut self, arg0: Register64Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m16` to `r64` with zero-extension.
	#[inline(always)]
	fn movzx_Register64Bit_Register16Bit(&mut self, arg0: Register64Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `r/m8` to `r64` with zero-extension.
	#[inline(always)]
	fn movzx_Register64Bit_Register8Bit(&mut self, arg0: Register64Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm1` and `xmm2/m128` and writes the results in `xmm1`.
	///
	/// Starting offsets within `xmm1` and `xmm2/m128` are determined by `imm8`.
	#[inline(always)]
	fn mpsadbw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x42);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm1` and `xmm2/m128` and writes the results in `xmm1`.
	///
	/// Starting offsets within `xmm1` and `xmm2/m128` are determined by `imm8`.
	#[inline(always)]
	fn mpsadbw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x42);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Unsigned multiply (`DX:AX` = `AX` * `r/m16`).
	#[inline(always)]
	fn mul_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`EDX:EAX` = `EAX` * `r/m32`).
	#[inline(always)]
	fn mul_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`RDX:RAX` = `RAX` * `r/m64`.
	#[inline(always)]
	fn mul_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`AX` = `AL` * `r/m8`).
	#[inline(always)]
	fn mul_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`DX:AX` = `AX` * `r/m16`).
	#[inline(always)]
	fn mul_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`EDX:EAX` = `EAX` * `r/m32`).
	#[inline(always)]
	fn mul_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`RDX:RAX` = `RAX` * `r/m64`.
	#[inline(always)]
	fn mul_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`AX` = `AL` * `r/m8`).
	#[inline(always)]
	fn mul_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply (`AX` = `AL` * `r/m8`).
	#[inline(always)]
	fn mul_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed double-precision floating-point values in `xmm2/m128` by `xmm1`.
	#[inline(always)]
	fn mulpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed double-precision floating-point values in `xmm2/m128` by `xmm1`.
	#[inline(always)]
	fn mulpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed single-precision floating-point values in `xmm2/mem` by `xmm1`.
	#[inline(always)]
	fn mulps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed single-precision floating-point values in `xmm2/mem` by `xmm1`.
	#[inline(always)]
	fn mulps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the low double-precision floating-point value in `xmm2/mem64` by low double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn mulsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the low double-precision floating-point value in `xmm2/mem64` by low double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn mulsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the low single-precision floating-point value in `xmm2/mem` by the low single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn mulss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the low single-precision floating-point value in `xmm2/mem` by the low single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn mulss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned multiply of `r/m32` with `EDX` without affecting arithmetic flags.
	#[inline(always)]
	fn mulx_Register32Bit_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unsigned multiply of `r/m32` with `EDX` without affecting arithmetic flags.
	#[inline(always)]
	fn mulx_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unsigned multiply of `r/m64` with `RDX` without affecting arithmetic flags.
	#[inline(always)]
	fn mulx_Register64Bit_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unsigned multiply of `r/m64` with `RDX` without affecting arithmetic flags.
	#[inline(always)]
	fn mulx_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// A hint that allow the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.
	#[inline(always)]
	fn mwait(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xC9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m16`.
	#[inline(always)]
	fn neg_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m32`.
	#[inline(always)]
	fn neg_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m64`.
	#[inline(always)]
	fn neg_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m8`.
	#[inline(always)]
	fn neg_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m16`.
	#[inline(always)]
	fn neg_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m32`.
	#[inline(always)]
	fn neg_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m64`.
	#[inline(always)]
	fn neg_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m8`.
	#[inline(always)]
	fn neg_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Two's complement negate `r/m8`.
	#[inline(always)]
	fn neg_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// One byte no-operation instruction.
	#[inline(always)]
	fn nop(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x90);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multi-byte no-operation instruction.
	#[inline(always)]
	fn nop_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x1F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multi-byte no-operation instruction.
	#[inline(always)]
	fn nop_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x1F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multi-byte no-operation instruction.
	#[inline(always)]
	fn nop_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x1F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multi-byte no-operation instruction.
	#[inline(always)]
	fn nop_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x1F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m16`.
	#[inline(always)]
	fn not_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m32`.
	#[inline(always)]
	fn not_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m64`.
	#[inline(always)]
	fn not_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m8`.
	#[inline(always)]
	fn not_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m16`.
	#[inline(always)]
	fn not_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m32`.
	#[inline(always)]
	fn not_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m64`.
	#[inline(always)]
	fn not_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m8`.
	#[inline(always)]
	fn not_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reverse each bit of `r/m8`.
	#[inline(always)]
	fn not_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `AL` OR `imm8`.
	#[inline(always)]
	fn or_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x0C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `AX` OR `imm16`.
	#[inline(always)]
	fn or_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x0D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `EAX` OR `imm32`.
	#[inline(always)]
	fn or_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x0D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` OR `imm16`.
	#[inline(always)]
	fn or_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` OR `r16`.
	#[inline(always)]
	fn or_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` OR `imm32`.
	#[inline(always)]
	fn or_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` OR `r32`.
	#[inline(always)]
	fn or_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` OR `imm32` (sign-extended).
	#[inline(always)]
	fn or_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` OR `r64`.
	#[inline(always)]
	fn or_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `imm8`.
	#[inline(always)]
	fn or_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16` OR `imm16`.
	#[inline(always)]
	fn or_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r16` OR `r/m16`.
	#[inline(always)]
	fn or_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16` OR `r16`.
	#[inline(always)]
	fn or_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r16` OR `r/m16`.
	#[inline(always)]
	fn or_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` OR `imm32`.
	#[inline(always)]
	fn or_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r32` OR `r/m32`.
	#[inline(always)]
	fn or_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` OR `r32`.
	#[inline(always)]
	fn or_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r32` OR `r/m32`.
	#[inline(always)]
	fn or_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` OR `imm32` (sign-extended).
	#[inline(always)]
	fn or_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` OR `imm8` (sign-extended).
	#[inline(always)]
	fn or_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r64` OR `r/m64`.
	#[inline(always)]
	fn or_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` OR `r64`.
	#[inline(always)]
	fn or_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r64` OR `r/m64`.
	#[inline(always)]
	fn or_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `imm8`.
	#[inline(always)]
	fn or_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RAX` OR `imm32` (sign-extended).
	#[inline(always)]
	fn or_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x0D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8` OR `imm8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` OR `r8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` OR `r/m8`.
	#[inline(always)]
	fn or_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn orpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x56);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn orpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x56);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn orps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x56);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn orps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x56);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output byte in `AL` to I/O port address in `DX`.
	#[inline(always)]
	fn out_DX_AL(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output word in `AX` to I/O port address in `DX`.
	#[inline(always)]
	fn out_DX_AX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output doubleword in `EAX` to I/O port address in `DX`.
	#[inline(always)]
	fn out_DX_EAX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xEF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output byte in `AL` to I/O port address `imm8`.
	#[inline(always)]
	fn out_Immediate8Bit_AL(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Output word in `AX` to I/O port address `imm8`.
	#[inline(always)]
	fn out_Immediate8Bit_AX(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Output doubleword in `EAX` to I/O port address `imm8`.
	#[inline(always)]
	fn out_Immediate8Bit_EAX(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xE7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Output word from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outs_DX_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output doubleword from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outs_DX_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output byte from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outs_DX_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output byte from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outsb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output doubleword from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outsd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output word from memory location specified in `DS:(E)SI` or `RSI` to I/O port specified in `DX`.
	#[inline(always)]
	fn outsw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of bytes in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of bytes in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of bytes in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of bytes in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 32-bit integers in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 32-bit integers in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 32-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 32-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 16-bit integers in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 16-bit integers in `mm2/m64` and store *unsigned* result in `mm1`.
	#[inline(always)]
	fn pabsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 16-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compute the absolute value of 16-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn pabsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 2 packed signed doubleword integers from `mm1` and from `mm2/m64` into 4 packed signed word integers in `mm1` using signed saturation.
	#[inline(always)]
	fn packssdw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 2 packed signed doubleword integers from `mm1` and from `mm2/m64` into 4 packed signed word integers in `mm1` using signed saturation.
	#[inline(always)]
	fn packssdw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 packed signed doubleword integers from `xmm1` and from `xmm2/m128` into 8 packed signed word integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn packssdw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 packed signed doubleword integers from `xmm1` and from `xmm2/m128` into 8 packed signed word integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn packssdw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 packed signed word integers from `mm1` and from `mm2/m64` into 8 packed signed byte integers in `mm1` using signed saturation.
	#[inline(always)]
	fn packsswb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 packed signed word integers from `mm1` and from `mm2/m64` into 8 packed signed byte integers in `mm1` using signed saturation.
	#[inline(always)]
	fn packsswb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 8 packed signed word integers from `xmm1` and from `xmm2/m128` into 16 packed signed byte integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn packsswb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 8 packed signed word integers from `xmm1` and from `xmm2/m128` into 16 packed signed byte integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn packsswb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x63);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert 4 packed signed doubleword integers from `xmm1` and 4 packed signed doubleword integers from `xmm2/m128` into 8 packed unsigned word integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn packusdw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Convert 4 packed signed doubleword integers from `xmm1` and 4 packed signed doubleword integers from `xmm2/m128` into 8 packed unsigned word integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn packusdw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 signed word integers from `mm` and 4 signed word integers from `mm/m64` into 8 unsigned byte integers in `mm` using unsigned saturation.
	#[inline(always)]
	fn packuswb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x67);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 4 signed word integers from `mm` and 4 signed word integers from `mm/m64` into 8 unsigned byte integers in `mm` using unsigned saturation.
	#[inline(always)]
	fn packuswb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x67);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 8 signed word integers from `xmm1` and 8 signed word integers from `xmm2/m128` into 16 unsigned byte integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn packuswb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x67);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Converts 8 signed word integers from `xmm1` and 8 signed word integers from `xmm2/m128` into 16 unsigned byte integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn packuswb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x67);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed byte integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed byte integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed byte integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed byte integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed doubleword integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed doubleword integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed doubleword integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed doubleword integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add quadword integer `mm2/m64` to `mm1`.
	#[inline(always)]
	fn paddq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add quadword integer `mm2/m64` to `mm1`.
	#[inline(always)]
	fn paddq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed quadword integers `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn paddq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed quadword integers `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn paddq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed byte integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddsb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed byte integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddsb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed byte integers from `xmm2/m128` and `xmm1` saturate the results.
	#[inline(always)]
	fn paddsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed byte integers from `xmm2/m128` and `xmm1` saturate the results.
	#[inline(always)]
	fn paddsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed word integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xED);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed word integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xED);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed word integers from `xmm2/m128` and `xmm1` and saturate the results.
	#[inline(always)]
	fn paddsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xED);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed signed word integers from `xmm2/m128` and `xmm1` and saturate the results.
	#[inline(always)]
	fn paddsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xED);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned byte integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddusb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned byte integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddusb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned byte integers from `xmm2/m128` and `xmm1` saturate the results.
	#[inline(always)]
	fn paddusb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned byte integers from `xmm2/m128` and `xmm1` saturate the results.
	#[inline(always)]
	fn paddusb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned word integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddusw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned word integers from `mm/m64` and `mm` and saturate the results.
	#[inline(always)]
	fn paddusw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned word integers from `xmm2/m128` to `xmm1` and saturate the results.
	#[inline(always)]
	fn paddusw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed unsigned word integers from `xmm2/m128` to `xmm1` and saturate the results.
	#[inline(always)]
	fn paddusw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed word integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed word integers from `mm/m64` and `mm`.
	#[inline(always)]
	fn paddw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed word integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed word integers from `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn paddw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFD);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in `imm8` into `mm1`.
	#[inline(always)]
	fn palignr_MMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0F);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in `imm8` into `mm1`.
	#[inline(always)]
	fn palignr_MMRegister_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: MMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0F);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in `imm8` into `xmm1`.
	#[inline(always)]
	fn palignr_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0F);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in `imm8` into `xmm1`.
	#[inline(always)]
	fn palignr_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0F);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Bitwise AND `mm/m64` and `mm`.
	#[inline(always)]
	fn pand_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND `mm/m64` and `mm`.
	#[inline(always)]
	fn pand_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pand_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pand_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND NOT of `mm/m64` and `mm`.
	#[inline(always)]
	fn pandn_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND NOT of `mm/m64` and `mm`.
	#[inline(always)]
	fn pandn_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pandn_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise AND NOT of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pandn_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Gives hint to processor that improves performance of spin-wait loops.
	#[inline(always)]
	fn pause(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x90);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned byte integers from `mm2/m64` and `mm1` with rounding.
	#[inline(always)]
	fn pavgb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned byte integers from `mm2/m64` and `mm1` with rounding.
	#[inline(always)]
	fn pavgb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned byte integers from `xmm2/m128` and `xmm1` with rounding.
	#[inline(always)]
	fn pavgb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned byte integers from `xmm2/m128` and `xmm1` with rounding.
	#[inline(always)]
	fn pavgb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned word integers from `mm2/m64` and `mm1` with rounding.
	#[inline(always)]
	fn pavgw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned word integers from `mm2/m64` and `mm1` with rounding.
	#[inline(always)]
	fn pavgw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned word integers from `xmm2/m128` and `xmm1` with rounding.
	#[inline(always)]
	fn pavgw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Average packed unsigned word integers from `xmm2/m128` and `xmm1` with rounding.
	#[inline(always)]
	fn pavgw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select byte values from `xmm1` and `xmm2/m128` from mask specified in the high bit of each byte in `XMM0` and store the values into `xmm1`.
	#[inline(always)]
	fn pblendvb_XMMRegister_Any128BitMemory_XMMRegister0(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select byte values from `xmm1` and `xmm2/m128` from mask specified in the high bit of each byte in `XMM0` and store the values into `xmm1`.
	#[inline(always)]
	fn pblendvb_XMMRegister_XMMRegister_XMMRegister0(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Select words from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn pblendw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0E);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Select words from `xmm1` and `xmm2/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn pblendw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0E);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Carry-less multiplication of one quadword of `xmm1` by one quadword of `xmm2/m128`, stores the 128-bit result in `xmm1`.
	///
	/// The immediate is used to determine which quadwords of `xmm1` and `xmm2/m128` should be used.
	#[inline(always)]
	fn pclmulqdq_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x44);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Carry-less multiplication of one quadword of `xmm1` by one quadword of `xmm2/m128`, stores the 128-bit result in `xmm1`.
	///
	/// The immediate is used to determine which quadwords of `xmm1` and `xmm2/m128` should be used.
	#[inline(always)]
	fn pclmulqdq_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x44);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare packed bytes in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x74);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed bytes in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x74);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed bytes in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x74);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed bytes in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x74);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed doublewords in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x76);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed doublewords in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x76);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed doublewords in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x76);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed doublewords in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x76);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed qwords in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x29);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed qwords in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x29);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed words in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x75);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed words in `mm/m64` and `mm` for equality.
	#[inline(always)]
	fn pcmpeqw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x75);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed words in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x75);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed words in `xmm2/m128` and `xmm1` for equality.
	#[inline(always)]
	fn pcmpeqw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x75);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn pcmpestri_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x61);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn pcmpestri_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x61);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn pcmpestrm_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x60);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn pcmpestrm_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x60);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Compare packed signed byte integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x64);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x64);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x64);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x64);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed doubleword integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x66);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed doubleword integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x66);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed doubleword integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x66);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed doubleword integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x66);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed qwords in `xmm2/m128` and `xmm1` for greater than.
	#[inline(always)]
	fn pcmpgtq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x37);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed qwords in `xmm2/m128` and `xmm1` for greater than.
	#[inline(always)]
	fn pcmpgtq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x37);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed word integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x65);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed word integers in `mm` and `mm/m64` for greater than.
	#[inline(always)]
	fn pcmpgtw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x65);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed word integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x65);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed word integers in `xmm1` and `xmm2/m128` for greater than.
	#[inline(always)]
	fn pcmpgtw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x65);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn pcmpistri_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x63);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn pcmpistri_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x63);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn pcmpistrm_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x62);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn pcmpistrm_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x62);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Parallel deposit of bits from `r32b` using mask in `r/m32`, result is written to `r32a`.
	#[inline(always)]
	fn pdep_Register32Bit_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel deposit of bits from `r32b` using mask in `r/m32`, result is written to `r32a`.
	#[inline(always)]
	fn pdep_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel deposit of bits from `r64b` using mask in `r/m64`, result is written to `r64a`.
	#[inline(always)]
	fn pdep_Register64Bit_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel deposit of bits from `r64b` using mask in `r/m64`, result is written to `r64a`.
	#[inline(always)]
	fn pdep_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel extract of bits from `r32b` using mask in `r/m32`, result is written to `r32a`.
	#[inline(always)]
	fn pext_Register32Bit_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel extract of bits from `r32b` using mask in `r/m32`, result is written to `r32a`.
	#[inline(always)]
	fn pext_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel extract of bits from `r64b` using mask in `r/m64`, result is written to `r64a`.
	#[inline(always)]
	fn pext_Register64Bit_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x2, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Parallel extract of bits from `r64b` using mask in `r/m64`, result is written to `r64a`.
	#[inline(always)]
	fn pext_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x2, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `rreg` or `m8`.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pextrb_Any8BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `rreg` or `m8`.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pextrb_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `rreg` or `m8`.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pextrb_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a dword integer value from `xmm2` at the source dword offset specified by `imm8` into `r/m32`.
	#[inline(always)]
	fn pextrd_Any32BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a dword integer value from `xmm2` at the source dword offset specified by `imm8` into `r/m32`.
	#[inline(always)]
	fn pextrd_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a qword integer value from `xmm2` at the source qword offset specified by `imm8` into `r/m64`.
	#[inline(always)]
	fn pextrq_Any64BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_3(0x0F, 0x3A, 0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract a qword integer value from `xmm2` at the source qword offset specified by `imm8` into `r/m64`.
	#[inline(always)]
	fn pextrq_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_3(0x0F, 0x3A, 0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract the word specified by `imm8` from `xmm` and copy it to lowest 16 bits of `reg` or `m16`.
	///
	/// Zero-extend the result in the destination, `r32` or `r64`.
	#[inline(always)]
	fn pextrw_Any16BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract the word specified by `imm8` from `mm` and move it to `reg`, bits 15-0.
	///
	/// The upper bits of `r32` or `r64` is zeroed.
	#[inline(always)]
	fn pextrw_Register32Bit_MMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: MMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract the word specified by `imm8` from `xmm` and move it to `reg`, bits 15-0.
	///
	/// The upper bits of `r32` or `r64` is zeroed.
	#[inline(always)]
	fn pextrw_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	fn pextrw_Register32Bit_XMMRegister_Immediate8Bit_REX_W(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract the word specified by `imm8` from `mm` and move it to `reg`, bits 15-0.
	///
	/// The upper bits of `r32` or `r64` is zeroed.
	#[inline(always)]
	fn pextrw_Register64Bit_MMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: MMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Extract the word specified by `imm8` from `xmm` and move it to `reg`, bits 15-0.
	///
	/// The upper bits of `r32` or `r64` is zeroed.
	#[inline(always)]
	fn pextrw_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	fn pextrw_Register64Bit_XMMRegister_Immediate8Bit_REX_W(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Add 32-bit integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phaddd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 32-bit integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phaddd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 32-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phaddd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 32-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phaddd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x02);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `mm1`.
	#[inline(always)]
	fn phaddsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `mm1`.
	#[inline(always)]
	fn phaddsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn phaddsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn phaddsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x03);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phaddw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x01);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phaddw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x01);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phaddw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x01);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add 16-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phaddw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x01);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find the minimum unsigned word in `xmm2/m128` and place its value in the low word of `xmm1` and its index in the second-lowest word of `xmm1`.
	#[inline(always)]
	fn phminposuw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find the minimum unsigned word in `xmm2/m128` and place its value in the low word of `xmm1` and its index in the second-lowest word of `xmm1`.
	#[inline(always)]
	fn phminposuw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phsubd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x06);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phsubd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x06);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phsubd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x06);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phsubd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x06);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `mm1`.
	#[inline(always)]
	fn phsubsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x07);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `mm1`.
	#[inline(always)]
	fn phsubsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x07);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn phsubsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x07);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn phsubsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x07);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phsubw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x05);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `mm1`.
	#[inline(always)]
	fn phsubw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x05);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `XMM1`.
	#[inline(always)]
	fn phsubw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x05);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn phsubw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x05);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Insert a byte integer value from `r32`/m8 into `xmm1` at the destination element in `xmm1` specified by `imm8`.
	#[inline(always)]
	fn pinsrb_XMMRegister_Any8BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any8BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x20);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert a byte integer value from `r32`/m8 into `xmm1` at the destination element in `xmm1` specified by `imm8`.
	#[inline(always)]
	fn pinsrb_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x20);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert a dword integer value from `r/m32` into the `xmm1` at the destination element specified by `imm8`.
	#[inline(always)]
	fn pinsrd_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x22);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert a dword integer value from `r/m32` into the `xmm1` at the destination element specified by `imm8`.
	#[inline(always)]
	fn pinsrd_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x22);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert the low word from `r32` or from `m16` into `mm` at the word position specified by `imm8`.
	#[inline(always)]
	fn pinsrw_MMRegister_Any16BitMemory_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Any16BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC4);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Insert the low word from `r32` or from `m16` into `mm` at the word position specified by `imm8`.
	#[inline(always)]
	fn pinsrw_MMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC4);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Move the low word of `r32` or from `m16` into `xmm` at the word position specified by `imm8`.
	#[inline(always)]
	fn pinsrw_XMMRegister_Any16BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any16BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC4);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Move the low word of `r32` or from `m16` into `xmm` at the word position specified by `imm8`.
	#[inline(always)]
	fn pinsrw_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC4);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `mm1`.
	#[inline(always)]
	fn pmaddubsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x04);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `mm1`.
	#[inline(always)]
	fn pmaddubsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x04);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `xmm1`.
	#[inline(always)]
	fn pmaddubsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x04);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `xmm1`.
	#[inline(always)]
	fn pmaddubsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x04);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed words in `mm` by the packed words in mm/m64, add adjacent doubleword results, and store in `mm`.
	#[inline(always)]
	fn pmaddwd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed words in `mm` by the packed words in mm/m64, add adjacent doubleword results, and store in `mm`.
	#[inline(always)]
	fn pmaddwd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed word integers in `xmm1` by the packed word integers in `xmm2/m128`, add adjacent doubleword results, and store in `xmm1`.
	#[inline(always)]
	fn pmaddwd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed word integers in `xmm1` by the packed word integers in `xmm2/m128`, add adjacent doubleword results, and store in `xmm1`.
	#[inline(always)]
	fn pmaddwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed dword integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxsd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed dword integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `mm2/m64` and `mm1` and return maximum values.
	#[inline(always)]
	fn pmaxsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `mm2/m64` and `mm1` and return maximum values.
	#[inline(always)]
	fn pmaxsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `xmm2/m128` and `xmm1` and return maximum values.
	#[inline(always)]
	fn pmaxsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `xmm2/m128` and `xmm1` and return maximum values.
	#[inline(always)]
	fn pmaxsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `mm2/m64` and `mm1` and returns maximum values.
	#[inline(always)]
	fn pmaxub_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `mm2/m64` and `mm1` and returns maximum values.
	#[inline(always)]
	fn pmaxub_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `xmm2/m128` and `xmm1` and returns maximum values.
	#[inline(always)]
	fn pmaxub_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `xmm2/m128` and `xmm1` and returns maximum values.
	#[inline(always)]
	fn pmaxub_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDE);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned dword integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxud_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned dword integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxud_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned word integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxuw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned word integers in `xmm1` and `xmm2/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn pmaxuw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x38);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed byte integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x38);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed dword integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminsd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x39);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed signed dword integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x39);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `mm2/m64` and `mm1` and return minimum values.
	#[inline(always)]
	fn pminsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `mm2/m64` and `mm1` and return minimum values.
	#[inline(always)]
	fn pminsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `xmm2/m128` and `xmm1` and return minimum values.
	#[inline(always)]
	fn pminsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare signed word integers in `xmm2/m128` and `xmm1` and return minimum values.
	#[inline(always)]
	fn pminsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `mm2/m64` and `mm1` and returns minimum values.
	#[inline(always)]
	fn pminub_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `mm2/m64` and `mm1` and returns minimum values.
	#[inline(always)]
	fn pminub_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `xmm2/m128` and `xmm1` and returns minimum values.
	#[inline(always)]
	fn pminub_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare unsigned byte integers in `xmm2/m128` and `xmm1` and returns minimum values.
	#[inline(always)]
	fn pminub_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xDA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned dword integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminud_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned dword integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminud_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned word integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminuw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare packed unsigned word integers in `xmm1` and `xmm2/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn pminuw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x3A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move a byte mask of `mm` to register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pmovmskb_Register32Bit_MMRegister(&mut self, arg0: Register32Bit, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move a byte mask of `xmm` to register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pmovmskb_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move a byte mask of `mm` to register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pmovmskb_Register64Bit_MMRegister(&mut self, arg0: Register64Bit, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move a byte mask of `xmm` to register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn pmovmskb_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 4 packed signed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed signed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 4 packed signed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed signed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbq_XMMRegister_Any16BitMemory(&mut self, arg0: XMMRegister, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 8 packed signed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed signed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbw_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 8 packed signed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed signed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxdq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 4 packed signed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed signed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxwd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 4 packed signed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed signed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxwq_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Sign extend 2 packed signed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed signed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovsxwq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbq_XMMRegister_Any16BitMemory(&mut self, arg0: XMMRegister, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbw_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxdq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxwd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxwq_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Zero extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn pmovzxwq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed dword integers in `xmm1` and `xmm2/m128` and store the quadword product in `xmm1`.
	#[inline(always)]
	fn pmuldq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed dword integers in `xmm1` and `xmm2/m128` and store the quadword product in `xmm1`.
	#[inline(always)]
	fn pmuldq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `mm1`.
	#[inline(always)]
	fn pmulhrsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `mm1`.
	#[inline(always)]
	fn pmulhrsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `xmm1`.
	#[inline(always)]
	fn pmulhrsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `xmm1`.
	#[inline(always)]
	fn pmulhrsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed unsigned word integers in `mm1` register and mm2/m64, and store the high 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmulhuw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed unsigned word integers in `mm1` register and mm2/m64, and store the high 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmulhuw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed unsigned word integers in `xmm1` and `xmm2/m128`, and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmulhuw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed unsigned word integers in `xmm1` and `xmm2/m128`, and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmulhuw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `mm1` register and mm2/m64, and store the high 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmulhw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `mm1` register and mm2/m64, and store the high 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmulhw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `xmm1` and `xmm2/m128`, and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmulhw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `xmm1` and `xmm2/m128`, and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmulhw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed dword signed integers in `xmm1` and `xmm2/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn pmulld_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed dword signed integers in `xmm1` and `xmm2/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn pmulld_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x40);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `mm1` register and mm2/m64, and store the low 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmullw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `mm1` register and mm2/m64, and store the low 16 bits of the results in `mm1`.
	#[inline(always)]
	fn pmullw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `xmm1` and `xmm2/m128`, and store the low 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmullw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply the packed signed word integers in `xmm1` and `xmm2/m128`, and store the low 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn pmullw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD5);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply unsigned doubleword integer in `mm1` by unsigned doubleword integer in mm2/m64, and store the quadword result in `mm1`.
	#[inline(always)]
	fn pmuludq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply unsigned doubleword integer in `mm1` by unsigned doubleword integer in mm2/m64, and store the quadword result in `mm1`.
	#[inline(always)]
	fn pmuludq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed unsigned doubleword integers in `xmm1` by packed unsigned doubleword integers in `xmm2/m128`, and store the quadword results in `xmm1`.
	#[inline(always)]
	fn pmuludq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply packed unsigned doubleword integers in `xmm1` by packed unsigned doubleword integers in `xmm2/m128`, and store the quadword results in `xmm1`.
	#[inline(always)]
	fn pmuludq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF4);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `FS` and increment stack pointer by 64 bits.
	#[inline(always)]
	fn pop_FS(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `FS` and increment stack pointer by 16 bits.
	#[inline(always)]
	fn pop_FS_Prefix66(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `GS` and increment stack pointer by 64 bits.
	#[inline(always)]
	fn pop_GS(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `GS` and increment stack pointer by 16 bits.
	#[inline(always)]
	fn pop_GS_Prefix66(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `m16` and increment stack pointer.
	#[inline(always)]
	fn pop_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x8F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `m64` and increment stack pointer.
	///
	/// Cannot encode 32-bit operand size.
	#[inline(always)]
	fn pop_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x8F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `m16` and increment stack pointer.
	#[inline(always)]
	fn pop_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x8F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `r16` and increment stack pointer.
	#[inline(always)]
	fn pop_Register16Bit_REX_W(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x58, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `m64` and increment stack pointer.
	///
	/// Cannot encode 32-bit operand size.
	#[inline(always)]
	fn pop_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x8F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into `r64` and increment stack pointer.
	///
	/// Cannot encode 32-bit operand size.
	#[inline(always)]
	fn pop_Register64Bit_REX_W(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x58, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m16`.
	#[inline(always)]
	fn popcnt_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m16`.
	#[inline(always)]
	fn popcnt_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m32`.
	#[inline(always)]
	fn popcnt_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m32`.
	#[inline(always)]
	fn popcnt_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m64`.
	#[inline(always)]
	fn popcnt_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// POPCNT on `r/m64`.
	#[inline(always)]
	fn popcnt_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xB8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack into lower 16 bits of `EFLAGS`.
	#[inline(always)]
	fn popf(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Pop top of stack and zero-extend into `RFLAGS`.
	#[inline(always)]
	fn popfq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `mm/m64` and `mm`.
	#[inline(always)]
	fn por_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `mm/m64` and `mm`.
	#[inline(always)]
	fn por_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn por_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn por_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move data from `m8` closer to the processor using `NTA` hint.
	#[inline(always)]
	fn prefetchnta_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x18);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move data from `m8` closer to the processor using `T0` hint.
	#[inline(always)]
	fn prefetcht0_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x18);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move data from `m8` closer to the processor using `T1` hint.
	#[inline(always)]
	fn prefetcht1_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x18);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move data from `m8` closer to the processor using `T2` hint.
	#[inline(always)]
	fn prefetcht2_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x18);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `mm2/m64` and `mm1`; differences are then summed to produce an unsigned word integer result.
	#[inline(always)]
	fn psadbw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `mm2/m64` and `mm1`; differences are then summed to produce an unsigned word integer result.
	#[inline(always)]
	fn psadbw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `xmm2/m128` and `xmm1`; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
	#[inline(always)]
	fn psadbw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `xmm2/m128` and `xmm1`; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
	#[inline(always)]
	fn psadbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shuffle bytes in `mm1` according to contents of `mm2/m64`.
	#[inline(always)]
	fn pshufb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x00);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shuffle bytes in `mm1` according to contents of `mm2/m64`.
	#[inline(always)]
	fn pshufb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x00);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shuffle bytes in `xmm1` according to contents of `xmm2/m128`.
	#[inline(always)]
	fn pshufb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x00);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shuffle bytes in `xmm1` according to contents of `xmm2/m128`.
	#[inline(always)]
	fn pshufb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x00);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shuffle the doublewords in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshufd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the doublewords in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshufd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the high words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshufhw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the high words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshufhw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the low words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshuflw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the low words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn pshuflw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the words in `mm2/m64` based on the encoding in `imm8` and store the result in `mm1`.
	#[inline(always)]
	fn pshufw_MMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle the words in `mm2/m64` based on the encoding in `imm8` and store the result in `mm1`.
	#[inline(always)]
	fn pshufw_MMRegister_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: MMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Negate/zero/preserve packed byte integers in `mm1` depending on the corresponding sign in `mm2/m64`.
	#[inline(always)]
	fn psignb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x08);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed byte integers in `mm1` depending on the corresponding sign in `mm2/m64`.
	#[inline(always)]
	fn psignb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x08);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed byte integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x08);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed byte integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x08);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed doubleword integers in `mm1` depending on the corresponding sign in `mm2/m128`.
	#[inline(always)]
	fn psignd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed doubleword integers in `mm1` depending on the corresponding sign in `mm2/m128`.
	#[inline(always)]
	fn psignd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed doubleword integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed doubleword integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed word integers in `mm1` depending on the corresponding sign in `mm2/m128`.
	#[inline(always)]
	fn psignw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x09);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed word integers in `mm1` depending on the corresponding sign in `mm2/m128`.
	#[inline(always)]
	fn psignw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x09);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed word integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x09);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Negate/zero/preserve packed word integers in `xmm1` depending on the corresponding sign in `xmm2/m128`.
	#[inline(always)]
	fn psignw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x09);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doublewords in `mm` left by `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` left by `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn pslld_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `xmm1` left by `imm8` bytes while shifting in zero-signed.
	#[inline(always)]
	fn pslldq_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift quadword in `mm` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift quadword in `mm` left by `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift quadword in `mm` left by `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psllq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `mm` left `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` left `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` left by `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psllw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn psrad_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by `mm/m64` while shifting in sign bits.
	#[inline(always)]
	fn psrad_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by `mm/m64` while shifting in sign bits.
	#[inline(always)]
	fn psrad_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn psrad_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doubleword in `xmm1` right by `xmm2/m128` while shifting in sign bits.
	#[inline(always)]
	fn psrad_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doubleword in `xmm1` right by `xmm2/m128` while shifting in sign bits.
	#[inline(always)]
	fn psrad_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn psraw_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `mm` right by `mm/m64` while shifting in sign bits.
	#[inline(always)]
	fn psraw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` right by `mm/m64` while shifting in sign bits.
	#[inline(always)]
	fn psraw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn psraw_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `xmm1` right by `xmm2/m128` while shifting in sign bits.
	#[inline(always)]
	fn psraw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` right by `xmm2/m128` while shifting in sign bits.
	#[inline(always)]
	fn psraw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x72);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift doublewords in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrld_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD2);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `xmm1` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrldq_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift `mm` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x73);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift quadwords in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrlq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD3);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_MMRegister_Immediate8Bit(&mut self, arg0: MMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `mm` right by amount specified in `mm/m64` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x71);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Shift words in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift words in `xmm1` right by amount specified in `xmm2/m128` while shifting in zero-signed.
	#[inline(always)]
	fn psrlw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD1);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed byte integers in `mm/m64` from packed byte integers in `mm`.
	#[inline(always)]
	fn psubb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed byte integers in `mm/m64` from packed byte integers in `mm`.
	#[inline(always)]
	fn psubb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed byte integers in `xmm2/m128` from packed byte integers in `xmm1`.
	#[inline(always)]
	fn psubb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed byte integers in `xmm2/m128` from packed byte integers in `xmm1`.
	#[inline(always)]
	fn psubb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed doubleword integers in `mm/m64` from packed doubleword integers in `mm`.
	#[inline(always)]
	fn psubd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed doubleword integers in `mm/m64` from packed doubleword integers in `mm`.
	#[inline(always)]
	fn psubd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed doubleword integers in `xmm2/mem`128 from packed doubleword integers in `xmm1`.
	#[inline(always)]
	fn psubd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed doubleword integers in `xmm2/mem`128 from packed doubleword integers in `xmm1`.
	#[inline(always)]
	fn psubd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFA);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract quadword integer in `mm1` from `mm2/m64`.
	#[inline(always)]
	fn psubq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract quadword integer in `mm1` from `mm2/m64`.
	#[inline(always)]
	fn psubq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed quadword integers in `xmm1` from `xmm2/m128`.
	#[inline(always)]
	fn psubq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed quadword integers in `xmm1` from `xmm2/m128`.
	#[inline(always)]
	fn psubq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xFB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract signed packed bytes in `mm/m64` from signed packed bytes in `mm` and saturate results.
	#[inline(always)]
	fn psubsb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract signed packed bytes in `mm/m64` from signed packed bytes in `mm` and saturate results.
	#[inline(always)]
	fn psubsb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed signed byte integers in `xmm2/m128` from packed signed byte integers in `xmm1` and saturate results.
	#[inline(always)]
	fn psubsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed signed byte integers in `xmm2/m128` from packed signed byte integers in `xmm1` and saturate results.
	#[inline(always)]
	fn psubsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract signed packed words in `mm/m64` from signed packed words in `mm` and saturate results.
	#[inline(always)]
	fn psubsw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract signed packed words in `mm/m64` from signed packed words in `mm` and saturate results.
	#[inline(always)]
	fn psubsw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed signed word integers in `xmm2/m128` from packed signed word integers in `xmm1` and saturate results.
	#[inline(always)]
	fn psubsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed signed word integers in `xmm2/m128` from packed signed word integers in `xmm1` and saturate results.
	#[inline(always)]
	fn psubsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xE9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract unsigned packed bytes in `mm/m64` from unsigned packed bytes in `mm` and saturate result.
	#[inline(always)]
	fn psubusb_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract unsigned packed bytes in `mm/m64` from unsigned packed bytes in `mm` and saturate result.
	#[inline(always)]
	fn psubusb_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed unsigned byte integers in `xmm2/m128` from packed unsigned byte integers in `xmm1` and saturate result.
	#[inline(always)]
	fn psubusb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed unsigned byte integers in `xmm2/m128` from packed unsigned byte integers in `xmm1` and saturate result.
	#[inline(always)]
	fn psubusb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD8);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract unsigned packed words in `mm/m64` from unsigned packed words in `mm` and saturate result.
	#[inline(always)]
	fn psubusw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract unsigned packed words in `mm/m64` from unsigned packed words in `mm` and saturate result.
	#[inline(always)]
	fn psubusw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed unsigned word integers in `xmm2/m128` from packed unsigned word integers in `xmm1` and saturate result.
	#[inline(always)]
	fn psubusw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed unsigned word integers in `xmm2/m128` from packed unsigned word integers in `xmm1` and saturate result.
	#[inline(always)]
	fn psubusw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xD9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed word integers in `mm/m64` from packed word integers in `mm`.
	#[inline(always)]
	fn psubw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed word integers in `mm/m64` from packed word integers in `mm`.
	#[inline(always)]
	fn psubw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed word integers in `xmm2/m128` from packed word integers in `xmm1`.
	#[inline(always)]
	fn psubw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed word integers in `xmm2/m128` from packed word integers in `xmm1`.
	#[inline(always)]
	fn psubw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xF9);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Zero Flag (ZF) if `xmm2/m128 && xmm1` result is all zero-signed.
	///
	/// Set Carry Flag (CF) if `xmm2/m128` AND NOT `xmm1` result is all zero-signed.
	#[inline(always)]
	fn ptest_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Zero Flag (ZF) if `xmm2/m128 && xmm1` result is all zero-signed.
	///
	/// Set Carry Flag (CF) if `xmm2/m128` AND NOT `xmm1` result is all zero-signed.
	#[inline(always)]
	fn ptest_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x38, 0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order bytes from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhbw_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x68);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order bytes from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhbw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x68);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order bytes from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhbw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x68);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order bytes from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x68);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order doublewords from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhdq_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order doublewords from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhdq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order doublewords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhdq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order doublewords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order quadwords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhqdq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order quadwords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhqdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order words from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhwd_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x69);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order words from `mm` and `mm/m64` into `mm`.
	#[inline(always)]
	fn punpckhwd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x69);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order words from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhwd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x69);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpack and interleave high-order words from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckhwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x69);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order bytes from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpcklbw_MMRegister_Any32BitMemory(&mut self, arg0: MMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x60);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order bytes from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpcklbw_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x60);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order bytes from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklbw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x60);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order bytes from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x60);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order doublewords from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpckldq_MMRegister_Any32BitMemory(&mut self, arg0: MMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x62);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order doublewords from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpckldq_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x62);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order doublewords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckldq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x62);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order doublewords from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpckldq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x62);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order quadword from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklqdq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order quadword from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklqdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x6C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order words from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpcklwd_MMRegister_Any32BitMemory(&mut self, arg0: MMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x61);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order words from `mm` and mm/m32 into `mm`.
	#[inline(always)]
	fn punpcklwd_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x61);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order words from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklwd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x61);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Interleave low-order words from `xmm1` and `xmm2/m128` into `xmm1`.
	#[inline(always)]
	fn punpcklwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x61);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `FS`.
	#[inline(always)]
	fn push_FS(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `GS`.
	#[inline(always)]
	fn push_GS(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0xA8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r/m16`.
	#[inline(always)]
	fn push_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r/m64`.
	#[inline(always)]
	fn push_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r/m16`.
	#[inline(always)]
	fn push_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r16`.
	#[inline(always)]
	fn push_Register16Bit_REX_W(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x50, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r/m64`.
	#[inline(always)]
	fn push_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xFF);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `r64`.
	#[inline(always)]
	fn push_Register64Bit_REX_W(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x50, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push lower 16 bits of `EFLAGS`.
	#[inline(always)]
	fn pushf(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `RFLAGS`.
	#[inline(always)]
	fn pushfq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Push `imm16` (sign-extended to 64-bits).
	#[inline(always)]
	fn pushq_Immediate16Bit(&mut self, arg0: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x68);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Push `imm32` (sign-extended to 64-bits).
	#[inline(always)]
	fn pushq_Immediate32Bit(&mut self, arg0: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x68);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Push `imm8` (sign-extended to 64-bits).
	#[inline(always)]
	fn pushq_Immediate8Bit(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Push `imm16` (sign-extended to 16-bits).
	#[inline(always)]
	fn pushw_Immediate16Bit(&mut self, arg0: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x68);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Push `imm8` (sign-extended to 16-bits).
	#[inline(always)]
	fn pushw_Immediate8Bit(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x6A);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Bitwise XOR of `mm/m64` and `mm`.
	#[inline(always)]
	fn pxor_MMRegister_Any64BitMemory(&mut self, arg0: MMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise XOR of `mm/m64` and `mm`.
	#[inline(always)]
	fn pxor_MMRegister_MMRegister(&mut self, arg0: MMRegister, arg1: MMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise XOR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pxor_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise XOR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn pxor_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xEF);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left `CL` times.
	#[inline(always)]
	fn rcl_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left `imm8` times.
	#[inline(always)]
	fn rcl_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left once.
	#[inline(always)]
	fn rcl_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left `CL` times.
	#[inline(always)]
	fn rcl_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left `imm8` times.
	#[inline(always)]
	fn rcl_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left once.
	#[inline(always)]
	fn rcl_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `CL` times.
	#[inline(always)]
	fn rcl_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `imm8` times.
	#[inline(always)]
	fn rcl_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left once.
	#[inline(always)]
	fn rcl_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left `CL` times.
	#[inline(always)]
	fn rcl_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left `imm8` times.
	#[inline(always)]
	fn rcl_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) left once.
	#[inline(always)]
	fn rcl_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left `CL` times.
	#[inline(always)]
	fn rcl_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left `imm8` times.
	#[inline(always)]
	fn rcl_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) left once.
	#[inline(always)]
	fn rcl_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) left once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcl_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `CL` times.
	#[inline(always)]
	fn rcl_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `imm8` times.
	#[inline(always)]
	fn rcl_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left once.
	#[inline(always)]
	fn rcl_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `CL` times.
	#[inline(always)]
	fn rcl_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left `imm8` times.
	#[inline(always)]
	fn rcl_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) left once.
	#[inline(always)]
	fn rcl_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocals of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn rcpps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocals of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn rcpps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocal of the scalar single-precision floating-point value in `xmm2/m32` and stores the result in `xmm1`.
	#[inline(always)]
	fn rcpss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocal of the scalar single-precision floating-point value in `xmm2/m32` and stores the result in `xmm1`.
	#[inline(always)]
	fn rcpss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right `CL` times.
	#[inline(always)]
	fn rcr_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right `imm8` times.
	#[inline(always)]
	fn rcr_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right once.
	#[inline(always)]
	fn rcr_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right `CL` times.
	#[inline(always)]
	fn rcr_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right `imm8` times.
	#[inline(always)]
	fn rcr_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `CL` times.
	#[inline(always)]
	fn rcr_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `imm8` times.
	#[inline(always)]
	fn rcr_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right once.
	#[inline(always)]
	fn rcr_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right `CL` times.
	#[inline(always)]
	fn rcr_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right `imm8` times.
	#[inline(always)]
	fn rcr_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 17 bits (Carry Flag (CF), `r/m16`) right once.
	#[inline(always)]
	fn rcr_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right `CL` times.
	#[inline(always)]
	fn rcr_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right `imm8` times.
	#[inline(always)]
	fn rcr_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 33 bits (Carry Flag (CF), `r/m32`) right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 65 bits (Carry Flag (CF), `r/m64`) right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rcr_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `CL` times.
	#[inline(always)]
	fn rcr_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `imm8` times.
	#[inline(always)]
	fn rcr_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right once.
	#[inline(always)]
	fn rcr_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `CL` times.
	#[inline(always)]
	fn rcr_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right `imm8` times.
	#[inline(always)]
	fn rcr_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 9 bits (Carry Flag (CF), `r/m8`) right once.
	#[inline(always)]
	fn rcr_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the 32-bit destination register with the `FS` base address.
	#[inline(always)]
	fn rdfsbase_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the 64-bit destination register with the `FS` base address.
	#[inline(always)]
	fn rdfsbase_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the 32-bit destination register with the `GS` base address.
	#[inline(always)]
	fn rdgsbase_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the 64-bit destination register with the `GS` base address.
	#[inline(always)]
	fn rdgsbase_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Read a 16-bit random number and store in the destination register.
	#[inline(always)]
	fn rdrand_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Read a 32-bit random number and store in the destination register.
	#[inline(always)]
	fn rdrand_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Read a 64-bit random number and store in the destination register.
	#[inline(always)]
	fn rdrand_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xC7);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input `(E)CX` words from port `DX` into `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_ins_Any16BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input `(E)CX` doublewords from port `DX` into `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_ins_Any32BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input `RCX` default size from port `DX` into `[RDI]`.
	#[inline(always)]
	fn rep_ins_Any64BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0x6D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input `(E)CX` bytes from port `DX` into `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_ins_Any8BitMemory_DX(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Input `RCX` bytes from port `DX` into `[RDI]`.
	#[inline(always)]
	fn rep_ins_Any8BitMemory_DX_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0x6C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `(E)CX` bytes from `DS:[(E)SI]` to `AL`.
	#[inline(always)]
	fn rep_lods_AL(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `RCX` bytes from `[RSI]` to `AL`.
	#[inline(always)]
	fn rep_lods_AL_REX_W(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAC);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `(E)CX` words from `DS:[(E)SI]` to `AX`.
	#[inline(always)]
	fn rep_lods_AX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `(E)CX` doublewords from `DS:[(E)SI]` to `EAX`.
	#[inline(always)]
	fn rep_lods_EAX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load `RCX` quadwords from `[RSI]` to `RAX`.
	#[inline(always)]
	fn rep_lods_RAX(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `(E)CX` words from `DS:[(E)SI]` to `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_movs_Any16BitMemory_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `(E)CX` doublewords from `DS:[(E)SI]` to `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_movs_Any32BitMemory_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `RCX` quadwords from `[RSI]` to `[RDI]`.
	#[inline(always)]
	fn rep_movs_Any64BitMemory_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `(E)CX` bytes from `DS:[(E)SI]` to `ES:[(E)DI]`.
	#[inline(always)]
	fn rep_movs_Any8BitMemory_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Move `RCX` bytes from `[RSI]` to `[RDI]`.
	#[inline(always)]
	fn rep_movs_Any8BitMemory_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA4);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output `(E)CX` words from `DS:[(E)SI]` to port `DX`.
	#[inline(always)]
	fn rep_outs_DX_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output `(E)CX` doublewords from `DS:[(E)SI]` to port `DX`.
	#[inline(always)]
	fn rep_outs_DX_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output `RCX` default size from `[RSI]` to port `DX`.
	#[inline(always)]
	fn rep_outs_DX_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0x6F);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output `(E)CX` bytes from `DS:[(E)SI]` to port `DX`.
	#[inline(always)]
	fn rep_outs_DX_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0x6E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Output `RCX` bytes from `[RSI]` to port `DX`.
	#[inline(always)]
	fn rep_outs_DX_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0x6E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fill `(E)CX` words at `ES:[(E)DI]` with `AX`.
	#[inline(always)]
	fn rep_stos_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fill `(E)CX` doublewords at `ES:[(E)DI]` with `EAX`.
	#[inline(always)]
	fn rep_stos_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fill `RCX` quadwords at `[RDI]` with `RAX`.
	#[inline(always)]
	fn rep_stos_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fill `(E)CX` bytes at `ES:[(E)DI]` with `AL`.
	#[inline(always)]
	fn rep_stos_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fill `RCX` bytes at `[RDI]` with `AL`.
	#[inline(always)]
	fn rep_stos_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find nonmatching words in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repe_cmps_Any16BitMemory_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find nonmatching doublewords in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repe_cmps_Any32BitMemory_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-matching quadwords in `[RDI]` and `[RSI]`.
	#[inline(always)]
	fn repe_cmps_Any64BitMemory_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find nonmatching bytes in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repe_cmps_Any8BitMemory_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-matching bytes in `[RDI]` and `[RSI]`.
	#[inline(always)]
	fn repe_cmps_Any8BitMemory_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-AX word starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repe_scas_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-EAX doubleword starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repe_scas_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-RAX quadword starting at `[RDI]`.
	#[inline(always)]
	fn repe_scas_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-AL byte starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repe_scas_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find non-AL byte starting at `[RDI]`.
	#[inline(always)]
	fn repe_scas_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find matching words in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repne_cmps_Any16BitMemory_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find matching doublewords in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repne_cmps_Any32BitMemory_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find matching doublewords in `[RDI]` and `[RSI]`.
	#[inline(always)]
	fn repne_cmps_Any64BitMemory_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find matching bytes in `ES:[(E)DI]` and `DS:[(E)SI]`.
	#[inline(always)]
	fn repne_scas_Any8BitMemory_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find matching bytes in `[RDI]` and `[RSI]`.
	#[inline(always)]
	fn repne_cmps_Any8BitMemory_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find AX, starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repne_scas_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find EAX, starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repne_scas_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find RAX, starting at `[RDI]`.
	#[inline(always)]
	fn repne_scas_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find AL, starting at `ES:[(E)DI]`.
	#[inline(always)]
	fn repne_scas_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Find AL, starting at `[RDI]`.
	#[inline(always)]
	fn repne_scas_Any8BitMemory_REX_W(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Near return to calling procedure.
	#[inline(always)]
	fn ret(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC3);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Far return to calling procedure.
	#[inline(always)]
	fn ret_Far(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Near return to calling procedure and pop `imm16` bytes from stack.
	#[inline(always)]
	fn ret_Immediate16Bit(&mut self, arg0: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xC2);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Far return to calling procedure and pop `imm16` bytes from stack.
	#[inline(always)]
	fn ret_Immediate16Bit_Far(&mut self, arg0: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xCA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left `CL` times.
	#[inline(always)]
	fn rol_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left `imm8` times.
	#[inline(always)]
	fn rol_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left once.
	#[inline(always)]
	fn rol_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left `CL` times.
	#[inline(always)]
	fn rol_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left `imm8` times.
	#[inline(always)]
	fn rol_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left once.
	#[inline(always)]
	fn rol_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `CL` times.
	#[inline(always)]
	fn rol_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `imm8` times.
	#[inline(always)]
	fn rol_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left once.
	#[inline(always)]
	fn rol_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left `CL` times.
	#[inline(always)]
	fn rol_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left `imm8` times.
	#[inline(always)]
	fn rol_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` left once.
	#[inline(always)]
	fn rol_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left `CL` times.
	#[inline(always)]
	fn rol_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left `imm8` times.
	#[inline(always)]
	fn rol_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` left once.
	#[inline(always)]
	fn rol_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` left once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn rol_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `CL` times.
	#[inline(always)]
	fn rol_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `imm8` times.
	#[inline(always)]
	fn rol_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left once.
	#[inline(always)]
	fn rol_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `CL` times.
	#[inline(always)]
	fn rol_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left `imm8` times.
	#[inline(always)]
	fn rol_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` left once.
	#[inline(always)]
	fn rol_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right `CL` times.
	#[inline(always)]
	fn ror_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right `imm8` times.
	#[inline(always)]
	fn ror_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right once.
	#[inline(always)]
	fn ror_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right `CL` times.
	#[inline(always)]
	fn ror_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right `imm8` times.
	#[inline(always)]
	fn ror_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right once.
	#[inline(always)]
	fn ror_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right `CL` times.
	#[inline(always)]
	fn ror_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m16` right `imm8` times.
	#[inline(always)]
	fn ror_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right once.
	#[inline(always)]
	fn ror_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right `CL` times.
	#[inline(always)]
	fn ror_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right `imm8` times.
	#[inline(always)]
	fn ror_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 16 bits `r/m16` right once.
	#[inline(always)]
	fn ror_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right `CL` times.
	#[inline(always)]
	fn ror_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right `imm8` times.
	#[inline(always)]
	fn ror_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 32 bits `r/m32` right once.
	#[inline(always)]
	fn ror_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right `CL` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right `imm8` times.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 64 bits `r/m64` right once.
	///
	/// Uses a 6 bit count.
	#[inline(always)]
	fn ror_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right `CL` times.
	#[inline(always)]
	fn ror_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m16` right `imm8` times.
	#[inline(always)]
	fn ror_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right once.
	#[inline(always)]
	fn ror_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right `CL` times.
	#[inline(always)]
	fn ror_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 8 bits `r/m16` right `imm8` times.
	#[inline(always)]
	fn ror_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Rotate 8 bits `r/m8` right once.
	#[inline(always)]
	fn ror_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RCX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Rotate 32-bit `r/m32` right `imm8` times without affecting arithmetic flags.
	#[inline(always)]
	fn rorx_Register32Bit_Any32BitMemory_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Rotate 32-bit `r/m32` right `imm8` times without affecting arithmetic flags.
	#[inline(always)]
	fn rorx_Register32Bit_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Rotate 64-bit `r/m64` right `imm8` times without affecting arithmetic flags.
	#[inline(always)]
	fn rorx_Register64Bit_Any64BitMemory_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Rotate 64-bit `r/m64` right `imm8` times without affecting arithmetic flags.
	#[inline(always)]
	fn rorx_Register64Bit_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed double-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundpd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round packed double-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundpd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round packed single-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round packed single-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round the low packed double-precision floating-point value in `xmm2/m64` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundsd_XMMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round the low packed double-precision floating-point value in `xmm2/m64` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundsd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0B);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round the low packed single-precision floating-point value in `xmm2/m32` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundss_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Round the low packed single-precision floating-point value in `xmm2/m32` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn roundss_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_3(0x0F, 0x3A, 0x0A);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Computes the approximate reciprocals of the square roots of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn rsqrtps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocals of the square roots of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn rsqrtps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocal of the square root of the low single-precision floating-point value in `xmm2/m32` and stores the results in `xmm1`.
	#[inline(always)]
	fn rsqrtss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes the approximate reciprocal of the square root of the low single-precision floating-point value in `xmm2/m32` and stores the results in `xmm1`.
	#[inline(always)]
	fn rsqrtss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Loads the Sign Flag (SF), Zero Flag (ZF), A Flag (AF), Parity Flag (PF), and Carry Flag (CF) from `AH` into `EFLAGS`.
	#[inline(always)]
	fn sahf(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x9E);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn sal_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, once.
	#[inline(always)]
	fn sal_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sal_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, once.
	#[inline(always)]
	fn sal_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, `CL` times.
	#[inline(always)]
	fn sal_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, once.
	#[inline(always)]
	fn sal_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sal_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn sal_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn sal_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, once.
	#[inline(always)]
	fn sal_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sal_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, once.
	#[inline(always)]
	fn sal_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, `CL` times.
	#[inline(always)]
	fn sal_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, once.
	#[inline(always)]
	fn sal_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sal_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn sal_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn sal_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sal_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn sal_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn sal_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn sar_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, once.
	#[inline(always)]
	fn sar_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sar_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, once.
	#[inline(always)]
	fn sar_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sar_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, once.
	#[inline(always)]
	fn sar_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sar_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `imm8` time.
	#[inline(always)]
	fn sar_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, once.
	#[inline(always)]
	fn sar_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn sar_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m16` by 2, once.
	#[inline(always)]
	fn sar_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sar_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, once.
	#[inline(always)]
	fn sar_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn sar_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn sar_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m32` by 2, once.
	#[inline(always)]
	fn sar_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sar_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `imm8` time.
	#[inline(always)]
	fn sar_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, once.
	#[inline(always)]
	fn sar_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn sar_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, `imm8` time.
	#[inline(always)]
	fn sar_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Signed divide `r/m8` by 2, once.
	#[inline(always)]
	fn sar_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RDI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m32` arithmetically right with count specified in `r32b`.
	#[inline(always)]
	fn sarx_Register32Bit_Any32BitMemory_Register32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x2, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m32` arithmetically right with count specified in `r32b`.
	#[inline(always)]
	fn sarx_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x2, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` arithmetically right with count specified in `r64b`.
	#[inline(always)]
	fn sarx_Register64Bit_Any64BitMemory_Register64Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x2, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` arithmetically right with count specified in `r64b`.
	#[inline(always)]
	fn sarx_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x2, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract with borrow `imm8` from `AL`.
	#[inline(always)]
	fn sbb_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x1C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `imm16` from `AX`.
	#[inline(always)]
	fn sbb_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x1D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `imm32` from `EAX`.
	#[inline(always)]
	fn sbb_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x1D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `imm16` from `r/m16`.
	#[inline(always)]
	fn sbb_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m16`.
	#[inline(always)]
	fn sbb_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r16` from `r/m16`.
	#[inline(always)]
	fn sbb_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `imm32` from `r/m32`.
	#[inline(always)]
	fn sbb_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m32`.
	#[inline(always)]
	fn sbb_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r32` from `r/m32`.
	#[inline(always)]
	fn sbb_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm32` to 64-bits from `r/m64`.
	#[inline(always)]
	fn sbb_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m64`.
	#[inline(always)]
	fn sbb_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r64` from `r/m64`.
	#[inline(always)]
	fn sbb_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `imm8` from `r/m8`.
	#[inline(always)]
	fn sbb_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `imm16` from `r/m16`.
	#[inline(always)]
	fn sbb_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m16`.
	#[inline(always)]
	fn sbb_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r/m16` from `r16`.
	#[inline(always)]
	fn sbb_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r16` from `r/m16`.
	#[inline(always)]
	fn sbb_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m16` from `r16`.
	#[inline(always)]
	fn sbb_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `imm32` from `r/m32`.
	#[inline(always)]
	fn sbb_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m32`.
	#[inline(always)]
	fn sbb_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r/m32` from `r32`.
	#[inline(always)]
	fn sbb_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r32` from `r/m32`.
	#[inline(always)]
	fn sbb_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m32` from `r32`.
	#[inline(always)]
	fn sbb_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm32` to 64-bits from `r/m64`.
	#[inline(always)]
	fn sbb_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow sign-extended `imm8` from `r/m64`.
	#[inline(always)]
	fn sbb_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r/m64` from `r64`.
	#[inline(always)]
	fn sbb_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r64` from `r/m64`.
	#[inline(always)]
	fn sbb_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m64` from `r64`.
	#[inline(always)]
	fn sbb_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x1B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `imm8` from `r/m8`.
	#[inline(always)]
	fn sbb_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow sign-extended imm.32 to 64-bits from `RAX`.
	#[inline(always)]
	fn sbb_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x1D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `imm8` from `r/m8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r8` from `r/m8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract with borrow `r/m8` from `r8`.
	#[inline(always)]
	fn sbb_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AX` with word at `ES:(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scas_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `EAX` with doubleword at `ES(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scas_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `RAX` with quadword at `RDI` or `EDI` then set status flags.
	#[inline(always)]
	fn scas_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with byte at `ES:(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scas_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AL` with byte at `ES:(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scasb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAE);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `EAX` with doubleword at `ES:(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scasd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `RAX` with quadword at `RDI` or `EDI` then set status flags.
	#[inline(always)]
	fn scasq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare `AX` with word at `ES:(E)DI` or `RDI` then set status flags.
	#[inline(always)]
	fn scasw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAF);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn seta_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn seta_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn seta_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setae_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setae_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if above or equal (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setae_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setb_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setb_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setb_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setbe_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setbe_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if below or equal (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setbe_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setc_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setc_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if carry (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setc_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn sete_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn sete_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if equal (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn sete_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setg_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setg_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setg_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setge_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setge_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if greater or equal (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setge_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setl_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setl_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setl_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setle_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setle_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if less or equal (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setle_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setna_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setna_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above (Carry Flag (CF) is 1 or Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setna_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x96);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setnae_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setnae_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not above or equal (Carry Flag (CF) is 1).
	#[inline(always)]
	fn setnae_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x92);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnb_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnb_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnb_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnbe_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnbe_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not below or equal (Carry Flag (CF) is 0 and Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnbe_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x97);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnc_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnc_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not carry (Carry Flag (CF) is 0).
	#[inline(always)]
	fn setnc_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x93);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setne_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setne_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not equal (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setne_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setng_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setng_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater (Zero Flag (ZF) is 1 or Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setng_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9E);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setnge_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setnge_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not greater or equal (Sign Flag (SF) != Overflow Flag (OF)).
	#[inline(always)]
	fn setnge_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9C);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnl_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnl_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less (Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnl_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9D);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnle_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnle_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not less or equal (Zero Flag (ZF) is 0 and Sign Flag (SF) == Overflow Flag (OF)).
	#[inline(always)]
	fn setnle_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9F);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn setno_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x91);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn setno_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x91);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not overflow (Overflow Flag (OF) is 0).
	#[inline(always)]
	fn setno_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x91);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setnp_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setnp_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not parity (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setnp_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn setns_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x99);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn setns_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x99);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not sign (Sign Flag (SF) is 0).
	#[inline(always)]
	fn setns_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x99);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnz_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnz_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if not zero (Zero Flag (ZF) is 0).
	#[inline(always)]
	fn setnz_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x95);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn seto_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x90);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn seto_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x90);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if overflow (Overflow Flag (OF) is 1).
	#[inline(always)]
	fn seto_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x90);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setp_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setp_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setp_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setpe_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setpe_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity even (Parity Flag (PF) is 1).
	#[inline(always)]
	fn setpe_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9A);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setpo_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setpo_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if parity odd (Parity Flag (PF) is 0).
	#[inline(always)]
	fn setpo_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x9B);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn sets_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x98);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn sets_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x98);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if sign (Sign Flag (SF) is 1).
	#[inline(always)]
	fn sets_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x98);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setz_Any8BitMemory(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setz_Register8Bit(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set byte if zero (Zero Flag (ZF) is 1).
	#[inline(always)]
	fn setz_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x94);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Serializes store operations.
	#[inline(always)]
	fn sfence(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0xAE, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn shl_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, once.
	#[inline(always)]
	fn shl_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shl_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, once.
	#[inline(always)]
	fn shl_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shl_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, once.
	#[inline(always)]
	fn shl_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shl_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn shl_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn shl_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m16` by 2, once.
	#[inline(always)]
	fn shl_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shl_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, once.
	#[inline(always)]
	fn shl_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shl_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m64` by 2, once.
	#[inline(always)]
	fn shl_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shl_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shl_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn shl_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shl_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shl_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Multiply `r/m8` by 2, once.
	#[inline(always)]
	fn shl_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to left `CL` places while shifting bits from `r16` in from the right.
	#[inline(always)]
	fn shld_Any16BitMemory_Register16Bit_CL(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to left `imm8` places while shifting bits from `r16` in from the right.
	#[inline(always)]
	fn shld_Any16BitMemory_Register16Bit_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` to left `CL` places while shifting bits from `r32` in from the right.
	#[inline(always)]
	fn shld_Any32BitMemory_Register32Bit_CL(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m32` to left `imm8` places while shifting bits from `r32` in from the right.
	#[inline(always)]
	fn shld_Any32BitMemory_Register32Bit_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m64` to left `CL` places while shifting bits from `r64` in from the right.
	#[inline(always)]
	fn shld_Any64BitMemory_Register64Bit_CL(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m64` to left `imm8` places while shifting bits from `r64` in from the right.
	#[inline(always)]
	fn shld_Any64BitMemory_Register64Bit_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m16` to left `CL` places while shifting bits from `r16` in from the right.
	#[inline(always)]
	fn shld_Register16Bit_Register16Bit_CL(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to left `imm8` places while shifting bits from `r16` in from the right.
	#[inline(always)]
	fn shld_Register16Bit_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` to left `CL` places while shifting bits from `r32` in from the right.
	#[inline(always)]
	fn shld_Register32Bit_Register32Bit_CL(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m32` to left `imm8` places while shifting bits from `r32` in from the right.
	#[inline(always)]
	fn shld_Register32Bit_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m64` to left `CL` places while shifting bits from `r64` in from the right.
	#[inline(always)]
	fn shld_Register64Bit_Register64Bit_CL(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA5);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m64` to left `imm8` places while shifting bits from `r64` in from the right.
	#[inline(always)]
	fn shld_Register64Bit_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xA4);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` logically left with count specified in `r32b`.
	#[inline(always)]
	fn shlx_Register32Bit_Any32BitMemory_Register32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m32` logically left with count specified in `r32b`.
	#[inline(always)]
	fn shlx_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` logically left with count specified in `r64b`.
	#[inline(always)]
	fn shlx_Register64Bit_Any64BitMemory_Register64Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` logically left with count specified in `r64b`.
	#[inline(always)]
	fn shlx_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unsigned divide `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn shr_Any16BitMemory_CL(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m16` by 2, once.
	#[inline(always)]
	fn shr_Any16BitMemory_One(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shr_Any32BitMemory_CL(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, once.
	#[inline(always)]
	fn shr_Any32BitMemory_One(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shr_Any64BitMemory_CL(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, once.
	#[inline(always)]
	fn shr_Any64BitMemory_One(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shr_Any8BitMemory_CL(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, once.
	#[inline(always)]
	fn shr_Any8BitMemory_One(&mut self, arg0: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m16` by 2, `CL` times.
	#[inline(always)]
	fn shr_Register16Bit_CL(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m16` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m16` by 2, once.
	#[inline(always)]
	fn shr_Register16Bit_One(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shr_Register32Bit_CL(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, once.
	#[inline(always)]
	fn shr_Register32Bit_One(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `CL` times.
	#[inline(always)]
	fn shr_Register64Bit_CL(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xC1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m32` by 2, once.
	#[inline(always)]
	fn shr_Register64Bit_One(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shr_Register8Bit_CL(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shr_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, once.
	#[inline(always)]
	fn shr_Register8Bit_One(&mut self, arg0: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `CL` times.
	#[inline(always)]
	fn shr_RegisterHigh8BitsOf16Bits_CL(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, `imm8` times.
	#[inline(always)]
	fn shr_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xC0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Unsigned divide `r/m8` by 2, once.
	#[inline(always)]
	fn shr_RegisterHigh8BitsOf16Bits_One(&mut self, arg0: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to right `CL` places while shifting bits from `r16` in from the left.
	#[inline(always)]
	fn shrd_Any16BitMemory_Register16Bit_CL(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to right `imm8` places while shifting bits from `r16` in from the left.
	#[inline(always)]
	fn shrd_Any16BitMemory_Register16Bit_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` to right `CL` places while shifting bits from `r32` in from the left.
	#[inline(always)]
	fn shrd_Any32BitMemory_Register32Bit_CL(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m32` to right `imm8` places while shifting bits from `r32` in from the left.
	#[inline(always)]
	fn shrd_Any32BitMemory_Register32Bit_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m64` to right `CL` places while shifting bits from `r64` in from the left.
	#[inline(always)]
	fn shrd_Any64BitMemory_Register64Bit_CL(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m64` to right `imm8` places while shifting bits from `r64` in from the left.
	#[inline(always)]
	fn shrd_Any64BitMemory_Register64Bit_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m16` to right `CL` places while shifting bits from `r16` in from the left.
	#[inline(always)]
	fn shrd_Register16Bit_Register16Bit_CL(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m16` to right `imm8` places while shifting bits from `r16` in from the left.
	#[inline(always)]
	fn shrd_Register16Bit_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` to right `CL` places while shifting bits from `r32` in from the left.
	#[inline(always)]
	fn shrd_Register32Bit_Register32Bit_CL(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m32` to right `imm8` places while shifting bits from `r32` in from the left.
	#[inline(always)]
	fn shrd_Register32Bit_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m64` to right `CL` places while shifting bits from `r64` in from the left.
	#[inline(always)]
	fn shrd_Register64Bit_Register64Bit_CL(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAD);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Shift `r/m64` to right `imm8` places while shifting bits from `r64` in from the left.
	#[inline(always)]
	fn shrd_Register64Bit_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xAC);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shift `r/m32` logically right with count specified in `r32b`.
	#[inline(always)]
	fn shrx_Register32Bit_Any32BitMemory_Register32Bit(&mut self, arg0: Register32Bit, arg1: Any32BitMemory, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m32` logically right with count specified in `r32b`.
	#[inline(always)]
	fn shrx_Register32Bit_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x0, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` logically right with count specified in `r64b`.
	#[inline(always)]
	fn shrx_Register64Bit_Any64BitMemory_Register64Bit(&mut self, arg0: Register64Bit, arg1: Any64BitMemory, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `r/m64` logically right with count specified in `r64b`.
	#[inline(always)]
	fn shrx_Register64Bit_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x3, 0x1, arg2, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle packed double-precision floating-point values selected by `imm8` from `xmm1` and `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn shufpd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC6);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle packed double-precision floating-point values selected by `imm8` from `xmm1` and `xmm2/m128` to `xmm1`.
	#[inline(always)]
	fn shufpd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC6);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle packed single-precision floating-point values selected by `imm8` from `xmm1` and `xmm1`/m128 to `xmm1`.
	#[inline(always)]
	fn shufps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC6);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Shuffle packed single-precision floating-point values selected by `imm8` from `xmm1` and `xmm1`/m128 to `xmm1`.
	#[inline(always)]
	fn shufps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xC6);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.
	}

	/// Computes square roots of the packed double-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square roots of the packed double-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square roots of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square roots of the packed single-precision floating-point values in `xmm2/m128` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square root of the low double-precision floating-point value in `xmm2/m64` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square root of the low double-precision floating-point value in `xmm2/m64` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square root of the low single-precision floating-point value in `xmm2/m32` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Computes square root of the low single-precision floating-point value in `xmm2/m32` and stores the results in `xmm1`.
	#[inline(always)]
	fn sqrtss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Carry Flag (CF).
	#[inline(always)]
	fn stc(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xF9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Direction Flag (DF).
	#[inline(always)]
	fn std(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFD);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set interrupt flag.
	///
	/// External, maskable interrupts are enabled at the end of the next instruction.
	#[inline(always)]
	fn sti(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xFB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store contents of `MXCSR` register to `m32`.
	#[inline(always)]
	fn stmxcsr_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `AX` at address `ES:(E)DI`.
	///
	/// For 64-bit mode store `AX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stos_Any16BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `EAX` at address `ES:(E)DI`.
	///
	/// For 64-bit mode store `EAX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stos_Any32BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `RAX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stos_Any64BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `AL` at address `ES:(E)DI`.
	///
	/// For 64-bit mode store `AL` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stos_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `AL` at address `ES:(E)DI`.
	///
	/// For 64-bit mode store `AL` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stosb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAA);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `EAX` at address `ES:(E)DI`
	///
	/// For 64-bit mode store `EAX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stosd(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Store `RAX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stosq(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// For legacy mode, store `AX` at address `ES:(E)DI`.
	///
	/// For 64-bit mode store `AX` at address `RDI` or `EDI`.
	#[inline(always)]
	fn stosw(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xAB);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm8` from `AL`.
	#[inline(always)]
	fn sub_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x2C);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `imm16` from `AX`.
	#[inline(always)]
	fn sub_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x2D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `imm32` from `EAX`.
	#[inline(always)]
	fn sub_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x2D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `imm16` from `r/m16`.
	#[inline(always)]
	fn sub_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m16`.
	#[inline(always)]
	fn sub_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r16` from `r/m16`.
	#[inline(always)]
	fn sub_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm32` from `r/m32`.
	#[inline(always)]
	fn sub_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m32`.
	#[inline(always)]
	fn sub_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r32` from `r/m32`.
	#[inline(always)]
	fn sub_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm32` sign-extended to 64-bits from `r/m64`.
	#[inline(always)]
	fn sub_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m64`.
	#[inline(always)]
	fn sub_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r64` from `r/m64`.
	#[inline(always)]
	fn sub_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm8` from `r/m8`.
	#[inline(always)]
	fn sub_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm16` from `r/m16`.
	#[inline(always)]
	fn sub_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m16`.
	#[inline(always)]
	fn sub_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r/m16` from `r16`.
	#[inline(always)]
	fn sub_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r16` from `r/m16`.
	#[inline(always)]
	fn sub_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m16` from `r16`.
	#[inline(always)]
	fn sub_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm32` from `r/m32`.
	#[inline(always)]
	fn sub_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m32`.
	#[inline(always)]
	fn sub_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r/m32` from `r32`.
	#[inline(always)]
	fn sub_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r32` from `r/m32`.
	#[inline(always)]
	fn sub_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m32` from `r32`.
	#[inline(always)]
	fn sub_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm32` sign-extended to 64-bits from `r/m64`.
	#[inline(always)]
	fn sub_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract sign-extended `imm8` from `r/m64`.
	#[inline(always)]
	fn sub_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r/m64` from `r64`.
	#[inline(always)]
	fn sub_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r64` from `r/m64`.
	#[inline(always)]
	fn sub_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m64` from `r64`.
	#[inline(always)]
	fn sub_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm8` from `r/m8`.
	#[inline(always)]
	fn sub_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `imm32` sign-extended to 64-bits from `RAX`.
	#[inline(always)]
	fn sub_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x2D);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `imm8` from `r/m8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r8` from `r/m8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract `r/m8` from `r8`.
	#[inline(always)]
	fn sub_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed double-precision floating-point values in `xmm2/m128` from `xmm1`.
	#[inline(always)]
	fn subpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed double-precision floating-point values in `xmm2/m128` from `xmm1`.
	#[inline(always)]
	fn subpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed single-precision floating-point values in `xmm2/mem` from `xmm1`.
	#[inline(always)]
	fn subps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract packed single-precision floating-point values in `xmm2/mem` from `xmm1`.
	#[inline(always)]
	fn subps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtracts the low double-precision floating-point values in `xmm2/mem64` from `xmm1`.
	#[inline(always)]
	fn subsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtracts the low double-precision floating-point values in `xmm2/mem64` from `xmm1`.
	#[inline(always)]
	fn subsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract the lower single-precision floating-point values in `xmm2/m32` from `xmm1`.
	#[inline(always)]
	fn subss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Subtract the lower single-precision floating-point values in `xmm2/m32` from `xmm1`.
	#[inline(always)]
	fn subss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x5C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchanges the current `GS` base register value with the value contained in `MSR` address `0xC0000102`.
	#[inline(always)]
	fn swapgs(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fast call to privilege level 0 system procedures.
	#[inline(always)]
	fn syscall(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x05);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fast call to privilege level 0 system procedures.
	#[inline(always)]
	fn sysenter(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x34);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fast return to privilege level 3 user code.
	#[inline(always)]
	fn sysexit(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x35);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Fast return to 64-bit mode privilege level 3 user code.
	#[inline(always)]
	fn sysexit_PrefixRexW(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_2(0x0F, 0x35);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return to compatibility mode from fast system call.
	#[inline(always)]
	fn sysret(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x07);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Return to 64-bit mode from fast system call.
	#[inline(always)]
	fn sysret_PrefixRexW(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_2(0x0F, 0x07);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm8` with `AL`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `imm16` with `AX`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `imm32` with `EAX`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xA9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `imm16` with `r/m16`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r16` with `r/m16`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm32` with `r/m32`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r32` with `r/m32`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm32` sign-extended to 64-bits with `r/m64`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r64` with `r/m64`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm16` with `r/m16`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r16` with `r/m16`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm32` with `r/m32`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r32` with `r/m32`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm32` sign-extended to 64-bits with `r/m64`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r64` with `r/m64`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x85);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `imm32` sign-extended to 64-bits with `RAX`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xA9);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `imm8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg0, Register64Bit::RAX);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// AND `r8` with `r/m8`.
	///
	/// The Sign Flag (SF), Zero Flag (ZF) and Parity Flag (PF) are each potentially set.
	#[inline(always)]
	fn test_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x84);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m16` and return result in `r16`.
	#[inline(always)]
	fn tzcnt_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m16` and return result in `r16`.
	#[inline(always)]
	fn tzcnt_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m32` and return result in `r32`.
	#[inline(always)]
	fn tzcnt_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m32` and return result in `r32`.
	#[inline(always)]
	fn tzcnt_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m64` and return result in `r64`.
	#[inline(always)]
	fn tzcnt_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Count the number of trailing zero bits in `r/m64` and return result in `r64`.
	#[inline(always)]
	fn tzcnt_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xBC);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compares (unordered) the low double-precision floating-point values in `xmm1` and `xmm2/m64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn ucomisd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compares (unordered) the low double-precision floating-point values in `xmm1` and `xmm2/m64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn ucomisd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare lower single-precision floating-point value in `xmm1` register with lower single-precision floating-point value in `xmm2/mem` and set the status flags accordingly.
	#[inline(always)]
	fn ucomiss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Compare lower single-precision floating-point value in `xmm1` register with lower single-precision floating-point value in `xmm2/mem` and set the status flags accordingly.
	#[inline(always)]
	fn ucomiss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Raise invalid opcode exception ('Undefined 2').
	#[inline(always)]
	fn ud2(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0x0F, 0x0B);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn unpckhpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn unpckhpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `xmm1` and `xmm2/mem` into `xmm1`.
	#[inline(always)]
	fn unpckhps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `xmm1` and `xmm2/mem` into `xmm1`.
	#[inline(always)]
	fn unpckhps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x15);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves double-precision floating-point values from low quadwords of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn unpcklpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves double-precision floating-point values from low quadwords of `xmm1` and `xmm2/m128`.
	#[inline(always)]
	fn unpcklpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `xmm1` and `xmm2/mem` into `xmm1`.
	#[inline(always)]
	fn unpcklps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `xmm1` and `xmm2/mem` into `xmm1`.
	#[inline(always)]
	fn unpcklps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x14);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Add packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add the low double-precision floating-point value from `xmm3/mem` to `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vaddsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add the low double-precision floating-point value from `xmm3/mem` to `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vaddsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add the low single-precision floating-point value from `xmm3/mem` to `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vaddss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add the low single-precision floating-point value from `xmm3/mem` to `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vaddss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add/subtract packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddsubpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add/subtract packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddsubpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add / subtract packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddsubpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add / subtract packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddsubpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add/subtract single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddsubps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add/subtract single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vaddsubps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add / subtract single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddsubps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add / subtract single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vaddsubps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesdec_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesdec_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesdeclast_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesdeclast_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform one round of an AES encryption flow, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from the `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesenc_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform one round of an AES encryption flow, operating on a 128-bit data (state) from `xmm2` with a 128-bit round key from the `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesenc_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from `xmm2` with a 128 bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesenclast_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from `xmm2` with a 128 bit round key from `xmm3/m128`.
	///
	/// Stores the result in `xmm1`.
	#[inline(always)]
	fn vaesenclast_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the InvMixColumn transformation on a 128-bit round key from `xmm2/m128` and store the result in `xmm1`.
	#[inline(always)]
	fn vaesimc_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform the InvMixColumn transformation on a 128-bit round key from `xmm2/m128` and store the result in `xmm1`.
	#[inline(always)]
	fn vaesimc_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Assist in AES round key generation using 8 bits Round Constant (RCON) specified in the `imm8`, operating on 128 bits of data specified in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vaeskeygenassist_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Assist in AES round key generation using 8 bits Round Constant (RCON) specified in the `imm8`, operating on 128 bits of data specified in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vaeskeygenassist_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandnpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandnpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandnpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandnpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandnps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandnps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandnps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND NOT of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandnps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x55);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vandps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical AND of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vandps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x54);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed double-precision floating-point values from `xmm2` and `xmm3/m128` from mask in `imm8` and store the values in `xmm1`.
	#[inline(always)]
	fn vblendpd_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed double-precision floating-point values from `xmm2` and `xmm3/m128` from mask in `imm8` and store the values in `xmm1`.
	#[inline(always)]
	fn vblendpd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed double-precision floating-point values from `ymm2` and `ymm3/m256` from mask in `imm8` and store the values in `ymm1`.
	#[inline(always)]
	fn vblendpd_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed double-precision floating-point values from `ymm2` and `ymm3/m256` from mask in `imm8` and store the values in `ymm1`.
	#[inline(always)]
	fn vblendpd_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed single-precision floating-point values from `xmm2` and `xmm3/m128` from mask in `imm8` and store the values in `xmm1`.
	#[inline(always)]
	fn vblendps_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed single-precision floating-point values from `xmm2` and `xmm3/m128` from mask in `imm8` and store the values in `xmm1`.
	#[inline(always)]
	fn vblendps_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed single-precision floating-point values from `ymm2` and `ymm3/m256` from mask in `imm8` and store the values in `ymm1`.
	#[inline(always)]
	fn vblendps_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select packed single-precision floating-point values from `ymm2` and `ymm3/m256` from mask in `imm8` and store the values in `ymm1`.
	#[inline(always)]
	fn vblendps_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally copy double-precision floating-point values from `xmm2` or `xmm3/m128` to `xmm1`, based on mask bits in the mask operand, `xmm4`.
	#[inline(always)]
	fn vblendvpd_XMMRegister_XMMRegister_Any128BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy double-precision floating-point values from `xmm2` or `xmm3/m128` to `xmm1`, based on mask bits in the mask operand, `xmm4`.
	#[inline(always)]
	fn vblendvpd_XMMRegister_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy double-precision floating-point values from `ymm2` or `ymm3/m256` to `ymm1`, based on mask bits in the mask operand, ymm4.
	#[inline(always)]
	fn vblendvpd_YMM_YMM_Any256BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy double-precision floating-point values from `ymm2` or `ymm3/m256` to `ymm1`, based on mask bits in the mask operand, ymm4.
	#[inline(always)]
	fn vblendvpd_YMM_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy single-precision floating-point values from `xmm2` or `xmm3/m128` to `xmm1`, based on mask bits in the specified mask operand, `xmm4`.
	#[inline(always)]
	fn vblendvps_XMMRegister_XMMRegister_Any128BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy single-precision floating-point values from `xmm2` or `xmm3/m128` to `xmm1`, based on mask bits in the specified mask operand, `xmm4`.
	#[inline(always)]
	fn vblendvps_XMMRegister_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy single-precision floating-point values from `ymm2` or `ymm3/m256` to `ymm1`, based on mask bits in the specified mask register, ymm4.
	#[inline(always)]
	fn vblendvps_YMM_YMM_Any256BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Conditionally copy single-precision floating-point values from `ymm2` or `ymm3/m256` to `ymm1`, based on mask bits in the specified mask register, ymm4.
	#[inline(always)]
	fn vblendvps_YMM_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Broadcast 128 bits of floating-point data in mem to low and high 128-bits in `ymm1`.
	#[inline(always)]
	fn vbroadcastf128_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast 128 bits of integer data in mem to low and high 128-bits in `ymm1`.
	#[inline(always)]
	fn vbroadcasti128_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast double-precision floating-point element in mem to four locations in `ymm1`.
	#[inline(always)]
	fn vbroadcastsd_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast low double-precision floating-point element in the source operand to four locations in `ymm1`.
	#[inline(always)]
	fn vbroadcastsd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast single-precision floating-point element in mem to four locations in `xmm1`.
	#[inline(always)]
	fn vbroadcastss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast the low single-precision floating-point element in the source operand to four locations in `xmm1`.
	#[inline(always)]
	fn vbroadcastss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast single-precision floating-point element in mem to eight locations in `ymm1`.
	#[inline(always)]
	fn vbroadcastss_YMM_Any32BitMemory(&mut self, arg0: YMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast low single-precision floating-point element in the source operand to eight locations in `ymm1`.
	#[inline(always)]
	fn vbroadcastss_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed double-precision floating-point values in `xmm3/m128` and `xmm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmppd_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed double-precision floating-point values in `xmm3/m128` and `xmm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmppd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed double-precision floating-point values in `ymm3/m256` and `ymm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmppd_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed double-precision floating-point values in `ymm3/m256` and `ymm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmppd_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed single-precision floating-point values in `xmm3/m128` and `xmm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmpps_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed single-precision floating-point values in `xmm3/m128` and `xmm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmpps_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed single-precision floating-point values in `ymm3/m256` and `ymm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmpps_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed single-precision floating-point values in `ymm3/m256` and `ymm2` using bits `4:0` of `imm8` as a comparison predicate.
	#[inline(always)]
	fn vcmpps_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point value in `xmm3/m64` and `xmm2` using bits `4:0` of `imm8` as comparison predicate.
	#[inline(always)]
	fn vcmpsd_XMMRegister_XMMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point value in `xmm3/m64` and `xmm2` using bits `4:0` of `imm8` as comparison predicate.
	#[inline(always)]
	fn vcmpsd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point value in `xmm3/m32` and `xmm2` using bits `4:0` of `imm8` as comparison predicate.
	#[inline(always)]
	fn vcmpss_XMMRegister_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point value in `xmm3/m32` and `xmm2` using bits `4:0` of `imm8` as comparison predicate.
	#[inline(always)]
	fn vcmpss_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC2);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vcomisd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vcomisd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vcomiss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vcomiss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed signed doubleword integers from `xmm2/mem` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtdq2pd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed signed doubleword integers from `xmm2/mem` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtdq2pd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed signed doubleword integers from `ymm2/mem` to four packed double-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtdq2pd_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed signed doubleword integers from `ymm2/mem` to four packed double-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtdq2pd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed signed doubleword integers from `xmm2/mem` to four packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtdq2ps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed signed doubleword integers from `xmm2/mem` to four packed single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtdq2ps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed signed doubleword integers from `ymm2/mem` to eight packed single-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtdq2ps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed signed doubleword integers from `ymm2/mem` to eight packed single-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtdq2ps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn vcvtpd2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn vcvtpd2dq_XMMRegister_Any256BitMemory(&mut self, arg0: XMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn vcvtpd2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four signed doubleword integers in `xmm1`.
	#[inline(always)]
	fn vcvtpd2dq_XMMRegister_YMM(&mut self, arg0: XMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtpd2ps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtpd2ps_XMMRegister_Any256BitMemory(&mut self, arg0: XMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtpd2ps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four single-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtpd2ps_XMMRegister_YMM(&mut self, arg0: XMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed half precision (16-bit) floating-point values in `xmm2/m64` to packed single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtph2ps_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed half precision (16-bit) floating-point values in `xmm2/m64` to packed single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtph2ps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed half precision (16-bit) floating-point values in `xmm2/m128` to packed single-precision floating-point value in `ymm1`.
	#[inline(always)]
	fn vcvtph2ps_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed half precision (16-bit) floating-point values in `xmm2/m128` to packed single-precision floating-point value in `ymm1`.
	#[inline(always)]
	fn vcvtph2ps_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/mem` to four packed signed doubleword values in `xmm1`.
	#[inline(always)]
	fn vcvtps2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/mem` to four packed signed doubleword values in `xmm1`.
	#[inline(always)]
	fn vcvtps2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point values from `ymm2/mem` to eight packed signed doubleword values in `ymm1`.
	#[inline(always)]
	fn vcvtps2dq_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point values from `ymm2/mem` to eight packed signed doubleword values in `ymm1`.
	#[inline(always)]
	fn vcvtps2dq_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed single-precision floating-point values in `xmm2/mem` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtps2pd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed single-precision floating-point values in `xmm2/mem` to two packed double-precision floating-point values in `xmm1`.
	#[inline(always)]
	fn vcvtps2pd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values in `xmm2/mem` to four packed double-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtps2pd_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values in `xmm2/mem` to four packed double-precision floating-point values in `ymm1`.
	#[inline(always)]
	fn vcvtps2pd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point value in `ymm2` to packed half-precision (16-bit) floating-point value in `xmm1/mem`.
	///
	/// `imm8` provides rounding controls.
	#[inline(always)]
	fn vcvtps2ph_Any128BitMemory_YMM_Immediate8Bit(&mut self, arg0: Any128BitMemory, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision float- ing-point value in `xmm2` to packed half- precision (16-bit) floating-point value in `xmm1/mem`.
	///
	/// `imm8` provides rounding controls.
	#[inline(always)]
	fn vcvtps2ph_Any64BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision float- ing-point value in `xmm2` to packed half- precision (16-bit) floating-point value in `xmm1/mem`.
	///
	/// `imm8` provides rounding controls.
	#[inline(always)]
	fn vcvtps2ph_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point value in `ymm2` to packed half-precision (16-bit) floating-point value in `xmm1/mem`.
	///
	/// `imm8` provides rounding controls.
	#[inline(always)]
	fn vcvtps2ph_XMMRegister_YMM_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed doubleword integer `r32`.
	#[inline(always)]
	fn vcvtsd2si_Register32Bit_Any64BitMemory(&mut self, arg0: Register32Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed doubleword integer `r32`.
	#[inline(always)]
	fn vcvtsd2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed quadword integer sign-extended into `r64`.
	#[inline(always)]
	fn vcvtsd2si_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed quadword integer sign-extended into `r64`.
	#[inline(always)]
	fn vcvtsd2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value in `xmm3/m64` to one single-precision floating-point value and merge with high bits in `xmm2`.
	#[inline(always)]
	fn vcvtsd2ss_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value in `xmm3/m64` to one single-precision floating-point value and merge with high bits in `xmm2`.
	#[inline(always)]
	fn vcvtsd2ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed doubleword integer from `r/m32` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2sd_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed quadword integer from `r/m64` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed doubleword integer from `r/m32` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2sd_XMMRegister_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed quadword integer from `r/m64` to one double-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2sd_XMMRegister_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed doubleword integer from `r/m32` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed quadword integer from `r/m64` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2ss_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed doubleword integer from `r/m32` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2ss_XMMRegister_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one signed quadword integer from `r/m64` to one single-precision floating-point value in `xmm1`.
	#[inline(always)]
	fn vcvtsi2ss_XMMRegister_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value in `xmm3/m32` to one double-precision floating-point value and merge with high bits of `xmm2`.
	#[inline(always)]
	fn vcvtss2sd_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value in `xmm3/m32` to one double-precision floating-point value and merge with high bits of `xmm2`.
	#[inline(always)]
	fn vcvtss2sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed doubleword integer in `r32`.
	#[inline(always)]
	fn vcvtss2si_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed doubleword integer in `r32`.
	#[inline(always)]
	fn vcvtss2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed quadword integer in `r64`.
	#[inline(always)]
	fn vcvtss2si_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed quadword integer in `r64`.
	#[inline(always)]
	fn vcvtss2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttpd2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttpd2dq_XMMRegister_Any256BitMemory(&mut self, arg0: XMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert two packed double-precision floating-point values in `xmm2/mem` to two signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttpd2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed double-precision floating-point values in `ymm2/mem` to four signed doubleword integers in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttpd2dq_XMMRegister_YMM(&mut self, arg0: XMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xE6);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/mem` to four packed signed doubleword values in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttps2dq_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert four packed single-precision floating-point values from `xmm2/mem` to four packed signed doubleword values in `xmm1` using truncation.
	#[inline(always)]
	fn vcvttps2dq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point values from `ymm2/mem` to eight packed signed doubleword values in `ymm1` using truncation.
	#[inline(always)]
	fn vcvttps2dq_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert eight packed single-precision floating-point values from `ymm2/mem` to eight packed signed doubleword values in `ymm1` using truncation.
	#[inline(always)]
	fn vcvttps2dq_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x5B);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn vcvttsd2si_Register32Bit_Any64BitMemory(&mut self, arg0: Register32Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn vcvttsd2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn vcvttsd2si_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one double-precision floating-point value from `xmm1/m64` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn vcvttsd2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn vcvttss2si_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed doubleword integer in `r32` using truncation.
	#[inline(always)]
	fn vcvttss2si_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn vcvttss2si_Register64Bit_Any32BitMemory(&mut self, arg0: Register64Bit, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert one single-precision floating-point value from `xmm1/m32` to one signed quadword integer in `r64` using truncation.
	#[inline(always)]
	fn vcvttss2si_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed double-precision floating-point values in `xmm2` by packed double-precision floating-point values in `xmm3/mem`.
	#[inline(always)]
	fn vdivpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed double-precision floating-point values in `xmm2` by packed double-precision floating-point values in `xmm3/mem`.
	#[inline(always)]
	fn vdivpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed double-precision floating-point values in `ymm2` by packed double-precision floating-point values in `ymm3/mem`.
	#[inline(always)]
	fn vdivpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed double-precision floating-point values in `ymm2` by packed double-precision floating-point values in `ymm3/mem`.
	#[inline(always)]
	fn vdivpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed single-precision floating-point values in `xmm2` by packed double-precision floating-point values in `xmm3/mem`.
	#[inline(always)]
	fn vdivps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed single-precision floating-point values in `xmm2` by packed double-precision floating-point values in `xmm3/mem`.
	#[inline(always)]
	fn vdivps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed single-precision floating-point values in `ymm2` by packed double-precision floating-point values in `ymm3/mem`.
	#[inline(always)]
	fn vdivps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide packed single-precision floating-point values in `ymm2` by packed double-precision floating-point values in `ymm3/mem`.
	#[inline(always)]
	fn vdivps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide low double-precision floating-point values in `xmm2` by low double-precision floating-point value in `xmm3/mem`.
	#[inline(always)]
	fn vdivsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide low double-precision floating-point values in `xmm2` by low double-precision floating-point value in `xmm3/mem`.
	#[inline(always)]
	fn vdivsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide low single-precision floating-point value in `xmm2` by low single-precision floating-point value in xmm3/m32.
	#[inline(always)]
	fn vdivss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Divide low single-precision floating-point value in `xmm2` by low single-precision floating-point value in xmm3/m32.
	#[inline(always)]
	fn vdivss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Selectively multiply packed double-precision floating-point values from `xmm2` with packed double-precision floating-point values from `xmm3`, selectively add and store the packed double-precision floating-point values to `xmm1`.
	#[inline(always)]
	fn vdppd_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x41);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Selectively multiply packed double-precision floating-point values from `xmm2` with packed double-precision floating-point values from `xmm3`, selectively add and store the packed double-precision floating-point values to `xmm1`.
	#[inline(always)]
	fn vdppd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x41);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` with packed single-precision floating-point values from `xmm2/mem`, selectively add and store to `xmm1`.
	#[inline(always)]
	fn vdpps_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` with packed single-precision floating-point values from `xmm2/mem`, selectively add and store to `xmm1`.
	#[inline(always)]
	fn vdpps_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm2` with packed single-precision floating-point values from `ymm3/mem`, selectively add pairs of elements and store to `ymm1`.
	#[inline(always)]
	fn vdpps_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm2` with packed single-precision floating-point values from `ymm3/mem`, selectively add pairs of elements and store to `ymm1`.
	#[inline(always)]
	fn vdpps_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) is 1 if segment specified with `r/m16` can be read.
	#[inline(always)]
	fn verr_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x00);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Zero Flag (ZF) is 1 if segment specified with `r/m16` can be read.
	#[inline(always)]
	fn verr_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x00);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Zero Flag (ZF) is 1 if segment specified with `r/m16` can be written.
	#[inline(always)]
	fn verw_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x00);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set Zero Flag (ZF) is 1 if segment specified with `r/m16` can be written.
	#[inline(always)]
	fn verw_Register16Bit(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0x00);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Extract 128 bits of packed floating-point values from `ymm2` and store results in `xmm1/mem`.
	#[inline(always)]
	fn vextractf128_Any128BitMemory_YMM_Immediate8Bit(&mut self, arg0: Any128BitMemory, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 128 bits of packed floating-point values from `ymm2` and store results in `xmm1/mem`.
	#[inline(always)]
	fn vextractf128_XMMRegister_YMM_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x19);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 128 bits of integer data from `ymm2` and store results in `xmm1/mem`.
	#[inline(always)]
	fn vextracti128_Any128BitMemory_YMM_Immediate8Bit(&mut self, arg0: Any128BitMemory, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 128 bits of integer data from `ymm2` and store results in `xmm1/mem`.
	#[inline(always)]
	fn vextracti128_XMMRegister_YMM_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract one single-precision floating-point value from `xmm1` at the offset specified by `imm8` and store the result in `reg` or `m32`.
	///
	/// Zero extend the results in 64-bit register if applicable.
	#[inline(always)]
	fn vextractps_Any32BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract one single-precision floating-point value from `xmm1` at the offset specified by `imm8` and store the result in `reg` or `m32`.
	///
	/// Zero extend the results in 64-bit register if applicable.
	#[inline(always)]
	fn vextractps_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x98);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x99);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x99);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x99);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd132ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x99);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`. add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd213ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmadd231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmadd231ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, add/subtract elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, add/subtract elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, add/subtract elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, add/subtract elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, add/subtract elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, add/subtract elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, add/subtract elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, add/subtract elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x96);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, add/subtract elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, add/subtract elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`. add/subtract elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`. add/subtract elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, add/subtract elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, add/subtract elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, add/subtract elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, add/subtract elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, add/subtract elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, add/subtract elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, add/subtract elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, add/subtract elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, add/subtract elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, add/subtract elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmaddsub231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, add/subtract elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, add/subtract elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmaddsub231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub132ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`. subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`. subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub213ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsub231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsub231ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, subtract/add elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, subtract/add elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, subtract/add elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, subtract/add elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, subtract/add elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, subtract/add elements in `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, subtract/add elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, subtract/add elements in `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x97);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, subtract/add elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, subtract/add elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, subtract/add elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, subtract/add elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, subtract/add elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, subtract/add elements in `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, subtract/add elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, subtract/add elements in `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xA7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, subtract/add elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, subtract/add elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, subtract/add elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, subtract/add elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, subtract/add elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, subtract/add elements in `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfmsubadd231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, subtract/add elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, subtract/add elements in `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfmsubadd231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xB7);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and add to `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and add to `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd132ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and add to `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and add to `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd213ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and add to `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmadd231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and add to `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmadd231ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub132pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub132pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub132ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm2/mem`, negate the multiplication result and subtract `ymm1` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub132ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x9F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm2/mem`, negate the multiplication result and subtract `xmm1` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub132ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x9F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub213pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub213pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub213ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm0` and `ymm1`, negate the multiplication result and subtract `ymm2/mem` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub213ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xAF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm0` and `xmm1`, negate the multiplication result and subtract `xmm2/mem` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub213ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xAF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231pd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231pd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub231pd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub231pd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231ps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231ps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub231ps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm1` and `ymm2/mem`, negate the multiplication result and subtract `ymm0` and put result in `ymm0`.
	#[inline(always)]
	fn vfnmsub231ps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231sd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar double-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231sd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0xBF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231ss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply scalar single-precision floating-point value from `xmm1` and `xmm2/mem`, negate the multiplication result and subtract `xmm0` and put result in `xmm0`.
	#[inline(always)]
	fn vfnmsub231ss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xBF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather double-precision FP values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vgatherdpd_XMMRegister_Any32BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x92);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather double-precision FP values from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vgatherdpd_YMM_Any32BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any32BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x92);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather single-precision FP values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vgatherdps_XMMRegister_Any32BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x92);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather single-precision FP values from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vgatherdps_YMM_Any32BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any32BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x92);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64x, gather double-precision FP values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vgatherqpd_XMMRegister_Any64BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x93);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64y, gather double-precision FP values from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vgatherqpd_YMM_Any64BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any64BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x93);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64x, gather single-precision FP values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vgatherqps_XMMRegister_Any64BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x93);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	fn vgatherqps_XMMRegister_Any64BitMemory_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x93);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed double-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhaddpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed double-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhaddpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed double-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhaddpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed double-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhaddpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed single-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhaddps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed single-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhaddps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed single-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhaddps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal add packed single-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhaddps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed double-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhsubpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed double-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhsubpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed double-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhsubpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed double-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhsubpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed single-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhsubps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed single-precision floating-point values from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vhsubps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed single-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhsubps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Horizontal subtract packed single-precision floating-point values from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vhsubps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x7D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm3/m128` into `ymm2` at the specified destination element specified by `imm8` and zero out destination elements in `ymm1` as indicated in `imm8`.
	#[inline(always)]
	fn vinsertf128_YMM_YMM_Any128BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm3/m128` into `ymm2` at the specified destination element specified by `imm8` and zero out destination elements in `ymm1` as indicated in `imm8`.
	#[inline(always)]
	fn vinsertf128_YMM_YMM_XMMRegister_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x18);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert 128-bits of integer data from `xmm3/mem` and the remaining values from `ymm2` into `ymm1`.
	#[inline(always)]
	fn vinserti128_YMM_YMM_Any128BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert 128-bits of integer data from `xmm3/mem` and the remaining values from `ymm2` into `ymm1`.
	#[inline(always)]
	fn vinserti128_YMM_YMM_XMMRegister_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm3/m32` and merge into `xmm2` at the specified destination element specified by `imm8` and zero out destination elements in `xmm1` as indicated in `imm8`.
	#[inline(always)]
	fn vinsertps_XMMRegister_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a single-precision floating-point value selected by `imm8` from `xmm3/m32` and merge into `xmm2` at the specified destination element specified by `imm8` and zero out destination elements in `xmm1` as indicated in `imm8`.
	#[inline(always)]
	fn vinsertps_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Load unaligned packed integer values from mem to `xmm1`.
	#[inline(always)]
	fn vlddqu_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Load unaligned packed integer values from mem to `ymm1`.
	#[inline(always)]
	fn vlddqu_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF0);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Load `MXCSR` register from `m32`.
	#[inline(always)]
	fn vldmxcsr_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, Register64Bit::RDX);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Selectively write bytes from `xmm1` to memory location using the byte mask in `xmm2`.
	///
	/// The default memory location is specified by `DS:DI`, `EDI` or `RDI`.
	#[inline(always)]
	fn vmaskmovdqu_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xF7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store packed double-precision values from `xmm2` using mask in `xmm1`.
	#[inline(always)]
	fn vmaskmovpd_Any128BitMemory_XMMRegister_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store packed double-precision values from `ymm2` using mask in `ymm1`.
	#[inline(always)]
	fn vmaskmovpd_Any256BitMemory_YMM_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x2F);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load packed double-precision values from `m128` using mask in `xmm2` and store in `xmm1`.
	#[inline(always)]
	fn vmaskmovpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load packed double-precision values from m256 using mask in `ymm2` and store in `ymm1`.
	#[inline(always)]
	fn vmaskmovpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store packed single-precision values from `xmm2` using mask in `xmm1`.
	#[inline(always)]
	fn vmaskmovps_Any128BitMemory_XMMRegister_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store packed single-precision values from `ymm2` using mask in `ymm1`.
	#[inline(always)]
	fn vmaskmovps_Any256BitMemory_YMM_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load packed single-precision values from `m128` using mask in `xmm2` and store in `xmm1`.
	#[inline(always)]
	fn vmaskmovps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load packed single-precision values from m256 using mask in `ymm2` and store in `ymm1`.
	#[inline(always)]
	fn vmaskmovps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum double-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vmaxpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum double-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vmaxpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum packed double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vmaxpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum packed double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vmaxpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum single-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vmaxps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum single-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vmaxps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum single double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vmaxps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum single double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vmaxps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum scalar double-precision floating-point value between `xmm3/mem`.4 and `xmm2`.
	#[inline(always)]
	fn vmaxsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum scalar double-precision floating-point value between `xmm3/mem`.4 and `xmm2`.
	#[inline(always)]
	fn vmaxsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum scalar single-precision floating-point value between `xmm3/mem`.2 and `xmm2`.
	#[inline(always)]
	fn vmaxss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the maximum scalar single-precision floating-point value between `xmm3/mem`.2 and `xmm2`.
	#[inline(always)]
	fn vmaxss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum double-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vminpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum double-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vminpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum packed double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vminpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum packed double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vminpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum single-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vminps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum single-precision floating-point values between `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vminps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum single double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vminps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum single double-precision floating-point values between `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vminps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum scalar double-precision floating-point value between `xmm3/mem4` and `xmm2`.
	#[inline(always)]
	fn vminsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum scalar double-precision floating-point value between `xmm3/mem4` and `xmm2`.
	#[inline(always)]
	fn vminsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum scalar single-precision floating-point value between `xmm3/mem2` and `xmm2`.
	#[inline(always)]
	fn vminss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the minimum scalar single-precision floating-point value between `xmm3/mem2` and `xmm2`.
	#[inline(always)]
	fn vminss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovapd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovapd_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovapd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovapd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovapd_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovapd_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovapd_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed double-precision floating-point values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovapd_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovaps_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovaps_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovaps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovaps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovaps_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovaps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovaps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed single-precision floating-point values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovaps_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move doubleword from `xmm1` register to `r/m32`.
	#[inline(always)]
	fn vmovd_Any32BitMemory_XMMRegister(&mut self, arg0: Any32BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move doubleword from `xmm1` register to `r/m32`.
	#[inline(always)]
	fn vmovd_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move doubleword from `r/m32` to `xmm1`.
	#[inline(always)]
	fn vmovd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move doubleword from `r/m32` to `xmm1`.
	#[inline(always)]
	fn vmovd_XMMRegister_Register32Bit(&mut self, arg0: XMMRegister, arg1: Register32Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move double-precision floating-point values from `xmm2/mem` and duplicate into `xmm1`.
	#[inline(always)]
	fn vmovddup_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move double-precision floating-point values from `xmm2/mem` and duplicate into `xmm1`.
	#[inline(always)]
	fn vmovddup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index double-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovddup_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index double-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovddup_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovdqa_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovdqa_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovdqa_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovdqa_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovdqa_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovdqa_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovdqa_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move aligned packed integer values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovdqa_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovdqu_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovdqu_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovdqu_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovdqu_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovdqu_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovdqu_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovdqu_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed integer values from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovdqu_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7F);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge two packed single-precision floating-point values from high quadword of xmm3 and low quadword of `xmm2`.
	#[inline(always)]
	fn vmovhlps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move double-precision floating-point values from high quadword of `xmm1` to `m64`.
	#[inline(always)]
	fn vmovhpd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge double-precision floating-point value from `m64` and the low quadword of `xmm1`.
	#[inline(always)]
	fn vmovhpd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move two packed single-precision floating-point values from high quadword of `xmm1`to `m64`.
	#[inline(always)]
	fn vmovhps_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge two packed single-precision floating-point values from `m64` and the low quadword of `xmm1`.
	#[inline(always)]
	fn vmovhps_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge two packed single-precision floating-point values from low quadword of xmm3 and low quadword of `xmm2`.
	#[inline(always)]
	fn vmovlhps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move double-precision floating-point values from low quadword of `xmm1` to `m64`.
	#[inline(always)]
	fn vmovlpd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge double-precision floating-point value from `m64` and the high quadword of `xmm1`.
	#[inline(always)]
	fn vmovlpd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move two packed single-precision floating-point values from low quadword of `xmm1` to `m64`.
	#[inline(always)]
	fn vmovlps_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x13);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge two packed single-precision floating-point values from `m64` and the high quadword of `xmm1`.
	#[inline(always)]
	fn vmovlps_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 2-bit sign mask from `xmm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskpd_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 4-bit sign mask from `ymm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskpd_Register32Bit_YMM(&mut self, arg0: Register32Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 2-bit sign mask from `xmm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskpd_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 4-bit sign mask from `ymm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskpd_Register64Bit_YMM(&mut self, arg0: Register64Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 4-bit sign mask from `xmm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskps_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 8-bit sign mask from `ymm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskps_Register32Bit_YMM(&mut self, arg0: Register32Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 4-bit sign mask from `xmm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskps_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract 8-bit sign mask from `ymm2` and store in register.
	///
	/// The upper bits of `r32` or `r64` are zeroed.
	#[inline(always)]
	fn vmovmskps_Register64Bit_YMM(&mut self, arg0: Register64Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x50);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed integer values in `xmm1` to `m128` using non-temporal hint.
	#[inline(always)]
	fn vmovntdq_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0xE7);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed integer values in `ymm1` to m256 using non-temporal hint.
	#[inline(always)]
	fn vmovntdq_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0xE7);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move double quadword from `m128` to `xmm` using non-temporal hint if WC memory type.
	#[inline(always)]
	fn vmovntdqa_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move 256-bit data from m256 to ymm using non-temporal hint if WC memory type.
	#[inline(always)]
	fn vmovntdqa_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2A);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed double-precision values in `xmm1` to `m128` using non-temporal hint.
	#[inline(always)]
	fn vmovntpd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed double-precision values in `ymm1` to m256 using non-temporal hint.
	#[inline(always)]
	fn vmovntpd_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed single-precision values `xmm1` to mem using non-temporal hint.
	#[inline(always)]
	fn vmovntps_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move packed single-precision values `ymm1` to mem using non-temporal hint.
	#[inline(always)]
	fn vmovntps_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `xmm1` register to `r/m64`.
	#[inline(always)]
	fn vmovq_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `xmm2` register to `xmm1/m64`.
	#[inline(always)]
	fn vmovq_Any64BitMemory_XMMRegister_REX_W(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0xD6);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `xmm1` register to `r/m64`.
	#[inline(always)]
	fn vmovq_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `r/m64` to `xmm1`.
	#[inline(always)]
	fn vmovq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Load quadword from `m64` to `xmm1`.
	#[inline(always)]
	fn vmovq_XMMRegister_Any64BitMemory_REX_W(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `r/m64` to `xmm1`.
	#[inline(always)]
	fn vmovq_XMMRegister_Register64Bit(&mut self, arg0: XMMRegister, arg1: Register64Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x6E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `xmm2` to `xmm1`.
	#[inline(always)]
	fn vmovq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x7E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move quadword from `xmm2` register to `xmm1/m64`.
	#[inline(always)]
	fn vmovq_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0xD6);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move scalar double-precision floating-point value from `xmm1` register to `m64`.
	#[inline(always)]
	fn vmovsd_Any64BitMemory_XMMRegister(&mut self, arg0: Any64BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Load scalar double-precision floating-point value from `m64` to `xmm1`.
	#[inline(always)]
	fn vmovsd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge scalar double-precision floating-point value from `xmm2` and xmm3 to `xmm1`.
	#[inline(always)]
	fn vmovsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	fn vmovsd_XMMRegister_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move odd index single-precision floating-point values from `xmm2/mem` and duplicate each element into `xmm1`.
	#[inline(always)]
	fn vmovshdup_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move odd index single-precision floating-point values from `xmm2/mem` and duplicate each element into `xmm1`.
	#[inline(always)]
	fn vmovshdup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move odd index single-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovshdup_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move odd index single-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovshdup_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index single-precision floating-point values from `xmm2/mem` and duplicate each element into `xmm1`.
	#[inline(always)]
	fn vmovsldup_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index single-precision floating-point values from `xmm2/mem` and duplicate each element into `xmm1`.
	#[inline(always)]
	fn vmovsldup_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index single-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovsldup_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move even index single-precision floating-point values from `ymm2/mem` and duplicate each element into `ymm1`.
	#[inline(always)]
	fn vmovsldup_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x12);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move scalar single-precision floating-point value from `xmm1` register to `m32`.
	#[inline(always)]
	fn vmovss_Any32BitMemory_XMMRegister(&mut self, arg0: Any32BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Load scalar single-precision floating-point value from `m32` to `xmm1`.
	#[inline(always)]
	fn vmovss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge scalar single-precision floating-point value from `xmm2` and xmm3 to `xmm1`.
	#[inline(always)]
	fn vmovss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	fn vmovss_XMMRegister_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovupd_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovupd_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovupd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovupd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovupd_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovupd_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovupd_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed double-precision floating-point from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovupd_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovups_Any128BitMemory_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovups_Any256BitMemory_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovups_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `xmm2/mem` to `xmm1`.
	#[inline(always)]
	fn vmovups_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `xmm1` to `xmm2/mem`.
	#[inline(always)]
	fn vmovups_XMMRegister_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovups_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `ymm2/mem` to `ymm1`.
	#[inline(always)]
	fn vmovups_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x10);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move unaligned packed single-precision floating-point from `ymm1` to `ymm2/mem`.
	#[inline(always)]
	fn vmovups_YMM_YMM_REX_W(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x11);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm2` and `xmm3/m128` and writes the results in `xmm1`.
	///
	/// Starting offsets within `xmm2` and `xmm3/m128` are determined by `imm8`.
	#[inline(always)]
	fn vmpsadbw_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x42);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm2` and `xmm3/m128` and writes the results in `xmm1`.
	///
	/// Starting offsets within `xmm2` and `xmm3/m128` are determined by `imm8`.
	#[inline(always)]
	fn vmpsadbw_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x42);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm2` and `ymm3/m128` and writes the results in `ymm1`.
	///
	/// Starting offsets within `ymm2` and `xmm3/m128` are determined by `imm8`.
	#[inline(always)]
	fn vmpsadbw_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x42);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in `xmm2` and `ymm3/m128` and writes the results in `ymm1`.
	///
	/// Starting offsets within `ymm2` and `xmm3/m128` are determined by `imm8`.
	#[inline(always)]
	fn vmpsadbw_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x42);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vmulpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vmulpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vmulpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed double-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vmulpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vmulps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `xmm3/mem` to `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vmulps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vmulps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed single-precision floating-point values from `ymm3/mem` to `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vmulps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the low double-precision floating-point value in `xmm3/mem4` by low double-precision floating-point value in `xmm2`.
	#[inline(always)]
	fn vmulsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the low double-precision floating-point value in `xmm3/mem4` by low double-precision floating-point value in `xmm2`.
	#[inline(always)]
	fn vmulsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the low single-precision floating-point value in `xmm3/mem` by the low single-precision floating-point value in `xmm2`.
	#[inline(always)]
	fn vmulss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the low single-precision floating-point value in `xmm3/mem` by the low single-precision floating-point value in `xmm2`.
	#[inline(always)]
	fn vmulss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vorpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vorpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vorpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vorpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vorps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vorps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vorps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical OR of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vorps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x56);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of bytes in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsb_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of bytes in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of bytes in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsb_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of bytes in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsb_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1C);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 32-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 32-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 32-bit integers in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsd_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 32-bit integers in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsd_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 16-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 16-bit integers in `xmm2/m128` and store *unsigned* result in `xmm1`.
	#[inline(always)]
	fn vpabsw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 16-bit integers in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsw_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compute the absolute value of 16-bit integers in `ymm2/m256` and store *unsigned* result in `ymm1`.
	#[inline(always)]
	fn vpabsw_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x1D);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 4 packed signed doubleword integers from `xmm2` and from `xmm3/m128` into 8 packed signed word integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn vpackssdw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 4 packed signed doubleword integers from `xmm2` and from `xmm3/m128` into 8 packed signed word integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn vpackssdw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 packed signed doubleword integers from `ymm2` and from `ymm3/m256` into 16 packed signed word integers in `ymm1` using signed saturation.
	#[inline(always)]
	fn vpackssdw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 packed signed doubleword integers from `ymm2` and from `ymm3/m256` into 16 packed signed word integers in `ymm1` using signed saturation.
	#[inline(always)]
	fn vpackssdw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 packed signed word integers from `xmm2` and from `xmm3/m128` into 16 packed signed byte integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn vpacksswb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 packed signed word integers from `xmm2` and from `xmm3/m128` into 16 packed signed byte integers in `xmm1` using signed saturation.
	#[inline(always)]
	fn vpacksswb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 16 packed signed word integers from `ymm2` and from `ymm3/m256` into 32 packed signed byte integers in `ymm1` using signed saturation.
	#[inline(always)]
	fn vpacksswb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 16 packed signed word integers from `ymm2` and from `ymm3/m256` into 32 packed signed byte integers in `ymm1` using signed saturation.
	#[inline(always)]
	fn vpacksswb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert 4 packed signed doubleword integers from `xmm2` and 4 packed signed doubleword integers from `xmm3/m128` into 8 packed unsigned word integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn vpackusdw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert 4 packed signed doubleword integers from `xmm2` and 4 packed signed doubleword integers from `xmm3/m128` into 8 packed unsigned word integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn vpackusdw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert 8 packed signed doubleword integers from `ymm2` and 8 packed signed doubleword integers from `ymm3/m128` into 16 packed unsigned word integers in `ymm1` using unsigned saturation.
	#[inline(always)]
	fn vpackusdw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Convert 8 packed signed doubleword integers from `ymm2` and 8 packed signed doubleword integers from `ymm3/m128` into 16 packed unsigned word integers in `ymm1` using unsigned saturation.
	#[inline(always)]
	fn vpackusdw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x2B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 signed word integers from `xmm2` and 8 signed word integers from `xmm3/m128` into 16 unsigned byte integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn vpackuswb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x67);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 8 signed word integers from `xmm2` and 8 signed word integers from `xmm3/m128` into 16 unsigned byte integers in `xmm1` using unsigned saturation.
	#[inline(always)]
	fn vpackuswb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x67);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 16 signed word integers from `ymm2` And 16 signed word integers from `ymm3/m256` into 32 unsigned byte integers in `ymm1` using unsigned saturation.
	#[inline(always)]
	fn vpackuswb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x67);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Converts 16 signed word integers from `ymm2` And 16 signed word integers from `ymm3/m256` into 32 unsigned byte integers in `ymm1` using unsigned saturation.
	#[inline(always)]
	fn vpackuswb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x67);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed byte integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed byte integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed byte integers from `ymm2` and `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed byte integers from `ymm2` and `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed doubleword integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed doubleword integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed doubleword integers from `ymm2`, `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed doubleword integers from `ymm2`, `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed quadword integers `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed quadword integers `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed quadword integers from `ymm2`. `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed quadword integers from `ymm2`. `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed byte integers from `xmm3/m128` and `xmm2` saturate the results.
	#[inline(always)]
	fn vpaddsb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed byte integers from `xmm3/m128` and `xmm2` saturate the results.
	#[inline(always)]
	fn vpaddsb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed byte integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddsb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed byte integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddsb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed word integers from `xmm3/m128` and `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xED);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed word integers from `xmm3/m128` and `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xED);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed word integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xED);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed signed word integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xED);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned byte integers from `xmm3/m128` to `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddusb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned byte integers from `xmm3/m128` to `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddusb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned byte integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddusb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned byte integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddusb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDC);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned word integers from `xmm3/m128` to `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddusw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned word integers from `xmm3/m128` to `xmm2` and saturate the results.
	#[inline(always)]
	fn vpaddusw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned word integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddusw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed unsigned word integers from `ymm2` and `ymm3/m256` and store the saturated results in `ymm1`.
	#[inline(always)]
	fn vpaddusw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed word integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed word integers from `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpaddw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed word integers from `ymm2`, `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add packed word integers from `ymm2`, `ymm3/m256` and store in `ymm1`.
	#[inline(always)]
	fn vpaddw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFD);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Concatenate `xmm2` and `xmm3/m128`, extract byte aligned result shifted to the right by constant value in `imm8` and result is stored in `xmm1`.
	#[inline(always)]
	fn vpalignr_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Concatenate `xmm2` and `xmm3/m128`, extract byte aligned result shifted to the right by constant value in `imm8` and result is stored in `xmm1`.
	#[inline(always)]
	fn vpalignr_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Concatenate pairs of 16 bytes in `ymm2` and `ymm3/m256` into 32-byte intermediate result, extract byte-aligned, 16-byte result shifted to the right by constant values in `imm8` from each intermediate result, and two 16-byte results are stored in `ymm1`.
	#[inline(always)]
	fn vpalignr_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Concatenate pairs of 16 bytes in `ymm2` and `ymm3/m256` into 32-byte intermediate result, extract byte-aligned, 16-byte result shifted to the right by constant values in `imm8` from each intermediate result, and two 16-byte results are stored in `ymm1`.
	#[inline(always)]
	fn vpalignr_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of `xmm3/m128` and `xmm`.
	#[inline(always)]
	fn vpand_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of `xmm3/m128` and `xmm`.
	#[inline(always)]
	fn vpand_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of `ymm2` and `ymm3/m256` and store result in `ymm1`.
	#[inline(always)]
	fn vpand_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND of `ymm2` and `ymm3/m256` and store result in `ymm1`.
	#[inline(always)]
	fn vpand_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND NOT of `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpandn_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND NOT of `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpandn_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND NOT of `ymm2` and `ymm3/m256` and store result in `ymm1`.
	#[inline(always)]
	fn vpandn_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise AND NOT of `ymm2` and `ymm3/m256` and store result in `ymm1`.
	#[inline(always)]
	fn vpandn_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned byte integers from `xmm3/m128` and `xmm2` with rounding.
	#[inline(always)]
	fn vpavgb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned byte integers from `xmm3/m128` and `xmm2` with rounding.
	#[inline(always)]
	fn vpavgb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned byte integers from `ymm2` and `ymm3/m256` with rounding and store to `ymm1`.
	#[inline(always)]
	fn vpavgb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned byte integers from `ymm2` and `ymm3/m256` with rounding and store to `ymm1`.
	#[inline(always)]
	fn vpavgb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE0);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned word integers from `xmm3/m128` and `xmm2` with rounding.
	#[inline(always)]
	fn vpavgw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned word integers from `xmm3/m128` and `xmm2` with rounding.
	#[inline(always)]
	fn vpavgw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned word integers from `ymm2`, `ymm3/m256` with rounding to `ymm1`.
	#[inline(always)]
	fn vpavgw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Average packed unsigned word integers from `ymm2`, `ymm3/m256` with rounding to `ymm1`.
	#[inline(always)]
	fn vpavgw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Select dwords from `xmm2` and `xmm3/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendd_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select dwords from `xmm2` and `xmm3/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select dwords from `ymm2` and `ymm3/m256` from mask specified in `imm8` and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendd_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select dwords from `ymm2` and `ymm3/m256` from mask specified in `imm8` and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendd_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select byte values from `xmm2` and `xmm3/m128` using mask bits in the specified mask register, `xmm4` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendvb_XMMRegister_XMMRegister_Any128BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Select byte values from `xmm2` and `xmm3/m128` using mask bits in the specified mask register, `xmm4` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendvb_XMMRegister_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Select byte values from `ymm2` and `ymm3/m256` from mask specified in the high bit of each byte in ymm4 and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendvb_YMM_YMM_Any256BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Select byte values from `ymm2` and `ymm3/m256` from mask specified in the high bit of each byte in ymm4 and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendvb_YMM_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x4C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		self.displacement_immediate_1(arg3);
	}

	/// Select words from `xmm2` and `xmm3/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendw_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select words from `xmm2` and `xmm3/m128` from mask specified in `imm8` and store the values into `xmm1`.
	#[inline(always)]
	fn vpblendw_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select words from `ymm2` and `ymm3/m256` from mask specified in `imm8` and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendw_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Select words from `ymm2` and `ymm3/m256` from mask specified in `imm8` and store the values into `ymm1`.
	#[inline(always)]
	fn vpblendw_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a byte integer in the source operand to sixteen locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastb_XMMRegister_Any8BitMemory(&mut self, arg0: XMMRegister, arg1: Any8BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x78);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a byte integer in the source operand to sixteen locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastb_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x78);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a byte integer in the source operand to thirty two locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastb_YMM_Any8BitMemory(&mut self, arg0: YMMRegister, arg1: Any8BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x78);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a byte integer in the source operand to thirty two locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastb_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x78);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a dword integer in the source operand to four locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a dword integer in the source operand to four locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a dword integer in the source operand to eight locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastd_YMM_Any32BitMemory(&mut self, arg0: YMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a dword integer in the source operand to eight locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x58);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a qword element in mem to two locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a qword element in mem to two locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a qword element in mem to four locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastq_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a qword element in mem to four locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x59);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a word integer in the source operand to eight locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastw_XMMRegister_Any16BitMemory(&mut self, arg0: XMMRegister, arg1: Any16BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x79);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a word integer in the source operand to eight locations in `xmm1`.
	#[inline(always)]
	fn vpbroadcastw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x79);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a word integer in the source operand to sixteen locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastw_YMM_Any16BitMemory(&mut self, arg0: YMMRegister, arg1: Any16BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x79);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Broadcast a word integer in the source operand to sixteen locations in `ymm1`.
	#[inline(always)]
	fn vpbroadcastw_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x79);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Carry-less multiplication of one quadword of `xmm2` by one quadword of `xmm3/m128`.
	///
	/// Stores the 128-bit result in `xmm1`.
	///
	/// The immediate is used to determine which quadwords of `xmm2` and `xmm3/m128` should be used.
	#[inline(always)]
	fn vpclmulqdq_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x44);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Carry-less multiplication of one quadword of `xmm2` by one quadword of `xmm3/m128`.
	///
	/// Stores the 128-bit result in `xmm1`.
	///
	/// The immediate is used to determine which quadwords of `xmm2` and `xmm3/m128` should be used.
	#[inline(always)]
	fn vpclmulqdq_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x44);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed bytes in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x74);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed bytes in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x74);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed bytes in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x74);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed bytes in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x74);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed doublewords in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x76);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed doublewords in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x76);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed doublewords in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x76);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed doublewords in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x76);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed quadwords in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed quadwords in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed quadwords in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed quadwords in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x29);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed words in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x75);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed words in `xmm3/m128` and `xmm2` for equality.
	#[inline(always)]
	fn vpcmpeqw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x75);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed words in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x75);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed words in `ymm3/m256` and `ymm2` for equality.
	#[inline(always)]
	fn vpcmpeqw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x75);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn vpcmpestri_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn vpcmpestri_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn vpcmpestrm_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn vpcmpestrm_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x64);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x64);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x64);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x64);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed doubleword integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x66);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed doubleword integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x66);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed doubleword integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x66);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed doubleword integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x66);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed qwords in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x37);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed qwords in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x37);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed qwords in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x37);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed qwords in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x37);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x65);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm2` and `xmm3/m128` for greater than.
	#[inline(always)]
	fn vpcmpgtw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x65);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x65);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `ymm2` and `ymm3/m256` for greater than.
	#[inline(always)]
	fn vpcmpgtw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x65);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn vpcmpistri_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in `ECX`.
	#[inline(always)]
	fn vpcmpistri_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x63);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating a Mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn vpcmpistrm_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Perform a packed comparison of string data with implicit lengths, generating a Mask, and storing the result in `XMM0`.
	#[inline(always)]
	fn vpcmpistrm_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute 128-bit floating-point fields in `ymm2` and `ymm3/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vperm2f128_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute 128-bit floating-point fields in `ymm2` and `ymm3/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vperm2f128_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute 128-bit integer data in `ymm2` and `ymm3/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vperm2i128_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute 128-bit integer data in `ymm2` and `ymm3/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vperm2i128_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute doublewords in `ymm3/m256` using indexes in `ymm2` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x36);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute doublewords in `ymm3/m256` using indexes in `ymm2` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x36);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `xmm2/mem` using controls from `imm8`.
	#[inline(always)]
	fn vpermilpd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `xmm2/mem` using controls from `imm8`.
	#[inline(always)]
	fn vpermilpd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `xmm2` using controls from `xmm3/mem` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `xmm2` using controls from `xmm3/mem` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `ymm2/mem` using controls from `imm8`.
	#[inline(always)]
	fn vpermilpd_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `ymm2/mem` using controls from `imm8`.
	#[inline(always)]
	fn vpermilpd_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `ymm2` using controls from `ymm3/mem` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point values in `ymm2` using controls from `ymm3/mem` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `xmm2/mem` using controls from `imm8` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `xmm2/mem` using controls from `imm8` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `xmm2` using controls from `xmm3/mem` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `xmm2` using controls from `xmm3/mem` and store result in `xmm1`.
	#[inline(always)]
	fn vpermilps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `ymm2/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilps_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `ymm2/mem` using controls from `imm8` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilps_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `ymm2` using controls from `ymm3/mem` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point values in `ymm2` using controls from `ymm3/mem` and store result in `ymm1`.
	#[inline(always)]
	fn vpermilps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point elements in `ymm2/m256` using indexes in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermpd_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute double-precision floating-point elements in `ymm2/m256` using indexes in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermpd_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point elements in `ymm3/m256` using indexes in `ymm2` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute single-precision floating-point elements in `ymm3/m256` using indexes in `ymm2` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute qwords in `ymm2/m256` using indexes in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermq_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Permute qwords in `ymm2/m256` using indexes in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpermq_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x1, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `reg` or `m8`.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrb_Any8BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `reg` or `m8`.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrb_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a byte integer value from `xmm2` at the source byte offset specified by `imm8` into `reg` or `m8`.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrb_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a dword integer value from `xmm2` at the source dword offset specified by `imm8` into `r32`/m32.
	#[inline(always)]
	fn vpextrd_Any32BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a dword integer value from `xmm2` at the source dword offset specified by `imm8` into `r32`/m32.
	#[inline(always)]
	fn vpextrd_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a qword integer value from `xmm2` at the source dword offset specified by `imm8` into `r64`/m64.
	#[inline(always)]
	fn vpextrq_Any64BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a qword integer value from `xmm2` at the source dword offset specified by `imm8` into `r64`/m64.
	#[inline(always)]
	fn vpextrq_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x1, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x16);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract a word integer value from `xmm2` at the source word offset specified by `imm8` into `reg` or `m16`.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrw_Any16BitMemory_XMMRegister_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract the word specified by `imm8` from `xmm1` and move it to `reg`, bits 15:0.
	///
	/// Zero-extend the result.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrw_Register32Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	fn vpextrw_Register32Bit_XMMRegister_Immediate8Bit_REX_W(&mut self, arg0: Register32Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Extract the word specified by `imm8` from `xmm1` and move it to `reg`, bits 15:0.
	///
	/// Zero-extend the result.
	///
	/// The upper bits of `r64/r32` is filled with zeros.
	#[inline(always)]
	fn vpextrw_Register64Bit_XMMRegister_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xC5);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	fn vpextrw_Register64Bit_XMMRegister_Immediate8Bit_REX_W(&mut self, arg0: Register64Bit, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg0, arg1);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg0, arg1);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather dword values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vpgatherdd_XMMRegister_Any32BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x90);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32y, gather dword from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vpgatherdd_YMM_Any32BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any32BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x90);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather qword values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vpgatherdq_XMMRegister_Any32BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any32BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x90);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using dword indices specified in vm32x, gather qword values from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vpgatherdq_YMM_Any32BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any32BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x90);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64x, gather dword values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vpgatherqd_XMMRegister_Any64BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x91);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	fn vpgatherqd_XMMRegister_Any64BitMemory_XMMRegister_REX_W(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg2, arg1, arg0);

		self.opcode_1(0x91);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64x, gather qword values from memory conditioned on mask specified by `xmm2`.
	///
	/// Conditionally gathered elements are merged into `xmm1`.
	#[inline(always)]
	fn vpgatherqq_XMMRegister_Any64BitMemory_XMMRegister(&mut self, arg0: XMMRegister, arg1: Any64BitMemory, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x91);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Using qword indices specified in vm64y, gather qword values from memory conditioned on mask specified by `ymm2`.
	///
	/// Conditionally gathered elements are merged into `ymm1`.
	#[inline(always)]
	fn vpgatherqq_YMM_Any64BitMemory_YMM(&mut self, arg0: YMMRegister, arg1: Any64BitMemory, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg2, arg1, arg0);

		self.opcode_1(0x91);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 32-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphaddd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 32-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphaddd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 32-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphaddd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 32-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphaddd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x02);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn vphaddsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn vphaddsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `ymm1`.
	#[inline(always)]
	fn vphaddsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack saturated integers to `ymm1`.
	#[inline(always)]
	fn vphaddsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x03);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphaddw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphaddw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphaddw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Add 16-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphaddw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x01);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Find the minimum unsigned word in `xmm2/m128` and place its value in the low word of `xmm1` and its index in the second-lowest word of `xmm1`.
	#[inline(always)]
	fn vphminposuw_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Find the minimum unsigned word in `xmm2/m128` and place its value in the low word of `xmm1` and its index in the second-lowest word of `xmm1`.
	#[inline(always)]
	fn vphminposuw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x41);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphsubd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphsubd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphsubd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 32-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphsubd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x06);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn vphsubsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x07);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `xmm1`.
	#[inline(always)]
	fn vphsubsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x07);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `ymm1`.
	#[inline(always)]
	fn vphsubsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x07);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integer horizontally, pack saturated integers to `ymm1`.
	#[inline(always)]
	fn vphsubsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x07);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphsubw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `xmm1`.
	#[inline(always)]
	fn vphsubw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphsubw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract 16-bit signed integers horizontally, pack to `ymm1`.
	#[inline(always)]
	fn vphsubw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x05);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge a byte integer value from `r32`/m8 and rest from `xmm2` into `xmm1` at the byte offset in `imm8`.
	#[inline(always)]
	fn vpinsrb_XMMRegister_XMMRegister_Any8BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any8BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Merge a byte integer value from `r32`/m8 and rest from `xmm2` into `xmm1` at the byte offset in `imm8`.
	#[inline(always)]
	fn vpinsrb_XMMRegister_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register32Bit, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a dword integer value from `r32`/m32 and rest from `xmm2` into `xmm1` at the dword offset in `imm8`.
	#[inline(always)]
	fn vpinsrd_XMMRegister_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a dword integer value from `r32`/m32 and rest from `xmm2` into `xmm1` at the dword offset in `imm8`.
	#[inline(always)]
	fn vpinsrd_XMMRegister_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register32Bit, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a qword integer value from `r64`/m64 and rest from `xmm2` into `xmm1` at the qword offset in `imm8`.
	#[inline(always)]
	fn vpinsrq_XMMRegister_XMMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a qword integer value from `r64`/m64 and rest from `xmm2` into `xmm1` at the qword offset in `imm8`.
	#[inline(always)]
	fn vpinsrq_XMMRegister_XMMRegister_Register64Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register64Bit, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a word integer value from `r32/m16` and rest from `xmm2` into `xmm1` at the word offset in `imm8`.
	#[inline(always)]
	fn vpinsrw_XMMRegister_XMMRegister_Any16BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any16BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC4);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Insert a word integer value from `r32/m16` and rest from `xmm2` into `xmm1` at the word offset in `imm8`.
	#[inline(always)]
	fn vpinsrw_XMMRegister_XMMRegister_Register32Bit_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Register32Bit, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC4);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `xmm1`.
	#[inline(always)]
	fn vpmaddubsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `xmm1`.
	#[inline(always)]
	fn vpmaddubsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `ymm1`.
	#[inline(always)]
	fn vpmaddubsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to `ymm1`.
	#[inline(always)]
	fn vpmaddubsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x04);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed word integers in `xmm2` by the packed word integers in `xmm3/m128`, add adjacent doubleword results, and store in `xmm1`.
	#[inline(always)]
	fn vpmaddwd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed word integers in `xmm2` by the packed word integers in `xmm3/m128`, add adjacent doubleword results, and store in `xmm1`.
	#[inline(always)]
	fn vpmaddwd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed word integers in `ymm2` by the packed word integers in `ymm3/m256`, add adjacent doubleword results, and store in `ymm1`.
	#[inline(always)]
	fn vpmaddwd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed word integers in `ymm2` by the packed word integers in `ymm3/m256`, add adjacent doubleword results, and store in `ymm1`.
	#[inline(always)]
	fn vpmaddwd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store dword values from `xmm2` using mask in `xmm1`.
	#[inline(always)]
	fn vpmaskmovd_Any128BitMemory_XMMRegister_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store dword values from `ymm2` using mask in `ymm1`.
	#[inline(always)]
	fn vpmaskmovd_Any256BitMemory_YMM_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg0, arg2);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load dword values from `m128` using mask in `xmm2` and store in `xmm1`.
	#[inline(always)]
	fn vpmaskmovd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load dword values from m256 using mask in `ymm2` and store in `ymm1`.
	#[inline(always)]
	fn vpmaskmovd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store qword values from `xmm2` using mask in `xmm1`.
	#[inline(always)]
	fn vpmaskmovq_Any128BitMemory_XMMRegister_XMMRegister(&mut self, arg0: Any128BitMemory, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg0, arg2);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally store qword values from `ymm2` using mask in `ymm1`.
	#[inline(always)]
	fn vpmaskmovq_Any256BitMemory_YMM_YMM(&mut self, arg0: Any256BitMemory, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg0, arg2);

		self.opcode_1(0x8E);

		self.mod_rm_sib(arg0, arg2);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load qword values from `m128` using mask in `xmm2` and store in `xmm1`.
	#[inline(always)]
	fn vpmaskmovq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Conditionally load qword values from m256 using mask in `ymm2` and store in `ymm1`.
	#[inline(always)]
	fn vpmaskmovq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x8C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m128` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m128` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `ymm2` and `ymm3/m128` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `ymm2` and `ymm3/m128` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm3/m128` and `xmm2` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm3/m128` and `xmm2` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `ymm3/m128` and `ymm2` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `ymm3/m128` and `ymm2` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxub_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxub_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `ymm2` and `ymm3/m256` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxub_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `ymm2` and `ymm3/m256` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxub_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDE);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxud_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `xmm2` and `xmm3/m128` and store packed maximum values in `xmm1`.
	#[inline(always)]
	fn vpmaxud_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `ymm2` and `ymm3/m256` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxud_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `ymm2` and `ymm3/m256` and store packed maximum values in `ymm1`.
	#[inline(always)]
	fn vpmaxud_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3F);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `xmm3/m128` and `xmm2` and store maximum packed values in `xmm1`.
	#[inline(always)]
	fn vpmaxuw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `xmm3/m128` and `xmm2` and store maximum packed values in `xmm1`.
	#[inline(always)]
	fn vpmaxuw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `ymm3/m256` and `ymm2` and store maximum packed values in `ymm1`.
	#[inline(always)]
	fn vpmaxuw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `ymm3/m256` and `ymm2` and store maximum packed values in `ymm1`.
	#[inline(always)]
	fn vpmaxuw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3E);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminsb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed byte integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminsb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x38);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `ymm2` and `ymm3/m128` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminsd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed dword integers in `ymm2` and `ymm3/m128` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminsd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x39);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm3/m128` and `xmm2` and return packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed signed word integers in `xmm3/m128` and `xmm2` and return packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminub_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminub_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminub_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned byte integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminub_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xDA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminud_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `xmm2` and `xmm3/m128` and store packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminud_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminud_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned dword integers in `ymm2` and `ymm3/m256` and store packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminud_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `xmm3/m128` and `xmm2` and return packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminuw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `xmm3/m128` and `xmm2` and return packed minimum values in `xmm1`.
	#[inline(always)]
	fn vpminuw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `ymm3/m256` and `ymm2` and return packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminuw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare packed unsigned word integers in `ymm3/m256` and `ymm2` and return packed minimum values in `ymm1`.
	#[inline(always)]
	fn vpminuw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x3A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move a byte mask of `xmm1` to register.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn vpmovmskb_Register32Bit_XMMRegister(&mut self, arg0: Register32Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move a 32-bit mask of `ymm1` to register.
	///
	/// The upper bits of `r64` are filled with zeros.
	#[inline(always)]
	fn vpmovmskb_Register32Bit_YMM(&mut self, arg0: Register32Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move a byte mask of `xmm1` to register.
	///
	/// The upper bits of `r32` or `r64` are filled with zeros.
	#[inline(always)]
	fn vpmovmskb_Register64Bit_XMMRegister(&mut self, arg0: Register64Bit, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Move a 32-bit mask of `ymm1` to register.
	///
	/// The upper bits of `r64` are filled with zeros.
	#[inline(always)]
	fn vpmovmskb_Register64Bit_YMM(&mut self, arg0: Register64Bit, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0xD7);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbd_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x21);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbq_XMMRegister_Any16BitMemory(&mut self, arg0: XMMRegister, arg1: Any16BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbq_YMM_Any32BitMemory(&mut self, arg0: YMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x22);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbw_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 16 packed 8-bit integers in `xmm2/m128` to 16 packed 16-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbw_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 16 packed 8-bit integers in `xmm2/m128` to 16 packed 16-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxbw_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x20);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxdq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 32-bit integers in the low 16 bytes of `xmm2/m128` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxdq_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 32-bit integers in the low 16 bytes of `xmm2/m128` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxdq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x25);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxwd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 16-bit integers in the low 16 bytes of `xmm2/m128` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxwd_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 8 packed 16-bit integers in the low 16 bytes of `xmm2/m128` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxwd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x23);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxwq_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovsxwq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxwq_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Sign extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovsxwq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x24);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbd_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbd_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbq_XMMRegister_Any16BitMemory(&mut self, arg0: XMMRegister, arg1: Any16BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 8-bit integers in the low 2 bytes of `xmm2`.m16 to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbq_YMM_Any32BitMemory(&mut self, arg0: YMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 8-bit integers in the low 4 bytes of `xmm2/m32` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbw_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 8-bit integers in the low 8 bytes of `xmm2/m64` to 8 packed 16-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxbw_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 16 packed 8-bit integers in the low 16 bytes of `xmm2/m128` to 16 packed 16-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbw_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 16 packed 8-bit integers in the low 16 bytes of `xmm2/m128` to 16 packed 16-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxbw_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxdq_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 32-bit integers in the low 8 bytes of `xmm2/m64` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxdq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 32-bit integers in the low 16 bytes of `xmm2/m128` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxdq_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 32-bit integers in the low 16 bytes of `xmm2/m128` to 4 packed 64-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxdq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x35);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 32-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 16-bit integers in the low 16 bytes of `xmm2/m128` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxwd_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 8 packed 16-bit integers in the low 16 bytes of `xmm2/m128` to 8 packed 32-bit integers in `ymm1`.
	#[inline(always)]
	fn vpmovzxwd_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwq_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 2 packed 16-bit integers in the low 4 bytes of `xmm2/m32` to 2 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwq_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwq_YMM_Any64BitMemory(&mut self, arg0: YMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero extend 4 packed 16-bit integers in the low 8 bytes of `xmm2/m64` to 4 packed 64-bit integers in `xmm1`.
	#[inline(always)]
	fn vpmovzxwq_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x34);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed signed doubleword integers in `xmm2` by packed signed doubleword integers in `xmm3/m128` and store the quadword results in `xmm1`.
	#[inline(always)]
	fn vpmuldq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed signed doubleword integers in `xmm2` by packed signed doubleword integers in `xmm3/m128` and store the quadword results in `xmm1`.
	#[inline(always)]
	fn vpmuldq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed signed doubleword integers in `ymm2` by packed signed doubleword integers in `ymm3/m256`, and store the quadword results in `ymm1`.
	#[inline(always)]
	fn vpmuldq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed signed doubleword integers in `ymm2` by packed signed doubleword integers in `ymm3/m256`, and store the quadword results in `ymm1`.
	#[inline(always)]
	fn vpmuldq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x28);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `xmm1`.
	#[inline(always)]
	fn vpmulhrsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `xmm1`.
	#[inline(always)]
	fn vpmulhrsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `ymm1`.
	#[inline(always)]
	fn vpmulhrsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to `ymm1`.
	#[inline(always)]
	fn vpmulhrsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed unsigned word integers in `xmm2` and `xmm3/m128` and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn vpmulhuw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed unsigned word integers in `xmm2` and `xmm3/m128` and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn vpmulhuw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed unsigned word integers in `ymm2` and `ymm3/m256`, and store the high 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmulhuw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed unsigned word integers in `ymm2` and `ymm3/m256`, and store the high 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmulhuw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `xmm2` and `xmm3/m128` and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn vpmulhw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `xmm2` and `xmm3/m128` and store the high 16 bits of the results in `xmm1`.
	#[inline(always)]
	fn vpmulhw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `ymm2` and `ymm3/m256`, and store the high 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmulhw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `ymm2` and `ymm3/m256`, and store the high 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmulhw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `xmm2` and `xmm3/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn vpmulld_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `xmm2` and `xmm3/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn vpmulld_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `ymm2` and `ymm3/m256` and store the low 32 bits of each product in `ymm1`.
	#[inline(always)]
	fn vpmulld_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `ymm2` and `ymm3/m256` and store the low 32 bits of each product in `ymm1`.
	#[inline(always)]
	fn vpmulld_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x40);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `xmm2` and `xmm3/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn vpmullw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed dword signed integers in `xmm2` and `xmm3/m128` and store the low 32 bits of each product in `xmm1`.
	#[inline(always)]
	fn vpmullw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `ymm2` and `ymm3/m256`, and store the low 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmullw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply the packed signed word integers in `ymm2` and `ymm3/m256`, and store the low 16 bits of the results in `ymm1`.
	#[inline(always)]
	fn vpmullw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD5);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed unsigned doubleword integers in `xmm2` by packed unsigned doubleword integers in `xmm3/m128` and store the quadword results in `xmm1`.
	#[inline(always)]
	fn vpmuludq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed unsigned doubleword integers in `xmm2` by packed unsigned doubleword integers in `xmm3/m128` and store the quadword results in `xmm1`.
	#[inline(always)]
	fn vpmuludq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed unsigned doubleword integers in `ymm2` by packed unsigned doubleword integers in `ymm3/m256`, and store the quadword results in `ymm1`.
	#[inline(always)]
	fn vpmuludq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Multiply packed unsigned doubleword integers in `ymm2` by packed unsigned doubleword integers in `ymm3/m256`, and store the quadword results in `ymm1`.
	#[inline(always)]
	fn vpmuludq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF4);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm3`.
	#[inline(always)]
	fn vpor_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise OR of `xmm2/m128` and `xmm3`.
	#[inline(always)]
	fn vpor_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise OR of `ymm2/m256` and `ymm3`.
	#[inline(always)]
	fn vpor_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise OR of `ymm2/m256` and `ymm3`.
	#[inline(always)]
	fn vpor_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and `xmm2`.
	///
	/// The 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
	#[inline(always)]
	fn vpsadbw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and `xmm2`.
	///
	/// The 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
	#[inline(always)]
	fn vpsadbw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `ymm3/m256` and `ymm2`.
	///
	/// Then each consecutive 8 differences are summed separately to produce four unsigned word integer results.
	#[inline(always)]
	fn vpsadbw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the absolute differences of the packed unsigned byte integers from `ymm3/m256` and `ymm2`.
	///
	/// Then each consecutive 8 differences are summed separately to produce four unsigned word integer results.
	#[inline(always)]
	fn vpsadbw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF6);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle bytes in `xmm2` according to contents of `xmm3/m128`.
	#[inline(always)]
	fn vpshufb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle bytes in `xmm2` according to contents of `xmm3/m128`.
	#[inline(always)]
	fn vpshufb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle bytes in `ymm2` according to contents of `ymm3/m256`.
	#[inline(always)]
	fn vpshufb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle bytes in `ymm2` according to contents of `ymm3/m256`.
	#[inline(always)]
	fn vpshufb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x00);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the doublewords in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshufd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the doublewords in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshufd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the doublewords in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshufd_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the doublewords in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshufd_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the high words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshufhw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the high words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshufhw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the high words in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshufhw_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the high words in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshufhw_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x2, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the low words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshuflw_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the low words in `xmm2/m128` based on the encoding in `imm8` and store the result in `xmm1`.
	#[inline(always)]
	fn vpshuflw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the low words in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshuflw_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle the low words in `ymm2/m256` based on the encoding in `imm8` and store the result in `ymm1`.
	#[inline(always)]
	fn vpshuflw_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x3, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x70);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed byte integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed byte integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed doubleword integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed doubleword integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed word integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Negate/zero/preserve packed word integers in `xmm2` depending on the corresponding sign in `xmm3/m128`.
	#[inline(always)]
	fn vpsignw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpslld_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `xmm2` left by `imm8` bytes while shifting in zero-signed and store result in `xmm1`.
	#[inline(always)]
	fn vpslldq_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RDI);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RDI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `ymm2` left by `imm8` bytes while shifting in zero-signed and store result in `ymm1`.
	#[inline(always)]
	fn vpslldq_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RDI);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RDI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllq_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` left by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` left by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` left by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` left by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `xmm2` left by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `xmm2` left by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `ymm2` left by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `ymm2` left by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllvq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x47);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` left by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RSI);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RSI);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` left by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsllw_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RSP);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RSP);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RSP);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RSP);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsrad_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in the sign bits.
	#[inline(always)]
	fn vpsravd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in the sign bits.
	#[inline(always)]
	fn vpsravd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in the sign bits.
	#[inline(always)]
	fn vpsravd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in the sign bits.
	#[inline(always)]
	fn vpsravd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x46);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RSP);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RSP);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by `imm8` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RSP);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RSP);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by amount specified in `xmm3/m128` while shifting in sign bits.
	#[inline(always)]
	fn vpsraw_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x72);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift doublewords in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrld_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD2);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `xmm2` right by `imm8` bytes while shifting in zero-signed.
	#[inline(always)]
	fn vpsrldq_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift `ymm1` right by `imm8` bytes while shifting in zero-signed.
	#[inline(always)]
	fn vpsrldq_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RBX);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RBX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x73);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift quadwords in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlq_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD3);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in doublewords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `xmm2` right by amount specified in the corresponding element of `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift bits in quadwords in `ymm2` right by amount specified in the corresponding element of `ymm3/m256` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlvq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x1, arg1, arg2, arg0);

		self.opcode_1(0x45);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `xmm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by `imm8` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg0, arg1, Register64Bit::RDX);

		self.opcode_1(0x71);

		self.mod_rm_sib(arg1, Register64Bit::RDX);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_YMM_YMM_Any128BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shift words in `ymm2` right by amount specified in `xmm3/m128` while shifting in zero-signed.
	#[inline(always)]
	fn vpsrlw_YMM_YMM_XMMRegister(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD1);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed byte integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed byte integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed byte integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed byte integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed doubleword integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed doubleword integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed doubleword integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed doubleword integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFA);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed quadword integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed quadword integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed quadword integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed quadword integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xFB);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed byte integers in `xmm3/m128` from packed signed byte integers in `xmm2` and saturate results.
	#[inline(always)]
	fn vpsubsb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed byte integers in `xmm3/m128` from packed signed byte integers in `xmm2` and saturate results.
	#[inline(always)]
	fn vpsubsb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed byte integers in `ymm3/m256` from packed signed byte integers in `ymm2` and saturate results.
	#[inline(always)]
	fn vpsubsb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed byte integers in `ymm3/m256` from packed signed byte integers in `ymm2` and saturate results.
	#[inline(always)]
	fn vpsubsb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed word integers in `xmm3/m128` from packed signed word integers in `xmm2` and saturate results.
	#[inline(always)]
	fn vpsubsw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed word integers in `xmm3/m128` from packed signed word integers in `xmm2` and saturate results.
	#[inline(always)]
	fn vpsubsw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed word integers in `ymm3/m256` from packed signed word integers in `ymm2` and saturate results.
	#[inline(always)]
	fn vpsubsw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed signed word integers in `ymm3/m256` from packed signed word integers in `ymm2` and saturate results.
	#[inline(always)]
	fn vpsubsw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xE9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned byte integers in `xmm3/m128` from packed unsigned byte integers in `xmm2` and saturate result.
	#[inline(always)]
	fn vpsubusb_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned byte integers in `xmm3/m128` from packed unsigned byte integers in `xmm2` and saturate result.
	#[inline(always)]
	fn vpsubusb_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned byte integers in `ymm3/m256` from packed unsigned byte integers in `ymm2` and saturate result.
	#[inline(always)]
	fn vpsubusb_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned byte integers in `ymm3/m256` from packed unsigned byte integers in `ymm2` and saturate result.
	#[inline(always)]
	fn vpsubusb_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD8);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned word integers in `xmm3/m128` from packed unsigned word integers in `xmm2` and saturate result.
	#[inline(always)]
	fn vpsubusw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned word integers in `xmm3/m128` from packed unsigned word integers in `xmm2` and saturate result.
	#[inline(always)]
	fn vpsubusw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned word integers in `ymm3/m256` from packed unsigned word integers in `ymm2` and saturate result.
	#[inline(always)]
	fn vpsubusw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed unsigned word integers in `ymm3/m256` from packed unsigned word integers in `ymm2` and saturate result.
	#[inline(always)]
	fn vpsubusw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xD9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed word integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed word integers in `xmm3/m128` from `xmm2`.
	#[inline(always)]
	fn vpsubw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed word integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed word integers in `ymm3/m256` from `ymm2`.
	#[inline(always)]
	fn vpsubw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xF9);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on bitwise AND and ANDN of sources.
	#[inline(always)]
	fn vptest_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on bitwise AND and ANDN of sources.
	#[inline(always)]
	fn vptest_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on bitwise AND and ANDN of sources.
	#[inline(always)]
	fn vptest_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on bitwise AND and ANDN of sources.
	#[inline(always)]
	fn vptest_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x17);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order bytes from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhbw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x68);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order bytes from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhbw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x68);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order bytes from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhbw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x68);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order bytes from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhbw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x68);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order doublewords from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhdq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order doublewords from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhdq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order doublewords from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhdq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order doublewords from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhdq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6A);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order quadword from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhqdq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order quadword from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhqdq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order quadword from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhqdq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order quadword from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhqdq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6D);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order words from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhwd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order words from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckhwd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order words from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhwd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave high-order words from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckhwd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x69);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order bytes from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklbw_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order bytes from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklbw_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order bytes from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklbw_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order bytes from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklbw_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x60);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order doublewords from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckldq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order doublewords from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpckldq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order doublewords from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckldq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order doublewords from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpckldq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x62);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order quadword from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklqdq_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order quadword from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklqdq_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order quadword from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklqdq_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order quadword from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklqdq_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x6C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order words from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklwd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order words from `xmm2` and `xmm3/m128` into `xmm1`.
	#[inline(always)]
	fn vpunpcklwd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order words from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklwd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Interleave low-order words from `ymm2` and `ymm3/m256` into `ymm1`.
	#[inline(always)]
	fn vpunpcklwd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x61);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise XOR of `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpxor_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise XOR of `xmm3/m128` and `xmm2`.
	#[inline(always)]
	fn vpxor_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise XOR of `ymm3/m256` and `ymm2`.
	#[inline(always)]
	fn vpxor_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Bitwise XOR of `ymm3/m256` and `ymm2`.
	#[inline(always)]
	fn vpxor_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xEF);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of packed single-precision values in `xmm2/mem` and stores the results in `xmm1`.
	#[inline(always)]
	fn vrcpps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of packed single-precision values in `xmm2/mem` and stores the results in `xmm1`.
	#[inline(always)]
	fn vrcpps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of packed single-precision values in `ymm2/mem` and stores the results in `ymm1`.
	#[inline(always)]
	fn vrcpps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of packed single-precision values in `ymm2/mem` and stores the results in `ymm1`.
	#[inline(always)]
	fn vrcpps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocal of the scalar single-precision floating-point value in `xmm3/m32` and stores the result in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vrcpss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocal of the scalar single-precision floating-point value in `xmm3/m32` and stores the result in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vrcpss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x53);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed double-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundpd_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed double-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundpd_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed double-precision floating-point values in `ymm2/m256` and place the result in `ymm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundpd_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed double-precision floating-point values in `ymm2/m256` and place the result in `ymm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundpd_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x09);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed single-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundps_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: Any128BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed single-precision floating-point values in `xmm2/m128` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundps_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed single-precision floating-point values in `ymm2/m256` and place the result in `ymm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundps_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: Any256BitMemory, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round packed single-precision floating-point values in `ymm2/m256` and place the result in `ymm1`.
	///
	/// The rounding mode is determined by `imm8`.
	#[inline(always)]
	fn vroundps_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x08);

		self.mod_rm_sib(arg1, arg0);

		self.displacement_immediate_1(arg2);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round the low packed double-precision floating-point value in `xmm3/m64` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	///
	/// Upper packed double-precision floating-point value (bits `[127:64]`) from `xmm2` is copied to `xmm1` bits `[127:64]`.
	#[inline(always)]
	fn vroundsd_XMMRegister_XMMRegister_Any64BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round the low packed double-precision floating-point value in `xmm3/m64` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	///
	/// Upper packed double-precision floating-point value (bits `[127:64]`) from `xmm2` is copied to `xmm1` bits `[127:64]`.
	#[inline(always)]
	fn vroundsd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0B);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round the low packed single-precision floating-point value in `xmm3/m32` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	///
	/// Also, upper packed single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vroundss_XMMRegister_XMMRegister_Any32BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Round the low packed single-precision floating-point value in `xmm3/m32` and place the result in `xmm1`.
	///
	/// The rounding mode is determined by `imm8`.
	///
	/// Also, upper packed single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vroundss_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x03, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x0A);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of the square roots of packed single-precision values in `xmm2/mem` and stores the results in `xmm1`.
	#[inline(always)]
	fn vrsqrtps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of the square roots of packed single-precision values in `xmm2/mem` and stores the results in `xmm1`.
	#[inline(always)]
	fn vrsqrtps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of the square roots of packed single-precision values in `ymm2/mem` and stores the results in `ymm1`.
	#[inline(always)]
	fn vrsqrtps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocals of the square roots of packed single-precision values in `ymm2/mem` and stores the results in `ymm1`.
	#[inline(always)]
	fn vrsqrtps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocal of the square root of the low single-precision floating-point value in `xmm3/m32` and stores the results in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vrsqrtss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes the approximate reciprocal of the square root of the low single-precision floating-point value in `xmm3/m32` and stores the results in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1``[127:32]`.
	#[inline(always)]
	fn vrsqrtss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x52);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed double-precision floating-point values selected by `imm8` from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vshufpd_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed double-precision floating-point values selected by `imm8` from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vshufpd_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed double-precision floating-point values selected by `imm8` from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vshufpd_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed double-precision floating-point values selected by `imm8` from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vshufpd_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed single-precision floating-point values selected by `imm8` from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vshufps_XMMRegister_XMMRegister_Any128BitMemory_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed single-precision floating-point values selected by `imm8` from `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vshufps_XMMRegister_XMMRegister_XMMRegister_Immediate8Bit(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed single-precision floating-point values selected by `imm8` from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vshufps_YMM_YMM_Any256BitMemory_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Shuffle Packed single-precision floating-point values selected by `imm8` from `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vshufps_YMM_YMM_YMM_Immediate8Bit(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister, arg3: Immediate8Bit)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0xC6);

		self.mod_rm_sib(arg2, arg0);

		self.displacement_immediate_1(arg3);

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed double-precision floating-point values in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vsqrtpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed double-precision floating-point values in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vsqrtpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed double-precision floating-point values in `ymm2/m256` and stores the result in `ymm1`.
	#[inline(always)]
	fn vsqrtpd_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed double-precision floating-point values in `ymm2/m256` and stores the result in `ymm1`.
	#[inline(always)]
	fn vsqrtpd_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed single-precision floating-point values in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vsqrtps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed single-precision floating-point values in `xmm2/m128` and stores the result in `xmm1`.
	#[inline(always)]
	fn vsqrtps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed single-precision floating-point values in `ymm2/m256` and stores the result in `ymm1`.
	#[inline(always)]
	fn vsqrtps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes Square Roots of the packed single-precision floating-point values in `ymm2/m256` and stores the result in `ymm1`.
	#[inline(always)]
	fn vsqrtps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes square root of the low double-precision floating-point value in `xmm3/m64` and stores the results in `xmm2`.
	///
	/// Also, upper double-precision floating-point value (bits `[127:64]`) from `xmm2` is copied to `xmm1` bits `[127:64]`.
	#[inline(always)]
	fn vsqrtsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes square root of the low double-precision floating-point value in `xmm3/m64` and stores the results in `xmm2`.
	///
	/// Also, upper double-precision floating-point value (bits `[127:64]`) from `xmm2` is copied to `xmm1` bits `[127:64]`.
	#[inline(always)]
	fn vsqrtsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes square root of the low single-precision floating-point value in `xmm3/m32` and stores the results in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vsqrtss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Computes square root of the low single-precision floating-point value in `xmm3/m32` and stores the results in `xmm1`.
	///
	/// Also, upper single-precision floating-point values (bits `[127:32]`) from `xmm2` are copied to `xmm1` bits `[127:32]`.
	#[inline(always)]
	fn vsqrtss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x51);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Store contents of `MXCSR` register to `m32`.
	#[inline(always)]
	fn vstmxcsr_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg0);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg0);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg0, Register64Bit::RBX);

		self.opcode_1(0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed double-precision floating-point values in `xmm3/mem` from `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vsubpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed double-precision floating-point values in `xmm3/mem` from `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vsubpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed double-precision floating-point values in `ymm3/mem` from `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vsubpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed double-precision floating-point values in `ymm3/mem` from `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vsubpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed single-precision floating-point values in `xmm3/mem` from `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vsubps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed single-precision floating-point values in `xmm3/mem` from `xmm2` and stores result in `xmm1`.
	#[inline(always)]
	fn vsubps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed single-precision floating-point values in `ymm3/mem` from `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vsubps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract packed single-precision floating-point values in `ymm3/mem` from `ymm2` and stores result in `ymm1`.
	#[inline(always)]
	fn vsubps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract the low double-precision floating-point value in `xmm3/mem` from `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vsubsd_XMMRegister_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract the low double-precision floating-point value in `xmm3/mem` from `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vsubsd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x3, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract the low single-precision floating-point value in `xmm3/mem` from `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vsubss_XMMRegister_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Subtract the low single-precision floating-point value in `xmm3/mem` from `xmm2` and store the result in `xmm1`.
	#[inline(always)]
	fn vsubss_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x2, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x5C);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed double-precision floating-point sources.
	#[inline(always)]
	fn vtestpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed double-precision floating-point sources.
	#[inline(always)]
	fn vtestpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed double-precision floating-point sources.
	#[inline(always)]
	fn vtestpd_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed double-precision floating-point sources.
	#[inline(always)]
	fn vtestpd_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0F);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed single-precision floating-point sources.
	#[inline(always)]
	fn vtestps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed single-precision floating-point sources.
	#[inline(always)]
	fn vtestps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed single-precision floating-point sources.
	#[inline(always)]
	fn vtestps_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Set Zero Flag (ZF) and Carry Flag (CF) depending on sign bit AND and ANDN of packed single-precision floating-point sources.
	#[inline(always)]
	fn vtestps_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x02, 0x1, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x0E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vucomisd_XMMRegister_Any64BitMemory(&mut self, arg0: XMMRegister, arg1: Any64BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low double-precision floating-point values in `xmm1` and `xmm2/mem64` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vucomisd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vucomiss_XMMRegister_Any32BitMemory(&mut self, arg0: XMMRegister, arg1: Any32BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg1);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg1);

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Compare low single-precision floating-point values in `xmm1` and `xmm2/mem32` and sets the appropriate flags in `EFLAGS` accordingly.
	#[inline(always)]
	fn vucomiss_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0, arg1, arg0);

		self.opcode_1(0x2E);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpckhpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpckhpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpckhpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values from high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpckhpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpckhps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpckhps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpckhps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpckhps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x15);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values low high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpcklpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values low high quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpcklpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values low high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpcklpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves double-precision floating-point values low high quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpcklpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpcklps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `xmm2` and `xmm3/m128`.
	#[inline(always)]
	fn vunpcklps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpcklps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Unpacks and Interleaves single-precision floating-point values from low quadwords of `ymm2` and `ymm3/m256`.
	#[inline(always)]
	fn vunpcklps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x14);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vxorpd_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed double-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vxorpd_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vxorpd_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed double-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vxorpd_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x1, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vxorps_XMMRegister_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: Any128BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed single-precision floating-point values in `xmm2` and `xmm3/mem`.
	#[inline(always)]
	fn vxorps_XMMRegister_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister, arg2: XMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x0, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vxorps_YMM_YMM_Any256BitMemory(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: Any256BitMemory)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		self.prefix_group2(arg2);

		// Prefix Group 3 is #UD for VEX.

		self.prefix_group4(arg2);

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Return the bitwise logical XOR of packed single-precision floating-point values in `ymm2` and `ymm3/mem`.
	#[inline(always)]
	fn vxorps_YMM_YMM_YMM(&mut self, arg0: YMMRegister, arg1: YMMRegister, arg2: YMMRegister)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_7(0x01, 0x1, 0x0, 0x0, arg1, arg2, arg0);

		self.opcode_1(0x57);

		self.mod_rm_sib(arg2, arg0);

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero all YMM registers.
	#[inline(always)]
	fn vzeroall(&mut self)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_5(0x01, 0x1, 0x0, 0x0, XMMRegister::XMM0);

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Zero upper 128 bits of all YMM registers.
	#[inline(always)]
	fn vzeroupper(&mut self)
	{
		// This is a VEX encoded instruction.

		// Prefix Group 1 is #UD for VEX.

		// No prefix group 2.

		// Prefix Group 3 is #UD for VEX.

		// No prefix group 4.

		self.vex_5(0x01, 0x0, 0x0, 0x0, XMMRegister::XMM0);

		self.opcode_1(0x77);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.

		// No VEX immediate.
	}

	/// Check pending unmasked floating-point exceptions.
	#[inline(always)]
	fn wait(&mut self)
	{
		// This is not a VEX encoded instruction.

		self.prefix_fwait(0x9B);

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		// No Opcode Bytes	// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the `FS` base address with the 32-bit value in the source register.
	#[inline(always)]
	fn wrfsbase_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the `FS` base address with the 64-bit value in the source register.
	#[inline(always)]
	fn wrfsbase_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RDX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the `GS` base address with the 32-bit value in the source register.
	#[inline(always)]
	fn wrgsbase_Register32Bit(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Load the `GS` base address with the 64-bit value in the source register.
	#[inline(always)]
	fn wrgsbase_Register64Bit(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBX);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Causes a Restricted Transactional Memory (RTM) abort if executing in a Restricted Transactional Memory (RTM) transaction.
	#[inline(always)]
	fn xabort_Immediate8Bit(&mut self, arg0: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xC6, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// A hint used with an "XACQUIRE-enabled" instruction to start lock elision on the instruction memory operand address.
	#[inline(always)]
	fn xacquire(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF2);

		// No `REX` prefix.

		// No Opcode Bytes	// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r16` and `r/m16`; load sum into `r/m16`.
	#[inline(always)]
	fn xadd_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r32` and `r/m32`; load sum into `r/m32`.
	#[inline(always)]
	fn xadd_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r64` and `r/m64`; load sum into `r/m64`.
	#[inline(always)]
	fn xadd_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r16` and `r/m16`; load sum into `r/m16`.
	#[inline(always)]
	fn xadd_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r32` and `r/m32`; load sum into `r/m32`.
	#[inline(always)]
	fn xadd_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r64` and `r/m64`; load sum into `r/m64`.
	#[inline(always)]
	fn xadd_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_2(0x0F, 0xC1);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` and `r/m8`; load sum into `r/m8`.
	#[inline(always)]
	fn xadd_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_2(0x0F, 0xC0);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Specifies the start of an Restricted Transactional Memory (RTM) code region.
	///
	/// Provides a 32-bit relative offset to compute the address of the fallback instruction address at which execution resumes following an Restricted Transactional Memory (RTM) abort.
	#[inline(always)]
	fn xbegin_Label(&mut self, arg0: Label)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xC7, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		self.displacement_label_32bit(arg0);
	}

	/// Specifies the start of an Restricted Transactional Memory (RTM) code region.
	///
	/// Provides a 32-bit relative offset to compute the address of the fallback instruction address at which execution resumes following an Restricted Transactional Memory (RTM) abort.
	#[inline(always)]
	fn xbegin_RelativeAddress32Bit(&mut self, arg0: RelativeAddress32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_2(0xC7, 0xF8);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg0);

		// No label displacement.
	}

	/// Exchange `r16` with `AX`.
	#[inline(always)]
	fn xchg_AX_Register16Bit(&mut self, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg1, 0x00);

		self.opcode_2(0x90, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r32` with `EAX`.
	#[inline(always)]
	fn xchg_EAX_Register32Bit(&mut self, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg1, 0x00);

		self.opcode_2(0x90, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r16` with word from `r/m16`.
	#[inline(always)]
	fn xchg_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r32` with doubleword from `r/m32`.
	#[inline(always)]
	fn xchg_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r64` with quadword from `r/m64`.
	#[inline(always)]
	fn xchg_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `AX` with `r16`.
	#[inline(always)]
	fn xchg_Register16Bit_AX(&mut self, arg0: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x90, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange word from `r/m16` with `r16`.
	#[inline(always)]
	fn xchg_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r16` with word from `r/m16`.
	#[inline(always)]
	fn xchg_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange word from `r/m16` with `r16`.
	#[inline(always)]
	fn xchg_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `EAX` with `r32`.
	#[inline(always)]
	fn xchg_Register32Bit_EAX(&mut self, arg0: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x90, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange doubleword from `r/m32` with `r32`.
	#[inline(always)]
	fn xchg_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r32` with doubleword from `r/m32`.
	#[inline(always)]
	fn xchg_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange doubleword from `r/m32` with `r32`.
	#[inline(always)]
	fn xchg_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange quadword from `r/m64` with `r64`.
	#[inline(always)]
	fn xchg_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r64` with quadword from `r/m64`.
	#[inline(always)]
	fn xchg_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange quadword from `r/m64` with `r64`.
	#[inline(always)]
	fn xchg_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x87);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `RAX` with `r64`.
	#[inline(always)]
	fn xchg_Register64Bit_RAX(&mut self, arg0: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x90, arg0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8`.
	#[inline(always)]
	fn xchg_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8` (alternate form).
	#[inline(always)]
	fn xchg_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8` (alternate form).
	#[inline(always)]
	fn xchg_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r64` with `RAX`.
	#[inline(always)]
	fn xchg_RAX_Register64Bit(&mut self, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg1, Self::REX_W);

		self.opcode_2(0x90, arg1);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8`.
	#[inline(always)]
	fn xchg_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8` (alternate form).
	#[inline(always)]
	fn xchg_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange `r8` (byte register) with byte from `r/m8`.
	#[inline(always)]
	fn xchg_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Exchange byte from `r/m8` with `r8` (alternate form).
	#[inline(always)]
	fn xchg_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x86);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Specifies the end of an Restricted Transactional Memory (RTM) code region.
	#[inline(always)]
	fn xend(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xD5);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Reads an `XCR` specified by `ECX` into `EDX:EAX`.
	#[inline(always)]
	fn xgetbv(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xD0);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set `AL` to memory byte `DS:[(E)BX + unsigned AL]`.
	#[inline(always)]
	fn xlat_Any8BitMemory(&mut self, arg0: Option<SegmentRegister>, address_override_for_32_bit: bool)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4_if_address_override(address_override_for_32_bit);

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xD7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set `AL` to memory byte `DS:[(E)BX + unsigned AL]`.
	#[inline(always)]
	fn xlatb(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0xD7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Set `AL` to memory byte `[RBX + unsigned AL]`.
	#[inline(always)]
	fn xlatb_REX_W(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0xD7);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// `AL` XOR `imm8`.
	#[inline(always)]
	fn xor_AL_Immediate8Bit(&mut self, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x34);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `AX` XOR `imm16`.
	#[inline(always)]
	fn xor_AX_Immediate16Bit(&mut self, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x35);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `EAX` XOR `imm32`.
	#[inline(always)]
	fn xor_EAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_1(0x35);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` XOR `imm16`.
	#[inline(always)]
	fn xor_Any16BitMemory_Immediate16Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Any16BitMemory_Immediate8Bit(&mut self, arg0: Any16BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` XOR `r16`.
	#[inline(always)]
	fn xor_Any16BitMemory_Register16Bit(&mut self, arg0: Any16BitMemory, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` XOR `imm32`.
	#[inline(always)]
	fn xor_Any32BitMemory_Immediate32Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Any32BitMemory_Immediate8Bit(&mut self, arg0: Any32BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` XOR `r32`.
	#[inline(always)]
	fn xor_Any32BitMemory_Register32Bit(&mut self, arg0: Any32BitMemory, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` XOR `imm32` (sign-extended).
	#[inline(always)]
	fn xor_Any64BitMemory_Immediate32Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Any64BitMemory_Immediate8Bit(&mut self, arg0: Any64BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` XOR `r64`.
	#[inline(always)]
	fn xor_Any64BitMemory_Register64Bit(&mut self, arg0: Any64BitMemory, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `imm8`.
	#[inline(always)]
	fn xor_Any8BitMemory_Immediate8Bit(&mut self, arg0: Any8BitMemory, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_Any8BitMemory_Register8Bit(&mut self, arg0: Any8BitMemory, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_Any8BitMemory_RegisterHigh8BitsOf16Bits(&mut self, arg0: Any8BitMemory, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16` XOR `imm16`.
	#[inline(always)]
	fn xor_Register16Bit_Immediate16Bit(&mut self, arg0: Register16Bit, arg1: Immediate16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m16` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Register16Bit_Immediate8Bit(&mut self, arg0: Register16Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r16` XOR `r/m16`.
	#[inline(always)]
	fn xor_Register16Bit_Any16BitMemory(&mut self, arg0: Register16Bit, arg1: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m16` XOR `r16`.
	#[inline(always)]
	fn xor_Register16Bit_Register16Bit(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r16` XOR `r/m16`.
	#[inline(always)]
	fn xor_Register16Bit_Register16Bit_REX_W(&mut self, arg0: Register16Bit, arg1: Register16Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` XOR `imm32`.
	#[inline(always)]
	fn xor_Register32Bit_Immediate32Bit(&mut self, arg0: Register32Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m32` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Register32Bit_Immediate8Bit(&mut self, arg0: Register32Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r32` XOR `r/m32`.
	#[inline(always)]
	fn xor_Register32Bit_Any32BitMemory(&mut self, arg0: Register32Bit, arg1: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m32` XOR `r32`.
	#[inline(always)]
	fn xor_Register32Bit_Register32Bit(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r32` XOR `r/m32`.
	#[inline(always)]
	fn xor_Register32Bit_Register32Bit_REX_W(&mut self, arg0: Register32Bit, arg1: Register32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` XOR `imm32` (sign-extended).
	#[inline(always)]
	fn xor_Register64Bit_Immediate32Bit(&mut self, arg0: Register64Bit, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x81);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m64` XOR `imm8` (sign-extended).
	#[inline(always)]
	fn xor_Register64Bit_Immediate8Bit(&mut self, arg0: Register64Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_1(0x83);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r64` XOR `r/m64`.
	#[inline(always)]
	fn xor_Register64Bit_Any64BitMemory(&mut self, arg0: Register64Bit, arg1: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m64` XOR `r64`.
	#[inline(always)]
	fn xor_Register64Bit_Register64Bit(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, Self::REX_W);

		self.opcode_1(0x31);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r64` XOR `r/m64`.
	#[inline(always)]
	fn xor_Register64Bit_Register64Bit_REX_W(&mut self, arg0: Register64Bit, arg1: Register64Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, Self::REX_W);

		self.opcode_1(0x33);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `imm8`.
	#[inline(always)]
	fn xor_Register8Bit_Immediate8Bit(&mut self, arg0: Register8Bit, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_Register8Bit_Any8BitMemory(&mut self, arg0: Register8Bit, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_Register8Bit_Register8Bit(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_Register8Bit_Register8Bit_REX_W(&mut self, arg0: Register8Bit, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_Register8Bit_RegisterHigh8BitsOf16Bits(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_Register8Bit_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: Register8Bit, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `RAX` XOR `imm32` (sign-extended).
	#[inline(always)]
	fn xor_RAX_Immediate32Bit(&mut self, arg1: Immediate32Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_1(Self::REX_W);

		self.opcode_1(0x35);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r/m8` XOR `imm8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_Immediate8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Immediate8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_1(0x80);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		self.displacement_immediate_1(arg1);

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_Any8BitMemory(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Any8BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_Register8Bit(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_Register8Bit_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: Register8Bit)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r/m8` XOR `r8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg0, arg1, 0x00);

		self.opcode_1(0x30);

		self.mod_rm_sib(arg0, arg1);

		// No displacement or immediate.

		// No label displacement.
	}

	/// `r8` XOR `r/m8`.
	#[inline(always)]
	fn xor_RegisterHigh8BitsOf16Bits_RegisterHigh8BitsOf16Bits_REX_W(&mut self, arg0: RegisterHigh8BitsOf16Bits, arg1: RegisterHigh8BitsOf16Bits)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_1(0x32);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise exclusive-OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn xorpd_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x57);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise exclusive-OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn xorpd_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		self.prefix_group3();

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x57);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise exclusive-OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn xorps_XMMRegister_Any128BitMemory(&mut self, arg0: XMMRegister, arg1: Any128BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg1);

		self.prefix_group4(arg1);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x57);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Bitwise exclusive-OR of `xmm2/m128` and `xmm1`.
	#[inline(always)]
	fn xorps_XMMRegister_XMMRegister(&mut self, arg0: XMMRegister, arg1: XMMRegister)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		self.rex_3(arg1, arg0, 0x00);

		self.opcode_2(0x0F, 0x57);

		self.mod_rm_sib(arg1, arg0);

		// No displacement or immediate.

		// No label displacement.
	}

	/// A hint used with an "XRELEASE-enabled" instruction to end lock elision on the instruction memory operand address.
	#[inline(always)]
	fn xrelease(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		self.prefix_group1(0xF3);

		// No `REX` prefix.

		// No Opcode Bytes	// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor64_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor64_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Restore processor extended states from memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xrstor64_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RBP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave64_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave64_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states to memory.
	///
	/// The states are specified by `EDX:EAX`.
	#[inline(always)]
	fn xsave64_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSP);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, 0x00);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt64_Any16BitMemory(&mut self, arg0: Any16BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		self.prefix_group3();

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt64_Any32BitMemory(&mut self, arg0: Any32BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Save processor extended states specified in `EDX:EAX` to memory, optimizing the state save operation if possible.
	#[inline(always)]
	fn xsaveopt64_Any64BitMemory(&mut self, arg0: Any64BitMemory)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		self.prefix_group2(arg0);

		self.prefix_group4(arg0);

		// No prefix group 3.

		// No prefix group 1.

		self.rex_2(arg0, Self::REX_W);

		self.opcode_2(0x0F, 0xAE);

		self.mod_rm_sib(arg0, Register64Bit::RSI);

		// No displacement or immediate.

		// No label displacement.
	}

	/// Test if executing in a transactional region.
	#[inline(always)]
	fn xtest(&mut self)
	{
		// This is not a VEX encoded instruction.

		// No `FWAIT` Prefix.

		// No prefix group 2.

		// No prefix group 4.

		// No prefix group 3.

		// No prefix group 1.

		// No `REX` prefix.

		self.opcode_3(0x0F, 0x01, 0xD6);

		// No 'ModR/M' byte or Scaled Index Byte (SIB).

		// No displacement or immediate.

		// No label displacement.
	}
}
